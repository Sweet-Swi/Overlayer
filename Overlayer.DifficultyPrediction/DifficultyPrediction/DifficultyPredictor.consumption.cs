// This file was auto-generated by ML.NET Model Builder. 
#define TEST
using Microsoft.ML;
using Microsoft.ML.Data;
using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using System.Reflection;

namespace Overlayer.DifficultyPrediction
{
    public partial class DifficultyPredictor
    {
        /// <summary>
        /// model input class for DifficultyPredictor.
        /// </summary>
        #region model input class
        public class ModelInput
        {
            [ColumnName(@"타일 수")]
            public float 타일_수 { get; set; }

            [ColumnName(@"평균 BPM")]
            public float 평균_BPM { get; set; }

            [ColumnName(@"BPM 분산")]
            public float BPM_분산 { get; set; }

            [ColumnName(@"BPM 표준편차")]
            public float BPM_표준편차 { get; set; }

            [ColumnName(@"난이도")]
            public float 난이도 { get; set; }

        }

        #endregion

        /// <summary>
        /// model output class for DifficultyPredictor.
        /// </summary>
        #region model output class
        public class ModelOutput
        {
            public float Score { get; set; }
        }
        #endregion

#if TEST
        //private static string MLNetModelPath = Path.GetFullPath("DifficultyPredictor.zip");
#else 
        private static string MLNetModelPath = Path.GetFullPath("Mods/Overlayer/DifficultyPredictor.zip");
#endif
        public static readonly Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictEngine = new Lazy<PredictionEngine<ModelInput, ModelOutput>>(() => CreatePredictEngine(), true);

        /// <summary>
        /// Use this method to predict on <see cref="ModelInput"/>.
        /// </summary>
        /// <param name="input">model input.</param>
        /// <returns><seealso cref=" ModelOutput"/></returns>
        public static ModelOutput Predict(ModelInput input)
        {
            var predEngine = PredictEngine.Value;
            return predEngine.Predict(input);
        }

        private static PredictionEngine<ModelInput, ModelOutput> CreatePredictEngine()
        {
            var mlContext = new MLContext();
            ITransformer mlModel = mlContext.Model.Load(Assembly.GetExecutingAssembly().GetManifestResourceStream("Overlayer.DifficultyPrediction.DifficultyPredictor.zip"), out var _);
            return mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
        }
    }
}
