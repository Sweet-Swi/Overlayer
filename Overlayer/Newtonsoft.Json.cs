#pragma warning disable
using System;using System.Globalization;using System.Collections.Generic;using System.Text;using System.IO;using System.Collections;using System.Numerics;using System.Reflection;using System.Collections.ObjectModel;using System.Diagnostics;using System.Runtime.CompilerServices;using System.Threading;using System.ComponentModel;using System.Text.RegularExpressions;using System.Diagnostics.CodeAnalysis;using System.Data.SqlTypes;using System.Data;using System.Xml;using System.Collections.Concurrent;using System.Dynamic;using System.Runtime.Serialization;using System.Security.Permissions;using System.Linq.Expressions;using System.Reflection.Emit;using System.Runtime.InteropServices;using System.Threading.Tasks;using System.Collections.Specialized;using System.Xml.Linq;using System.Security;using System.Runtime.Serialization.Formatters;using Newtonsoft.Json.Bson;using Newtonsoft.Json.Utilities;using Newtonsoft.Json.Serialization;using Newtonsoft.Json.Linq;using Newtonsoft.Json.Utilities.LinqBridge;using Newtonsoft.Json.Schema;using Newtonsoft.Json.Converters;using Newtonsoft.Json.Linq.JsonPath;using ErrorEventArgs=Newtonsoft.Json.Serialization.ErrorEventArgs;
namespace Newtonsoft.Json.Converters{[Obsolete("BSON reading and writing has been moved to its own package. See https://www.nuget.org/packages/SD.Bson for more details.")]public class BsonObjectIdConverter:JsonConverter{public override void WriteJson(JsonWriter writer,object value,JsonSerializer serializer){BsonObjectId objectId=(BsonObjectId)value;if(writer is BsonWriter bsonWriter){bsonWriter.WriteObjectId(objectId.Value);}else{writer.WriteValue(objectId.Value);}}public override object ReadJson(JsonReader reader,Type objectType,object existingValue,JsonSerializer serializer){if(reader.TokenType!=JsonToken.Bytes){throw new JsonSerializationException("Expected Bytes but got {0}.".FormatWith(CultureInfo.InvariantCulture,reader.TokenType));}byte[]value=(byte[])reader.Value;return new BsonObjectId(value);}public override bool CanConvert(Type objectType){return(objectType==typeof(BsonObjectId));}}}
namespace Newtonsoft.Json.Bson{[Obsolete("BSON reading and writing has been moved to its own package. See https://www.nuget.org/packages/SD.Bson for more details.")]public class BsonReader:JsonReader{private const int MaxCharBytesSize=128;private static readonly byte[]SeqRange1=new byte[]{0,127};private static readonly byte[]SeqRange2=new byte[]{194,223};private static readonly byte[]SeqRange3=new byte[]{224,239};private static readonly byte[]SeqRange4=new byte[]{240,244};private readonly BinaryReader _reader;private readonly List<ContainerContext>_stack;private byte[]_byteBuffer;private char[]_charBuffer;private BsonType _currentElementType;private BsonReaderState _bsonReaderState;private ContainerContext _currentContext;private bool _readRootValueAsArray;private bool _jsonNet35BinaryCompatibility;private DateTimeKind _dateTimeKindHandling;private enum BsonReaderState{Normal=0,ReferenceStart=1,ReferenceRef=2,ReferenceId=3,CodeWScopeStart=4,CodeWScopeCode=5,CodeWScopeScope=6,CodeWScopeScopeObject=7,CodeWScopeScopeEnd=8}private class ContainerContext{public readonly BsonType Type;public int Length;public int Position;public ContainerContext(BsonType type){Type=type;}}[Obsolete("JsonNet35BinaryCompatibility will be removed in a future version of Json.NET.")]public bool JsonNet35BinaryCompatibility{get=>_jsonNet35BinaryCompatibility;set=>_jsonNet35BinaryCompatibility=value;}public bool ReadRootValueAsArray{get=>_readRootValueAsArray;set=>_readRootValueAsArray=value;}public DateTimeKind DateTimeKindHandling{get=>_dateTimeKindHandling;set=>_dateTimeKindHandling=value;}public BsonReader(Stream stream):this(stream,false,DateTimeKind.Local){}public BsonReader(BinaryReader reader):this(reader,false,DateTimeKind.Local){}public BsonReader(Stream stream,bool readRootValueAsArray,DateTimeKind dateTimeKindHandling){ValidationUtils.ArgumentNotNull(stream,nameof(stream));_reader=new BinaryReader(stream);_stack=new List<ContainerContext>();_readRootValueAsArray=readRootValueAsArray;_dateTimeKindHandling=dateTimeKindHandling;}public BsonReader(BinaryReader reader,bool readRootValueAsArray,DateTimeKind dateTimeKindHandling){ValidationUtils.ArgumentNotNull(reader,nameof(reader));_reader=reader;_stack=new List<ContainerContext>();_readRootValueAsArray=readRootValueAsArray;_dateTimeKindHandling=dateTimeKindHandling;}private string ReadElement(){_currentElementType=ReadType();string elementName=ReadString();return elementName;}public override bool Read(){try{bool success;switch(_bsonReaderState){case BsonReaderState.Normal:success=ReadNormal();break;case BsonReaderState.ReferenceStart:case BsonReaderState.ReferenceRef:case BsonReaderState.ReferenceId:success=ReadReference();break;case BsonReaderState.CodeWScopeStart:case BsonReaderState.CodeWScopeCode:case BsonReaderState.CodeWScopeScope:case BsonReaderState.CodeWScopeScopeObject:case BsonReaderState.CodeWScopeScopeEnd:success=ReadCodeWScope();break;default:throw JsonReaderException.Create(this,"Unexpected state: {0}".FormatWith(CultureInfo.InvariantCulture,_bsonReaderState));}if(!success){SetToken(JsonToken.None);return false;}return true;}catch(EndOfStreamException){SetToken(JsonToken.None);return false;}}public override void Close(){base.Close();if(CloseInput){
#if HAVE_STREAM_READER_WRITER_CLOSE
_reader?.Close();
#else
_reader?.Dispose();
#endif
}}private bool ReadCodeWScope(){switch(_bsonReaderState){case BsonReaderState.CodeWScopeStart:SetToken(JsonToken.PropertyName,"$code");_bsonReaderState=BsonReaderState.CodeWScopeCode;return true;case BsonReaderState.CodeWScopeCode:ReadInt32();SetToken(JsonToken.String,ReadLengthString());_bsonReaderState=BsonReaderState.CodeWScopeScope;return true;case BsonReaderState.CodeWScopeScope:if(CurrentState==State.PostValue){SetToken(JsonToken.PropertyName,"$scope");return true;}else{SetToken(JsonToken.StartObject);_bsonReaderState=BsonReaderState.CodeWScopeScopeObject;ContainerContext newContext=new ContainerContext(BsonType.Object);PushContext(newContext);newContext.Length=ReadInt32();return true;}case BsonReaderState.CodeWScopeScopeObject:bool result=ReadNormal();if(result&&TokenType==JsonToken.EndObject){_bsonReaderState=BsonReaderState.CodeWScopeScopeEnd;}return result;case BsonReaderState.CodeWScopeScopeEnd:SetToken(JsonToken.EndObject);_bsonReaderState=BsonReaderState.Normal;return true;default:throw new ArgumentOutOfRangeException();}}private bool ReadReference(){switch(CurrentState){case State.ObjectStart:{SetToken(JsonToken.PropertyName,JsonTypeReflector.RefPropertyName);_bsonReaderState=BsonReaderState.ReferenceRef;return true;}case State.Property:{if(_bsonReaderState==BsonReaderState.ReferenceRef){SetToken(JsonToken.String,ReadLengthString());return true;}else if(_bsonReaderState==BsonReaderState.ReferenceId){SetToken(JsonToken.Bytes,ReadBytes(12));return true;}else{throw JsonReaderException.Create(this,"Unexpected state when reading BSON reference: "+_bsonReaderState);}}case State.PostValue:{if(_bsonReaderState==BsonReaderState.ReferenceRef){SetToken(JsonToken.PropertyName,JsonTypeReflector.IdPropertyName);_bsonReaderState=BsonReaderState.ReferenceId;return true;}else if(_bsonReaderState==BsonReaderState.ReferenceId){SetToken(JsonToken.EndObject);_bsonReaderState=BsonReaderState.Normal;return true;}else{throw JsonReaderException.Create(this,"Unexpected state when reading BSON reference: "+_bsonReaderState);}}default:throw JsonReaderException.Create(this,"Unexpected state when reading BSON reference: "+CurrentState);}}private bool ReadNormal(){switch(CurrentState){case State.Start:{JsonToken token=(!_readRootValueAsArray)?JsonToken.StartObject:JsonToken.StartArray;BsonType type=(!_readRootValueAsArray)?BsonType.Object:BsonType.Array;SetToken(token);ContainerContext newContext=new ContainerContext(type);PushContext(newContext);newContext.Length=ReadInt32();return true;}case State.Complete:case State.Closed:return false;case State.Property:{ReadType(_currentElementType);return true;}case State.ObjectStart:case State.ArrayStart:case State.PostValue:ContainerContext context=_currentContext;if(context==null){if(SupportMultipleContent){goto case State.Start;}return false;}int lengthMinusEnd=context.Length-1;if(context.Position<lengthMinusEnd){if(context.Type==BsonType.Array){ReadElement();ReadType(_currentElementType);return true;}else{SetToken(JsonToken.PropertyName,ReadElement());return true;}}else if(context.Position==lengthMinusEnd){if(ReadByte()!=0){throw JsonReaderException.Create(this,"Unexpected end of object byte value.");}PopContext();if(_currentContext!=null){MovePosition(context.Length);}JsonToken endToken=(context.Type==BsonType.Object)?JsonToken.EndObject:JsonToken.EndArray;SetToken(endToken);return true;}else{throw JsonReaderException.Create(this,"Read past end of current container context.");}case State.ConstructorStart:break;case State.Constructor:break;case State.Error:break;case State.Finished:break;default:throw new ArgumentOutOfRangeException();}return false;}private void PopContext(){_stack.RemoveAt(_stack.Count-1);if(_stack.Count==0){_currentContext=null;}else{_currentContext=_stack[_stack.Count-1];}}private void PushContext(ContainerContext newContext){_stack.Add(newContext);_currentContext=newContext;}private byte ReadByte(){MovePosition(1);return _reader.ReadByte();}private void ReadType(BsonType type){switch(type){case BsonType.Number:double d=ReadDouble();if(_floatParseHandling==FloatParseHandling.Decimal){SetToken(JsonToken.Float,Convert.ToDecimal(d,CultureInfo.InvariantCulture));}else{SetToken(JsonToken.Float,d);}break;case BsonType.String:case BsonType.Symbol:SetToken(JsonToken.String,ReadLengthString());break;case BsonType.Object:{SetToken(JsonToken.StartObject);ContainerContext newContext=new ContainerContext(BsonType.Object);PushContext(newContext);newContext.Length=ReadInt32();break;}case BsonType.Array:{SetToken(JsonToken.StartArray);ContainerContext newContext=new ContainerContext(BsonType.Array);PushContext(newContext);newContext.Length=ReadInt32();break;}case BsonType.Binary:BsonBinaryType binaryType;byte[]data=ReadBinary(out binaryType);object value=(binaryType!=BsonBinaryType.Uuid)?data:(object)new Guid(data);SetToken(JsonToken.Bytes,value);break;case BsonType.Undefined:SetToken(JsonToken.Undefined);break;case BsonType.Oid:byte[]oid=ReadBytes(12);SetToken(JsonToken.Bytes,oid);break;case BsonType.Boolean:bool b=Convert.ToBoolean(ReadByte());SetToken(JsonToken.Boolean,b);break;case BsonType.Date:long ticks=ReadInt64();DateTime utcDateTime=DateTimeUtils.ConvertJavaScriptTicksToDateTime(ticks);DateTime dateTime;switch(DateTimeKindHandling){case DateTimeKind.Unspecified:dateTime=DateTime.SpecifyKind(utcDateTime,DateTimeKind.Unspecified);break;case DateTimeKind.Local:dateTime=utcDateTime.ToLocalTime();break;default:dateTime=utcDateTime;break;}SetToken(JsonToken.Date,dateTime);break;case BsonType.Null:SetToken(JsonToken.Null);break;case BsonType.Regex:string expression=ReadString();string modifiers=ReadString();string regex=@"/"+expression+@"/"+modifiers;SetToken(JsonToken.String,regex);break;case BsonType.Reference:SetToken(JsonToken.StartObject);_bsonReaderState=BsonReaderState.ReferenceStart;break;case BsonType.Code:SetToken(JsonToken.String,ReadLengthString());break;case BsonType.CodeWScope:SetToken(JsonToken.StartObject);_bsonReaderState=BsonReaderState.CodeWScopeStart;break;case BsonType.Integer:SetToken(JsonToken.Integer,(long)ReadInt32());break;case BsonType.TimeStamp:case BsonType.Long:SetToken(JsonToken.Integer,ReadInt64());break;default:throw new ArgumentOutOfRangeException(nameof(type),"Unexpected BsonType value: "+type);}}private byte[]ReadBinary(out BsonBinaryType binaryType){int dataLength=ReadInt32();binaryType=(BsonBinaryType)ReadByte();
if(binaryType==BsonBinaryType.BinaryOld&&!_jsonNet35BinaryCompatibility){dataLength=ReadInt32();}
return ReadBytes(dataLength);}private string ReadString(){EnsureBuffers();StringBuilder builder=null;int totalBytesRead=0;int offset=0;while(true){int count=offset;byte b;while(count<MaxCharBytesSize&&(b=_reader.ReadByte())>0){_byteBuffer[count++]=b;}int byteCount=count-offset;totalBytesRead+=byteCount;if(count<MaxCharBytesSize&&builder==null){int length=Encoding.UTF8.GetChars(_byteBuffer,0,byteCount,_charBuffer,0);MovePosition(totalBytesRead+1);return new string(_charBuffer,0,length);}else{int lastFullCharStop=GetLastFullCharStop(count-1);int charCount=Encoding.UTF8.GetChars(_byteBuffer,0,lastFullCharStop+1,_charBuffer,0);if(builder==null){builder=new StringBuilder(MaxCharBytesSize*2);}builder.Append(_charBuffer,0,charCount);if(lastFullCharStop<byteCount-1){offset=byteCount-lastFullCharStop-1;Array.Copy(_byteBuffer,lastFullCharStop+1,_byteBuffer,0,offset);}else{if(count<MaxCharBytesSize){MovePosition(totalBytesRead+1);return builder.ToString();}offset=0;}}}}private string ReadLengthString(){int length=ReadInt32();MovePosition(length);string s=GetString(length-1);_reader.ReadByte();return s;}private string GetString(int length){if(length==0){return string.Empty;}EnsureBuffers();StringBuilder builder=null;int totalBytesRead=0;int offset=0;do{int count=((length-totalBytesRead)>MaxCharBytesSize-offset)?MaxCharBytesSize-offset:length-totalBytesRead;int byteCount=_reader.Read(_byteBuffer,offset,count);if(byteCount==0){throw new EndOfStreamException("Unable to read beyond the end of the stream.");}totalBytesRead+=byteCount;byteCount+=offset;if(byteCount==length){int charCount=Encoding.UTF8.GetChars(_byteBuffer,0,byteCount,_charBuffer,0);return new string(_charBuffer,0,charCount);}else{int lastFullCharStop=GetLastFullCharStop(byteCount-1);if(builder==null){builder=new StringBuilder(length);}int charCount=Encoding.UTF8.GetChars(_byteBuffer,0,lastFullCharStop+1,_charBuffer,0);builder.Append(_charBuffer,0,charCount);if(lastFullCharStop<byteCount-1){offset=byteCount-lastFullCharStop-1;Array.Copy(_byteBuffer,lastFullCharStop+1,_byteBuffer,0,offset);}else{offset=0;}}}while(totalBytesRead<length);return builder.ToString();}private int GetLastFullCharStop(int start){int lookbackPos=start;int bis=0;while(lookbackPos>=0){bis=BytesInSequence(_byteBuffer[lookbackPos]);if(bis==0){lookbackPos--;continue;}else if(bis==1){break;}else{lookbackPos--;break;}}if(bis==start-lookbackPos){return start;}else{return lookbackPos;}}private int BytesInSequence(byte b){if(b<=SeqRange1[1]){return 1;}if(b>=SeqRange2[0]&&b<=SeqRange2[1]){return 2;}if(b>=SeqRange3[0]&&b<=SeqRange3[1]){return 3;}if(b>=SeqRange4[0]&&b<=SeqRange4[1]){return 4;}return 0;}private void EnsureBuffers(){if(_byteBuffer==null){_byteBuffer=new byte[MaxCharBytesSize];}if(_charBuffer==null){int charBufferSize=Encoding.UTF8.GetMaxCharCount(MaxCharBytesSize);_charBuffer=new char[charBufferSize];}}private double ReadDouble(){MovePosition(8);return _reader.ReadDouble();}private int ReadInt32(){MovePosition(4);return _reader.ReadInt32();}private long ReadInt64(){MovePosition(8);return _reader.ReadInt64();}private BsonType ReadType(){MovePosition(1);return(BsonType)_reader.ReadSByte();}private void MovePosition(int count){_currentContext.Position+=count;}private byte[]ReadBytes(int count){MovePosition(count);return _reader.ReadBytes(count);}}}
namespace Newtonsoft.Json.Bson{internal abstract class BsonToken{public abstract BsonType Type{get;}public BsonToken Parent{get;set;}public int CalculatedSize{get;set;}}internal class BsonObject:BsonToken,IEnumerable<BsonProperty>{private readonly List<BsonProperty>_children=new List<BsonProperty>();public void Add(string name,BsonToken token){_children.Add(new BsonProperty{Name=new BsonString(name,false),Value=token});token.Parent=this;}public override BsonType Type=>BsonType.Object;public IEnumerator<BsonProperty>GetEnumerator(){return _children.GetEnumerator();}IEnumerator IEnumerable.GetEnumerator(){return GetEnumerator();}}internal class BsonArray:BsonToken,IEnumerable<BsonToken>{private readonly List<BsonToken>_children=new List<BsonToken>();public void Add(BsonToken token){_children.Add(token);token.Parent=this;}public override BsonType Type=>BsonType.Array;public IEnumerator<BsonToken>GetEnumerator(){return _children.GetEnumerator();}IEnumerator IEnumerable.GetEnumerator(){return GetEnumerator();}}internal class BsonEmpty:BsonToken{public static readonly BsonToken Null=new BsonEmpty(BsonType.Null);public static readonly BsonToken Undefined=new BsonEmpty(BsonType.Undefined);private BsonEmpty(BsonType type){Type=type;}public override BsonType Type{get;}}internal class BsonValue:BsonToken{private readonly object _value;private readonly BsonType _type;public BsonValue(object value,BsonType type){_value=value;_type=type;}public object Value=>_value;public override BsonType Type=>_type;}internal class BsonBoolean:BsonValue{public static readonly BsonBoolean False=new BsonBoolean(false);public static readonly BsonBoolean True=new BsonBoolean(true);private BsonBoolean(bool value):base(value,BsonType.Boolean){}}internal class BsonString:BsonValue{public int ByteCount{get;set;}public bool IncludeLength{get;}public BsonString(object value,bool includeLength):base(value,BsonType.String){IncludeLength=includeLength;}}internal class BsonBinary:BsonValue{public BsonBinaryType BinaryType{get;set;}public BsonBinary(byte[]value,BsonBinaryType binaryType):base(value,BsonType.Binary){BinaryType=binaryType;}}internal class BsonRegex:BsonToken{public BsonString Pattern{get;set;}public BsonString Options{get;set;}public BsonRegex(string pattern,string options){Pattern=new BsonString(pattern,false);Options=new BsonString(options,false);}public override BsonType Type=>BsonType.Regex;}internal class BsonProperty{public BsonString Name{get;set;}public BsonToken Value{get;set;}}}
namespace Newtonsoft.Json.Bson{internal enum BsonType:sbyte{Number=1,String=2,Object=3,Array=4,Binary=5,Undefined=6,Oid=7,Boolean=8,Date=9,Null=10,Regex=11,Reference=12,Code=13,Symbol=14,CodeWScope=15,Integer=16,TimeStamp=17,Long=18,MinKey=-1,MaxKey=127}}
namespace Newtonsoft.Json.Bson{[Obsolete("BSON reading and writing has been moved to its own package. See https://www.nuget.org/packages/SD.Bson for more details.")]public class BsonWriter:JsonWriter{private readonly BsonBinaryWriter _writer;private BsonToken _root;private BsonToken _parent;private string _propertyName;public DateTimeKind DateTimeKindHandling{get=>_writer.DateTimeKindHandling;set=>_writer.DateTimeKindHandling=value;}public BsonWriter(Stream stream){ValidationUtils.ArgumentNotNull(stream,nameof(stream));_writer=new BsonBinaryWriter(new BinaryWriter(stream));}public BsonWriter(BinaryWriter writer){ValidationUtils.ArgumentNotNull(writer,nameof(writer));_writer=new BsonBinaryWriter(writer);}public override void Flush(){_writer.Flush();}protected override void WriteEnd(JsonToken token){base.WriteEnd(token);RemoveParent();if(Top==0){_writer.WriteToken(_root);}}public override void WriteComment(string text){throw JsonWriterException.Create(this,"Cannot write JSON comment as BSON.",null);}public override void WriteStartConstructor(string name){throw JsonWriterException.Create(this,"Cannot write JSON constructor as BSON.",null);}public override void WriteRaw(string json){throw JsonWriterException.Create(this,"Cannot write raw JSON as BSON.",null);}public override void WriteRawValue(string json){throw JsonWriterException.Create(this,"Cannot write raw JSON as BSON.",null);}public override void WriteStartArray(){base.WriteStartArray();AddParent(new BsonArray());}public override void WriteStartObject(){base.WriteStartObject();AddParent(new BsonObject());}public override void WritePropertyName(string name){base.WritePropertyName(name);_propertyName=name;}public override void Close(){base.Close();if(CloseOutput){_writer?.Close();}}private void AddParent(BsonToken container){AddToken(container);_parent=container;}private void RemoveParent(){_parent=_parent.Parent;}private void AddValue(object value,BsonType type){AddToken(new BsonValue(value,type));}internal void AddToken(BsonToken token){if(_parent!=null){if(_parent is BsonObject bo){bo.Add(_propertyName,token);_propertyName=null;}else{((BsonArray)_parent).Add(token);}}else{if(token.Type!=BsonType.Object&&token.Type!=BsonType.Array){throw JsonWriterException.Create(this,"Error writing {0} value. BSON must start with an Object or Array.".FormatWith(CultureInfo.InvariantCulture,token.Type),null);}_parent=token;_root=token;}}public override void WriteValue(object value){
#if HAVE_BIG_INTEGER
if(value is BigInteger i){SetWriteState(JsonToken.Integer,null);AddToken(new BsonBinary(i.ToByteArray(),BsonBinaryType.Binary));}else
#endif
{base.WriteValue(value);}}public override void WriteNull(){base.WriteNull();AddToken(BsonEmpty.Null);}public override void WriteUndefined(){base.WriteUndefined();AddToken(BsonEmpty.Undefined);}public override void WriteValue(string value){base.WriteValue(value);AddToken(value==null?BsonEmpty.Null:new BsonString(value,true));}public override void WriteValue(int value){base.WriteValue(value);AddValue(value,BsonType.Integer);}[CLSCompliant(false)]public override void WriteValue(uint value){if(value>int.MaxValue){throw JsonWriterException.Create(this,"Value is too large to fit in a signed 32 bit integer. BSON does not support unsigned values.",null);}base.WriteValue(value);AddValue(value,BsonType.Integer);}public override void WriteValue(long value){base.WriteValue(value);AddValue(value,BsonType.Long);}[CLSCompliant(false)]public override void WriteValue(ulong value){if(value>long.MaxValue){throw JsonWriterException.Create(this,"Value is too large to fit in a signed 64 bit integer. BSON does not support unsigned values.",null);}base.WriteValue(value);AddValue(value,BsonType.Long);}public override void WriteValue(float value){base.WriteValue(value);AddValue(value,BsonType.Number);}public override void WriteValue(double value){base.WriteValue(value);AddValue(value,BsonType.Number);}public override void WriteValue(bool value){base.WriteValue(value);AddToken(value?BsonBoolean.True:BsonBoolean.False);}public override void WriteValue(short value){base.WriteValue(value);AddValue(value,BsonType.Integer);}[CLSCompliant(false)]public override void WriteValue(ushort value){base.WriteValue(value);AddValue(value,BsonType.Integer);}public override void WriteValue(char value){base.WriteValue(value);string s=null;
#if HAVE_CHAR_TO_STRING_WITH_CULTURE
s=value.ToString(CultureInfo.InvariantCulture);
#else
s=value.ToString();
#endif
AddToken(new BsonString(s,true));}public override void WriteValue(byte value){base.WriteValue(value);AddValue(value,BsonType.Integer);}[CLSCompliant(false)]public override void WriteValue(sbyte value){base.WriteValue(value);AddValue(value,BsonType.Integer);}public override void WriteValue(decimal value){base.WriteValue(value);AddValue(value,BsonType.Number);}public override void WriteValue(DateTime value){base.WriteValue(value);value=DateTimeUtils.EnsureDateTime(value,DateTimeZoneHandling);AddValue(value,BsonType.Date);}
#if HAVE_DATE_TIME_OFFSET
public override void WriteValue(DateTimeOffset value){base.WriteValue(value);AddValue(value,BsonType.Date);}
#endif
public override void WriteValue(byte[]value){if(value==null){WriteNull();return;}base.WriteValue(value);AddToken(new BsonBinary(value,BsonBinaryType.Binary));}public override void WriteValue(Guid value){base.WriteValue(value);AddToken(new BsonBinary(value.ToByteArray(),BsonBinaryType.Uuid));}public override void WriteValue(TimeSpan value){base.WriteValue(value);AddToken(new BsonString(value.ToString(),true));}public override void WriteValue(Uri value){if(value==null){WriteNull();return;}base.WriteValue(value);AddToken(new BsonString(value.ToString(),true));}public void WriteObjectId(byte[]value){ValidationUtils.ArgumentNotNull(value,nameof(value));if(value.Length!=12){throw JsonWriterException.Create(this,"An object id must be 12 bytes",null);}SetWriteState(JsonToken.Undefined,null);AddValue(value,BsonType.Oid);}public void WriteRegex(string pattern,string options){ValidationUtils.ArgumentNotNull(pattern,nameof(pattern));SetWriteState(JsonToken.Undefined,null);AddToken(new BsonRegex(pattern,options));}}}namespace Newtonsoft.Json.Serialization{internal static class CachedAttributeGetter<T>where T:Attribute{private static readonly ThreadSafeStore<object,T?>TypeAttributeCache=new ThreadSafeStore<object,T?>(JsonTypeReflector.GetAttribute<T>);public static T?GetAttribute(object type){return TypeAttributeCache.Get(type);}}}namespace Newtonsoft.Json.Serialization{public class CamelCaseNamingStrategy:NamingStrategy{public CamelCaseNamingStrategy(bool processDictionaryKeys,bool overrideSpecifiedNames){ProcessDictionaryKeys=processDictionaryKeys;OverrideSpecifiedNames=overrideSpecifiedNames;}public CamelCaseNamingStrategy(bool processDictionaryKeys,bool overrideSpecifiedNames,bool processExtensionDataNames):this(processDictionaryKeys,overrideSpecifiedNames){ProcessExtensionDataNames=processExtensionDataNames;}public CamelCaseNamingStrategy(){}protected override string ResolvePropertyName(string name){return StringUtils.ToCamelCase(name);}}}namespace Newtonsoft.Json.Serialization{public class CamelCasePropertyNamesContractResolver:DefaultContractResolver{private static readonly object TypeContractCacheLock=new object();private static readonly DefaultJsonNameTable NameTable=new DefaultJsonNameTable();private static Dictionary<StructMultiKey<Type,Type>,JsonContract>?_contractCache;public CamelCasePropertyNamesContractResolver(){NamingStrategy=new CamelCaseNamingStrategy{ProcessDictionaryKeys=true,OverrideSpecifiedNames=true};}public override JsonContract ResolveContract(Type type){if(type==null){throw new ArgumentNullException(nameof(type));}StructMultiKey<Type,Type>key=new StructMultiKey<Type,Type>(GetType(),type);Dictionary<StructMultiKey<Type,Type>,JsonContract>?cache=_contractCache;if(cache==null||!cache.TryGetValue(key,out JsonContract contract)){contract=CreateContract(type);lock(TypeContractCacheLock){cache=_contractCache;Dictionary<StructMultiKey<Type,Type>,JsonContract>updatedCache=(cache!=null)?new Dictionary<StructMultiKey<Type,Type>,JsonContract>(cache):new Dictionary<StructMultiKey<Type,Type>,JsonContract>();updatedCache[key]=contract;_contractCache=updatedCache;}}return contract;}internal override DefaultJsonNameTable GetNameTable(){return NameTable;}}}
namespace Newtonsoft.Json.Utilities{internal static class CollectionUtils{public static bool IsNullOrEmpty<T>(ICollection<T>collection){if(collection!=null){return(collection.Count==0);}return true;}public static void AddRange<T>(this IList<T>initial,IEnumerable<T>collection){if(initial==null){throw new ArgumentNullException(nameof(initial));}if(collection==null){return;}foreach(T value in collection){initial.Add(value);}}
#if !HAVE_COVARIANT_GENERICS
public static void AddRange<T>(this IList<T>initial,IEnumerable collection){ValidationUtils.ArgumentNotNull(initial,nameof(initial));initial.AddRange(collection.Cast<T>());}
#endif
public static bool IsDictionaryType(Type type){ValidationUtils.ArgumentNotNull(type,nameof(type));if(typeof(IDictionary).IsAssignableFrom(type)){return true;}if(ReflectionUtils.ImplementsGenericDefinition(type,typeof(IDictionary<,>))){return true;}
#if HAVE_READ_ONLY_COLLECTIONS
if(ReflectionUtils.ImplementsGenericDefinition(type,typeof(IReadOnlyDictionary<,>))){return true;}
#endif
return false;}public static ConstructorInfo?ResolveEnumerableCollectionConstructor(Type collectionType,Type collectionItemType){Type genericConstructorArgument=typeof(IList<>).MakeGenericType(collectionItemType);return ResolveEnumerableCollectionConstructor(collectionType,collectionItemType,genericConstructorArgument);}public static ConstructorInfo?ResolveEnumerableCollectionConstructor(Type collectionType,Type collectionItemType,Type constructorArgumentType){Type genericEnumerable=typeof(IEnumerable<>).MakeGenericType(collectionItemType);ConstructorInfo?match=null;foreach(ConstructorInfo constructor in collectionType.GetConstructors(BindingFlags.Public|BindingFlags.Instance)){IList<ParameterInfo>parameters=constructor.GetParameters();if(parameters.Count==1){Type parameterType=parameters[0].ParameterType;if(genericEnumerable==parameterType){match=constructor;break;}if(match==null){if(parameterType.IsAssignableFrom(constructorArgumentType)){match=constructor;}}}}return match;}public static bool AddDistinct<T>(this IList<T>list,T value){return list.AddDistinct(value,EqualityComparer<T>.Default);}public static bool AddDistinct<T>(this IList<T>list,T value,IEqualityComparer<T>comparer){if(list.ContainsValue(value,comparer)){return false;}list.Add(value);return true;}public static bool ContainsValue<TSource>(this IEnumerable<TSource>source,TSource value,IEqualityComparer<TSource>comparer){if(comparer==null){comparer=EqualityComparer<TSource>.Default;}if(source==null){throw new ArgumentNullException(nameof(source));}foreach(TSource local in source){if(comparer.Equals(local,value)){return true;}}return false;}public static bool AddRangeDistinct<T>(this IList<T>list,IEnumerable<T>values,IEqualityComparer<T>comparer){bool allAdded=true;foreach(T value in values){if(!list.AddDistinct(value,comparer)){allAdded=false;}}return allAdded;}public static int IndexOf<T>(this IEnumerable<T>collection,Serialization.Func<T,bool>predicate){int index=0;foreach(T value in collection){if(predicate(value)){return index;}index++;}return-1;}public static bool Contains<T>(this List<T>list,T value,IEqualityComparer comparer){for(int i=0;i<list.Count;i++){if(comparer.Equals(value,list[i])){return true;}}return false;}public static int IndexOfReference<T>(this List<T>list,T item){for(int i=0;i<list.Count;i++){if(ReferenceEquals(item,list[i])){return i;}}return-1;}
#if HAVE_FAST_REVERSE
public static void FastReverse<T>(this List<T>list){int i=0;int j=list.Count-1;while(i<j){T temp=list[i];list[i]=list[j];list[j]=temp;i++;j--;}}
#endif
private static IList<int>GetDimensions(IList values,int dimensionsCount){IList<int>dimensions=new List<int>();IList currentArray=values;while(true){dimensions.Add(currentArray.Count);if(dimensions.Count==dimensionsCount){break;}if(currentArray.Count==0){break;}object v=currentArray[0];if(v is IList list){currentArray=list;}else{break;}}return dimensions;}private static void CopyFromJaggedToMultidimensionalArray(IList values,Array multidimensionalArray,int[]indices){int dimension=indices.Length;if(dimension==multidimensionalArray.Rank){multidimensionalArray.SetValue(JaggedArrayGetValue(values,indices),indices);return;}int dimensionLength=multidimensionalArray.GetLength(dimension);IList list=(IList)JaggedArrayGetValue(values,indices);int currentValuesLength=list.Count;if(currentValuesLength!=dimensionLength){throw new Exception("Cannot deserialize non-cubical array as multidimensional array.");}int[]newIndices=new int[dimension+1];for(int i=0;i<dimension;i++){newIndices[i]=indices[i];}for(int i=0;i<multidimensionalArray.GetLength(dimension);i++){newIndices[dimension]=i;CopyFromJaggedToMultidimensionalArray(values,multidimensionalArray,newIndices);}}private static object JaggedArrayGetValue(IList values,int[]indices){IList currentList=values;for(int i=0;i<indices.Length;i++){int index=indices[i];if(i==indices.Length-1){return currentList[index];}else{currentList=(IList)currentList[index];}}return currentList;}public static Array ToMultidimensionalArray(IList values,Type type,int rank){IList<int>dimensions=GetDimensions(values,rank);while(dimensions.Count<rank){dimensions.Add(0);}Array multidimensionalArray=Array.CreateInstance(type,dimensions.ToArray());CopyFromJaggedToMultidimensionalArray(values,multidimensionalArray,ArrayEmpty<int>());return multidimensionalArray;}public static T[]ArrayEmpty<T>(){return EmptyArrayContainer<T>.Empty;}private static class EmptyArrayContainer<T>{
public static readonly T[]Empty=new T[0];
}}}
namespace Newtonsoft.Json.Utilities{internal interface IWrappedCollection:IList{object UnderlyingCollection{get;}}internal class CollectionWrapper<T>:ICollection<T>,IWrappedCollection{private readonly IList?_list;private readonly ICollection<T>?_genericCollection;private object?_syncRoot;public CollectionWrapper(IList list){ValidationUtils.ArgumentNotNull(list,nameof(list));if(list is ICollection<T>collection){_genericCollection=collection;}else{_list=list;}}public CollectionWrapper(ICollection<T>list){ValidationUtils.ArgumentNotNull(list,nameof(list));_genericCollection=list;}public virtual void Add(T item){if(_genericCollection!=null){_genericCollection.Add(item);}else{_list!.Add(item);}}public virtual void Clear(){if(_genericCollection!=null){_genericCollection.Clear();}else{_list!.Clear();}}public virtual bool Contains(T item){if(_genericCollection!=null){return _genericCollection.Contains(item);}else{return _list!.Contains(item);}}public virtual void CopyTo(T[]array,int arrayIndex){if(_genericCollection!=null){_genericCollection.CopyTo(array,arrayIndex);}else{_list!.CopyTo(array,arrayIndex);}}public virtual int Count{get{if(_genericCollection!=null){return _genericCollection.Count;}else{return _list!.Count;}}}public virtual bool IsReadOnly{get{if(_genericCollection!=null){return _genericCollection.IsReadOnly;}else{return _list!.IsReadOnly;}}}public virtual bool Remove(T item){if(_genericCollection!=null){return _genericCollection.Remove(item);}else{bool contains=_list!.Contains(item);if(contains){_list!.Remove(item);}return contains;}}public virtual IEnumerator<T>GetEnumerator(){return(_genericCollection??_list.Cast<T>()).GetEnumerator();}IEnumerator IEnumerable.GetEnumerator(){return((IEnumerable)_genericCollection!??_list!).GetEnumerator();}int IList.Add(object value){VerifyValueType(value);Add((T)value);return(Count-1);}bool IList.Contains(object value){if(IsCompatibleObject(value)){return Contains((T)value);}return false;}int IList.IndexOf(object value){if(_genericCollection!=null){throw new InvalidOperationException("Wrapped ICollection<T> does not support IndexOf.");}if(IsCompatibleObject(value)){return _list!.IndexOf((T)value);}return-1;}void IList.RemoveAt(int index){if(_genericCollection!=null){throw new InvalidOperationException("Wrapped ICollection<T> does not support RemoveAt.");}_list!.RemoveAt(index);}void IList.Insert(int index,object value){if(_genericCollection!=null){throw new InvalidOperationException("Wrapped ICollection<T> does not support Insert.");}VerifyValueType(value);_list!.Insert(index,(T)value);}bool IList.IsFixedSize{get{if(_genericCollection!=null){return _genericCollection.IsReadOnly;}else{return _list!.IsFixedSize;}}}void IList.Remove(object value){if(IsCompatibleObject(value)){Remove((T)value);}}object IList.this[int index]{get{if(_genericCollection!=null){throw new InvalidOperationException("Wrapped ICollection<T> does not support indexer.");}return _list![index];}set{if(_genericCollection!=null){throw new InvalidOperationException("Wrapped ICollection<T> does not support indexer.");}VerifyValueType(value);_list![index]=(T)value;}}void ICollection.CopyTo(Array array,int arrayIndex){CopyTo((T[])array,arrayIndex);}bool ICollection.IsSynchronized=>false;object ICollection.SyncRoot{get{if(_syncRoot==null){Interlocked.CompareExchange(ref _syncRoot,new object(),null);}return _syncRoot;}}private static void VerifyValueType(object value){if(!IsCompatibleObject(value)){throw new ArgumentException("The value '{0}' is not of type '{1}' and cannot be used in this generic collection.".FormatWith(CultureInfo.InvariantCulture,value,typeof(T)),nameof(value));}}private static bool IsCompatibleObject(object value){if(!(value is T)&&(value!=null||(typeof(T).IsValueType()&&!ReflectionUtils.IsNullableType(typeof(T))))){return false;}return true;}public object UnderlyingCollection=>(object)_genericCollection!??_list!;}}namespace Newtonsoft.Json.Linq{public enum CommentHandling{Ignore=0,Load=1}}namespace Newtonsoft.Json{public enum ConstructorHandling{Default=0,AllowNonPublicDefaultConstructor=1}}
namespace Newtonsoft.Json.Utilities{internal enum PrimitiveTypeCode{Empty=0,Object=1,Char=2,CharNullable=3,Boolean=4,BooleanNullable=5,SByte=6,SByteNullable=7,Int16=8,Int16Nullable=9,UInt16=10,UInt16Nullable=11,Int32=12,Int32Nullable=13,Byte=14,ByteNullable=15,UInt32=16,UInt32Nullable=17,Int64=18,Int64Nullable=19,UInt64=20,UInt64Nullable=21,Single=22,SingleNullable=23,Double=24,DoubleNullable=25,DateTime=26,DateTimeNullable=27,DateTimeOffset=28,DateTimeOffsetNullable=29,Decimal=30,DecimalNullable=31,Guid=32,GuidNullable=33,TimeSpan=34,TimeSpanNullable=35,BigInteger=36,BigIntegerNullable=37,Uri=38,String=39,Bytes=40,DBNull=41}internal class TypeInformation{public Type Type{get;}public PrimitiveTypeCode TypeCode{get;}public TypeInformation(Type type,PrimitiveTypeCode typeCode){Type=type;TypeCode=typeCode;}}internal enum ParseResult{None=0,Success=1,Overflow=2,Invalid=3}internal static class ConvertUtils{private static readonly Dictionary<Type,PrimitiveTypeCode>TypeCodeMap=new Dictionary<Type,PrimitiveTypeCode>{{typeof(char),PrimitiveTypeCode.Char},{typeof(char?),PrimitiveTypeCode.CharNullable},{typeof(bool),PrimitiveTypeCode.Boolean},{typeof(bool?),PrimitiveTypeCode.BooleanNullable},{typeof(sbyte),PrimitiveTypeCode.SByte},{typeof(sbyte?),PrimitiveTypeCode.SByteNullable},{typeof(short),PrimitiveTypeCode.Int16},{typeof(short?),PrimitiveTypeCode.Int16Nullable},{typeof(ushort),PrimitiveTypeCode.UInt16},{typeof(ushort?),PrimitiveTypeCode.UInt16Nullable},{typeof(int),PrimitiveTypeCode.Int32},{typeof(int?),PrimitiveTypeCode.Int32Nullable},{typeof(byte),PrimitiveTypeCode.Byte},{typeof(byte?),PrimitiveTypeCode.ByteNullable},{typeof(uint),PrimitiveTypeCode.UInt32},{typeof(uint?),PrimitiveTypeCode.UInt32Nullable},{typeof(long),PrimitiveTypeCode.Int64},{typeof(long?),PrimitiveTypeCode.Int64Nullable},{typeof(ulong),PrimitiveTypeCode.UInt64},{typeof(ulong?),PrimitiveTypeCode.UInt64Nullable},{typeof(float),PrimitiveTypeCode.Single},{typeof(float?),PrimitiveTypeCode.SingleNullable},{typeof(double),PrimitiveTypeCode.Double},{typeof(double?),PrimitiveTypeCode.DoubleNullable},{typeof(DateTime),PrimitiveTypeCode.DateTime},{typeof(DateTime?),PrimitiveTypeCode.DateTimeNullable},
#if HAVE_DATE_TIME_OFFSET
{typeof(DateTimeOffset),PrimitiveTypeCode.DateTimeOffset},{typeof(DateTimeOffset?),PrimitiveTypeCode.DateTimeOffsetNullable},
#endif
{typeof(decimal),PrimitiveTypeCode.Decimal},{typeof(decimal?),PrimitiveTypeCode.DecimalNullable},{typeof(Guid),PrimitiveTypeCode.Guid},{typeof(Guid?),PrimitiveTypeCode.GuidNullable},{typeof(TimeSpan),PrimitiveTypeCode.TimeSpan},{typeof(TimeSpan?),PrimitiveTypeCode.TimeSpanNullable},
#if HAVE_BIG_INTEGER
{typeof(BigInteger),PrimitiveTypeCode.BigInteger},{typeof(BigInteger?),PrimitiveTypeCode.BigIntegerNullable},
#endif
{typeof(Uri),PrimitiveTypeCode.Uri},{typeof(string),PrimitiveTypeCode.String},{typeof(byte[]),PrimitiveTypeCode.Bytes},
#if HAVE_ADO_NET
{typeof(DBNull),PrimitiveTypeCode.DBNull}
#endif
};
#if HAVE_ICONVERTIBLE
private static readonly TypeInformation[]PrimitiveTypeCodes={new TypeInformation(typeof(object),PrimitiveTypeCode.Empty),new TypeInformation(typeof(object),PrimitiveTypeCode.Object),new TypeInformation(typeof(object),PrimitiveTypeCode.DBNull),new TypeInformation(typeof(bool),PrimitiveTypeCode.Boolean),new TypeInformation(typeof(char),PrimitiveTypeCode.Char),new TypeInformation(typeof(sbyte),PrimitiveTypeCode.SByte),new TypeInformation(typeof(byte),PrimitiveTypeCode.Byte),new TypeInformation(typeof(short),PrimitiveTypeCode.Int16),new TypeInformation(typeof(ushort),PrimitiveTypeCode.UInt16),new TypeInformation(typeof(int),PrimitiveTypeCode.Int32),new TypeInformation(typeof(uint),PrimitiveTypeCode.UInt32),new TypeInformation(typeof(long),PrimitiveTypeCode.Int64),new TypeInformation(typeof(ulong),PrimitiveTypeCode.UInt64),new TypeInformation(typeof(float),PrimitiveTypeCode.Single),new TypeInformation(typeof(double),PrimitiveTypeCode.Double),new TypeInformation(typeof(decimal),PrimitiveTypeCode.Decimal),new TypeInformation(typeof(DateTime),PrimitiveTypeCode.DateTime),new TypeInformation(typeof(object),PrimitiveTypeCode.Empty),new TypeInformation(typeof(string),PrimitiveTypeCode.String)};
#endif
public static PrimitiveTypeCode GetTypeCode(Type t){return GetTypeCode(t,out _);}public static PrimitiveTypeCode GetTypeCode(Type t,out bool isEnum){if(TypeCodeMap.TryGetValue(t,out PrimitiveTypeCode typeCode)){isEnum=false;return typeCode;}if(t.IsEnum()){isEnum=true;return GetTypeCode(Enum.GetUnderlyingType(t));}if(ReflectionUtils.IsNullableType(t)){Type nonNullable=Nullable.GetUnderlyingType(t);if(nonNullable.IsEnum()){Type nullableUnderlyingType=typeof(Nullable<>).MakeGenericType(Enum.GetUnderlyingType(nonNullable));isEnum=true;return GetTypeCode(nullableUnderlyingType);}}isEnum=false;return PrimitiveTypeCode.Object;}
#if HAVE_ICONVERTIBLE
public static TypeInformation GetTypeInformation(IConvertible convertable){TypeInformation typeInformation=PrimitiveTypeCodes[(int)convertable.GetTypeCode()];return typeInformation;}
#endif
public static bool IsConvertible(Type t){
#if HAVE_ICONVERTIBLE
return typeof(IConvertible).IsAssignableFrom(t);
#else
return(t==typeof(bool)||t==typeof(byte)||t==typeof(char)||t==typeof(DateTime)||t==typeof(decimal)||t==typeof(double)||t==typeof(short)||t==typeof(int)||t==typeof(long)||t==typeof(sbyte)||t==typeof(float)||t==typeof(string)||t==typeof(ushort)||t==typeof(uint)||t==typeof(ulong)||t.IsEnum());
#endif
}public static TimeSpan ParseTimeSpan(string input){
#if HAVE_TIME_SPAN_PARSE_WITH_CULTURE
return TimeSpan.Parse(input,CultureInfo.InvariantCulture);
#else
return TimeSpan.Parse(input);
#endif
}private static readonly ThreadSafeStore<StructMultiKey<Type,Type>,Serialization.Func<object?,object?>?>CastConverters=new ThreadSafeStore<StructMultiKey<Type,Type>,Serialization.Func<object?,object?>?>(CreateCastConverter);private static Serialization.Func<object?,object?>?CreateCastConverter(StructMultiKey<Type,Type>t){Type initialType=t.Value1;Type targetType=t.Value2;MethodInfo castMethodInfo=targetType.GetMethod("op_Implicit",new[]{initialType})??targetType.GetMethod("op_Explicit",new[]{initialType});if(castMethodInfo==null){return null;}MethodCall<object?,object?>call=JsonTypeReflector.ReflectionDelegateFactory.CreateMethodCall<object?>(castMethodInfo);return o=>call(null,o);}
#if HAVE_BIG_INTEGER
internal static BigInteger ToBigInteger(object value){if(value is BigInteger integer){return integer;}if(value is string s){return BigInteger.Parse(s,CultureInfo.InvariantCulture);}if(value is float f){return new BigInteger(f);}if(value is double d){return new BigInteger(d);}if(value is decimal@decimal){return new BigInteger(@decimal);}if(value is int i){return new BigInteger(i);}if(value is long l){return new BigInteger(l);}if(value is uint u){return new BigInteger(u);}if(value is ulong@ulong){return new BigInteger(@ulong);}if(value is byte[]bytes){return new BigInteger(bytes);}throw new InvalidCastException("Cannot convert {0} to BigInteger.".FormatWith(CultureInfo.InvariantCulture,value.GetType()));}public static object FromBigInteger(BigInteger i,Type targetType){if(targetType==typeof(decimal)){return(decimal)i;}if(targetType==typeof(double)){return(double)i;}if(targetType==typeof(float)){return(float)i;}if(targetType==typeof(ulong)){return(ulong)i;}if(targetType==typeof(bool)){return i!=0;}try{return System.Convert.ChangeType((long)i,targetType,CultureInfo.InvariantCulture);}catch(Exception ex){throw new InvalidOperationException("Can not convert from BigInteger to {0}.".FormatWith(CultureInfo.InvariantCulture,targetType),ex);}}
#endif
internal enum ConvertResult{Success=0,CannotConvertNull=1,NotInstantiableType=2,NoValidConversion=3}public static object Convert(object initialValue,CultureInfo culture,Type targetType){switch(TryConvertInternal(initialValue,culture,targetType,out object?value)){case ConvertResult.Success:return value!;case ConvertResult.CannotConvertNull:throw new Exception("Can not convert null {0} into non-nullable {1}.".FormatWith(CultureInfo.InvariantCulture,initialValue.GetType(),targetType));case ConvertResult.NotInstantiableType:throw new ArgumentException("Target type {0} is not a value type or a non-abstract class.".FormatWith(CultureInfo.InvariantCulture,targetType),nameof(targetType));case ConvertResult.NoValidConversion:throw new InvalidOperationException("Can not convert from {0} to {1}.".FormatWith(CultureInfo.InvariantCulture,initialValue.GetType(),targetType));default:throw new InvalidOperationException("Unexpected conversion result.");}}private static bool TryConvert(object?initialValue,CultureInfo culture,Type targetType,out object?value){try{if(TryConvertInternal(initialValue,culture,targetType,out value)==ConvertResult.Success){return true;}value=null;return false;}catch{value=null;return false;}}private static ConvertResult TryConvertInternal(object?initialValue,CultureInfo culture,Type targetType,out object?value){if(initialValue==null){throw new ArgumentNullException(nameof(initialValue));}if(ReflectionUtils.IsNullableType(targetType)){targetType=Nullable.GetUnderlyingType(targetType);}Type initialType=initialValue.GetType();if(targetType==initialType){value=initialValue;return ConvertResult.Success;}if(IsConvertible(initialValue.GetType())&&IsConvertible(targetType)){if(targetType.IsEnum()){if(initialValue is string){value=Enum.Parse(targetType,initialValue.ToString(),true);return ConvertResult.Success;}else if(IsInteger(initialValue)){value=Enum.ToObject(targetType,initialValue);return ConvertResult.Success;}}value=System.Convert.ChangeType(initialValue,targetType,culture);return ConvertResult.Success;}
#if HAVE_DATE_TIME_OFFSET
if(initialValue is DateTime dt&&targetType==typeof(DateTimeOffset)){value=new DateTimeOffset(dt);return ConvertResult.Success;}
#endif
if(initialValue is byte[]bytes&&targetType==typeof(Guid)){value=new Guid(bytes);return ConvertResult.Success;}if(initialValue is Guid guid&&targetType==typeof(byte[])){value=guid.ToByteArray();return ConvertResult.Success;}if(initialValue is string s){if(targetType==typeof(Guid)){value=new Guid(s);return ConvertResult.Success;}if(targetType==typeof(Uri)){value=new Uri(s,UriKind.RelativeOrAbsolute);return ConvertResult.Success;}if(targetType==typeof(TimeSpan)){value=ParseTimeSpan(s);return ConvertResult.Success;}if(targetType==typeof(byte[])){value=System.Convert.FromBase64String(s);return ConvertResult.Success;}if(targetType==typeof(Version)){if(VersionTryParse(s,out Version?result)){value=result;return ConvertResult.Success;}value=null;return ConvertResult.NoValidConversion;}if(typeof(Type).IsAssignableFrom(targetType)){value=Type.GetType(s,true);return ConvertResult.Success;}}
#if HAVE_BIG_INTEGER
if(targetType==typeof(BigInteger)){value=ToBigInteger(initialValue);return ConvertResult.Success;}if(initialValue is BigInteger integer){value=FromBigInteger(integer,targetType);return ConvertResult.Success;}
#endif
#if HAVE_TYPE_DESCRIPTOR
TypeConverter toConverter=TypeDescriptor.GetConverter(initialType);if(toConverter!=null&&toConverter.CanConvertTo(targetType)){value=toConverter.ConvertTo(null,culture,initialValue,targetType);return ConvertResult.Success;}TypeConverter fromConverter=TypeDescriptor.GetConverter(targetType);if(fromConverter!=null&&fromConverter.CanConvertFrom(initialType)){value=fromConverter.ConvertFrom(null,culture,initialValue);return ConvertResult.Success;}
#endif
#if HAVE_ADO_NET
if(initialValue==DBNull.Value){if(ReflectionUtils.IsNullable(targetType)){value=EnsureTypeAssignable(null,initialType,targetType);return ConvertResult.Success;}value=null;return ConvertResult.CannotConvertNull;}
#endif
if(targetType.IsInterface()||targetType.IsGenericTypeDefinition()||targetType.IsAbstract()){value=null;return ConvertResult.NotInstantiableType;}value=null;return ConvertResult.NoValidConversion;}public static object?ConvertOrCast(object?initialValue,CultureInfo culture,Type targetType){if(targetType==typeof(object)){return initialValue;}if(initialValue==null&&ReflectionUtils.IsNullable(targetType)){return null;}if(TryConvert(initialValue,culture,targetType,out object?convertedValue)){return convertedValue;}return EnsureTypeAssignable(initialValue,ReflectionUtils.GetObjectType(initialValue)!,targetType);}private static object?EnsureTypeAssignable(object?value,Type initialType,Type targetType){if(value!=null){Type valueType=value.GetType();if(targetType.IsAssignableFrom(valueType)){return value;}Serialization.Func<object?,object?>?castConverter=CastConverters.Get(new StructMultiKey<Type,Type>(valueType,targetType));if(castConverter!=null){return castConverter(value);}}else{if(ReflectionUtils.IsNullable(targetType)){return null;}}throw new ArgumentException("Could not cast or convert from {0} to {1}.".FormatWith(CultureInfo.InvariantCulture,initialType?.ToString()??"{null}",targetType));}public static bool VersionTryParse(string input,[NotNullWhen(true)]out Version?result){
#if HAVE_VERSION_TRY_PARSE
return Version.TryParse(input,out result);
#else
try{result=new Version(input);return true;}catch{result=null;return false;}
#endif
}public static bool IsInteger(object value){switch(GetTypeCode(value.GetType())){case PrimitiveTypeCode.SByte:case PrimitiveTypeCode.Byte:case PrimitiveTypeCode.Int16:case PrimitiveTypeCode.UInt16:case PrimitiveTypeCode.Int32:case PrimitiveTypeCode.UInt32:case PrimitiveTypeCode.Int64:case PrimitiveTypeCode.UInt64:return true;default:return false;}}public static ParseResult Int32TryParse(char[]chars,int start,int length,out int value){value=0;if(length==0){return ParseResult.Invalid;}bool isNegative=(chars[start]=='-');if(isNegative){if(length==1){return ParseResult.Invalid;}start++;length--;}int end=start+length;if(length>10||(length==10&&chars[start]-'0'>2)){for(int i=start;i<end;i++){int c=chars[i]-'0';if(c<0||c>9){return ParseResult.Invalid;}}return ParseResult.Overflow;}for(int i=start;i<end;i++){int c=chars[i]-'0';if(c<0||c>9){return ParseResult.Invalid;}int newValue=(10*value)-c;if(newValue>value){i++;for(;i<end;i++){c=chars[i]-'0';if(c<0||c>9){return ParseResult.Invalid;}}return ParseResult.Overflow;}value=newValue;}if(!isNegative){if(value==int.MinValue){return ParseResult.Overflow;}value=-value;}return ParseResult.Success;}public static ParseResult Int64TryParse(char[]chars,int start,int length,out long value){value=0;if(length==0){return ParseResult.Invalid;}bool isNegative=(chars[start]=='-');if(isNegative){if(length==1){return ParseResult.Invalid;}start++;length--;}int end=start+length;if(length>19){for(int i=start;i<end;i++){int c=chars[i]-'0';if(c<0||c>9){return ParseResult.Invalid;}}return ParseResult.Overflow;}for(int i=start;i<end;i++){int c=chars[i]-'0';if(c<0||c>9){return ParseResult.Invalid;}long newValue=(10*value)-c;if(newValue>value){i++;for(;i<end;i++){c=chars[i]-'0';if(c<0||c>9){return ParseResult.Invalid;}}return ParseResult.Overflow;}value=newValue;}if(!isNegative){if(value==long.MinValue){return ParseResult.Overflow;}value=-value;}return ParseResult.Success;}
#if HAS_CUSTOM_DOUBLE_PARSE
private static class IEEE754{private static readonly int[]MultExp64Power10=new int[]{4,7,10,14,17,20,24,27,30,34,37,40,44,47,50};private static readonly ulong[]MultVal64Power10=new ulong[]{0xa000000000000000,0xc800000000000000,0xfa00000000000000,0x9c40000000000000,0xc350000000000000,0xf424000000000000,0x9896800000000000,0xbebc200000000000,0xee6b280000000000,0x9502f90000000000,0xba43b74000000000,0xe8d4a51000000000,0x9184e72a00000000,0xb5e620f480000000,0xe35fa931a0000000,};private static readonly ulong[]MultVal64Power10Inv=new ulong[]{0xcccccccccccccccd,0xa3d70a3d70a3d70b,0x83126e978d4fdf3c,0xd1b71758e219652e,0xa7c5ac471b478425,0x8637bd05af6c69b7,0xd6bf94d5e57a42be,0xabcc77118461ceff,0x89705f4136b4a599,0xdbe6fecebdedd5c2,0xafebff0bcb24ab02,0x8cbccc096f5088cf,0xe12e13424bb40e18,0xb424dc35095cd813,0x901d7cf73ab0acdc,};private static readonly int[]MultExp64Power10By16=new int[]{54,107,160,213,266,319,373,426,479,532,585,638,691,745,798,851,904,957,1010,1064,1117,};private static readonly ulong[]MultVal64Power10By16=new ulong[]{0x8e1bc9bf04000000,0x9dc5ada82b70b59e,0xaf298d050e4395d6,0xc2781f49ffcfa6d4,0xd7e77a8f87daf7fa,0xefb3ab16c59b14a0,0x850fadc09923329c,0x93ba47c980e98cde,0xa402b9c5a8d3a6e6,0xb616a12b7fe617a8,0xca28a291859bbf90,0xe070f78d39275566,0xf92e0c3537826140,0x8a5296ffe33cc92c,0x9991a6f3d6bf1762,0xaa7eebfb9df9de8a,0xbd49d14aa79dbc7e,0xd226fc195c6a2f88,0xe950df20247c83f8,0x81842f29f2cce373,0x8fcac257558ee4e2,};private static readonly ulong[]MultVal64Power10By16Inv=new ulong[]{0xe69594bec44de160,0xcfb11ead453994c3,0xbb127c53b17ec165,0xa87fea27a539e9b3,0x97c560ba6b0919b5,0x88b402f7fd7553ab,0xf64335bcf065d3a0,0xddd0467c64bce4c4,0xc7caba6e7c5382ed,0xb3f4e093db73a0b7,0xa21727db38cb0053,0x91ff83775423cc29,0x8380dea93da4bc82,0xece53cec4a314f00,0xd5605fcdcf32e217,0xc0314325637a1978,0xad1c8eab5ee43ba2,0x9becce62836ac5b0,0x8c71dcd9ba0b495c,0xfd00b89747823938,0xe3e27a444d8d991a,};public static double PackDouble(bool negative,ulong val,int scale){if(val==0){return negative?-0.0:0.0;}int exp=64;if((val&0xFFFFFFFF00000000)==0){val<<=32;exp-=32;}if((val&0xFFFF000000000000)==0){val<<=16;exp-=16;}if((val&0xFF00000000000000)==0){val<<=8;exp-=8;}if((val&0xF000000000000000)==0){val<<=4;exp-=4;}if((val&0xC000000000000000)==0){val<<=2;exp-=2;}if((val&0x8000000000000000)==0){val<<=1;exp-=1;}if(scale<0){scale=-scale;if(scale>=22*16){return negative?-0.0:0.0;}int index=scale&15;if(index!=0){exp-=MultExp64Power10[index-1]-1;val=Mul64Lossy(val,MultVal64Power10Inv[index-1],ref exp);}index=scale>>4;if(index!=0){exp-=MultExp64Power10By16[index-1]-1;val=Mul64Lossy(val,MultVal64Power10By16Inv[index-1],ref exp);}}else{if(scale>=22*16){return negative?double.NegativeInfinity:double.PositiveInfinity;}int index=scale&15;if(index!=0){exp+=MultExp64Power10[index-1];val=Mul64Lossy(val,MultVal64Power10[index-1],ref exp);}index=scale>>4;if(index!=0){exp+=MultExp64Power10By16[index-1];val=Mul64Lossy(val,MultVal64Power10By16[index-1],ref exp);}}if((val&(1<<10))!=0){ulong tmp=val+((1UL<<10)-1+((val>>11)&1));if(tmp<val){tmp=(tmp>>1)|0x8000000000000000;exp++;}val=tmp;}exp+=0x3FE;if(exp<=0){if(exp==-52&&(val>=0x8000000000000058)){val=0x0000000000000001;}else if(exp<=-52){val=0;}else{val>>=(-exp+12);}}else if(exp>=0x7FF){val=0x7FF0000000000000;}else{val=((ulong)exp<<52)|((val>>11)&0x000FFFFFFFFFFFFF);}if(negative){val|=0x8000000000000000;}return BitConverter.Int64BitsToDouble((long)val);}private static ulong Mul64Lossy(ulong a,ulong b,ref int exp){ulong a_hi=(a>>32);uint a_lo=(uint)a;ulong b_hi=(b>>32);uint b_lo=(uint)b;ulong result=a_hi*b_hi;if((b_lo&0xFFFF0000)!=0){result+=(a_hi*b_lo)>>32;}if((a_lo&0xFFFF0000)!=0){result+=(a_lo*b_hi)>>32;}if((result&0x8000000000000000)==0){result<<=1;exp--;}return result;}}public static ParseResult DoubleTryParse(char[]chars,int start,int length,out double value){value=0;if(length==0){return ParseResult.Invalid;}bool isNegative=(chars[start]=='-');if(isNegative){if(length==1){return ParseResult.Invalid;}start++;length--;}int i=start;int end=start+length;int numDecimalStart=end;int numDecimalEnd=end;int exponent=0;ulong mantissa=0UL;int mantissaDigits=0;int exponentFromMantissa=0;for(;i<end;i++){char c=chars[i];switch(c){case'.':if(i==start){return ParseResult.Invalid;}if(i+1==end){return ParseResult.Invalid;}if(numDecimalStart!=end){return ParseResult.Invalid;}numDecimalStart=i+1;break;case'e':case'E':if(i==start){return ParseResult.Invalid;}if(i==numDecimalStart){return ParseResult.Invalid;}i++;if(i==end){return ParseResult.Invalid;}if(numDecimalStart<end){numDecimalEnd=i-1;}c=chars[i];bool exponentNegative=false;switch(c){case'-':exponentNegative=true;i++;break;case'+':i++;break;}for(;i<end;i++){c=chars[i];if(c<'0'||c>'9'){return ParseResult.Invalid;}int newExponent=(10*exponent)+(c-'0');if(exponent<newExponent){exponent=newExponent;}}if(exponentNegative){exponent=-exponent;}break;default:if(c<'0'||c>'9'){return ParseResult.Invalid;}if(i==start&&c=='0'){i++;if(i!=end){c=chars[i];if(c=='.'){goto case'.';}if(c=='e'||c=='E'){goto case'E';}return ParseResult.Invalid;}}if(mantissaDigits<19){mantissa=(10*mantissa)+(ulong)(c-'0');if(mantissa>0){++mantissaDigits;}}else{++exponentFromMantissa;}break;}}exponent+=exponentFromMantissa;exponent-=(numDecimalEnd-numDecimalStart);value=IEEE754.PackDouble(isNegative,mantissa,exponent);return double.IsInfinity(value)?ParseResult.Overflow:ParseResult.Success;}
#endif
public static ParseResult DecimalTryParse(char[]chars,int start,int length,out decimal value){value=0M;const decimal decimalMaxValueHi28=7922816251426433759354395033M;const ulong decimalMaxValueHi19=7922816251426433759UL;const ulong decimalMaxValueLo9=354395033UL;const char decimalMaxValueLo1='5';if(length==0){return ParseResult.Invalid;}bool isNegative=(chars[start]=='-');if(isNegative){if(length==1){return ParseResult.Invalid;}start++;length--;}int i=start;int end=start+length;int numDecimalStart=end;int numDecimalEnd=end;int exponent=0;ulong hi19=0UL;ulong lo10=0UL;int mantissaDigits=0;int exponentFromMantissa=0;char?digit29=null;bool?storeOnly28Digits=null;for(;i<end;i++){char c=chars[i];switch(c){case'.':if(i==start){return ParseResult.Invalid;}if(i+1==end){return ParseResult.Invalid;}if(numDecimalStart!=end){return ParseResult.Invalid;}numDecimalStart=i+1;break;case'e':case'E':if(i==start){return ParseResult.Invalid;}if(i==numDecimalStart){return ParseResult.Invalid;}i++;if(i==end){return ParseResult.Invalid;}if(numDecimalStart<end){numDecimalEnd=i-1;}c=chars[i];bool exponentNegative=false;switch(c){case'-':exponentNegative=true;i++;break;case'+':i++;break;}for(;i<end;i++){c=chars[i];if(c<'0'||c>'9'){return ParseResult.Invalid;}int newExponent=(10*exponent)+(c-'0');if(exponent<newExponent){exponent=newExponent;}}if(exponentNegative){exponent=-exponent;}break;default:if(c<'0'||c>'9'){return ParseResult.Invalid;}if(i==start&&c=='0'){i++;if(i!=end){c=chars[i];if(c=='.'){goto case'.';}if(c=='e'||c=='E'){goto case'E';}return ParseResult.Invalid;}}if(mantissaDigits<29&&(mantissaDigits!=28||!(storeOnly28Digits??(storeOnly28Digits=(hi19>decimalMaxValueHi19||(hi19==decimalMaxValueHi19&&(lo10>decimalMaxValueLo9||(lo10==decimalMaxValueLo9&&c>decimalMaxValueLo1))))).GetValueOrDefault()))){if(mantissaDigits<19){hi19=(hi19*10UL)+(ulong)(c-'0');}else{lo10=(lo10*10UL)+(ulong)(c-'0');}++mantissaDigits;}else{if(!digit29.HasValue){digit29=c;}++exponentFromMantissa;}break;}}exponent+=exponentFromMantissa;exponent-=(numDecimalEnd-numDecimalStart);if(mantissaDigits<=19){value=hi19;}else{value=(hi19/new decimal(1,0,0,false,(byte)(mantissaDigits-19)))+lo10;}if(exponent>0){mantissaDigits+=exponent;if(mantissaDigits>29){return ParseResult.Overflow;}if(mantissaDigits==29){if(exponent>1){value/=new decimal(1,0,0,false,(byte)(exponent-1));if(value>decimalMaxValueHi28){return ParseResult.Overflow;}}else if(value==decimalMaxValueHi28&&digit29>decimalMaxValueLo1){return ParseResult.Overflow;}value*=10M;}else{value/=new decimal(1,0,0,false,(byte)exponent);}}else{if(digit29>='5'&&exponent>=-28){++value;}if(exponent<0){if(mantissaDigits+exponent+28<=0){value=isNegative?-0M:0M;return ParseResult.Success;}if(exponent>=-28){value*=new decimal(1,0,0,false,(byte)(-exponent));}else{value/=1e28M;value*=new decimal(1,0,0,false,(byte)(-exponent-28));}}}if(isNegative){value=-value;}return ParseResult.Success;}public static bool TryConvertGuid(string s,out Guid g){
#if !HAVE_GUID_TRY_PARSE
if(s==null){throw new ArgumentNullException("s");}Regex format=new Regex("^[A-Fa-f0-9]{8}-([A-Fa-f0-9]{4}-){3}[A-Fa-f0-9]{12}$");Match match=format.Match(s);if(match.Success){g=new Guid(s);return true;}g=Guid.Empty;return false;
#else
return Guid.TryParseExact(s,"D",out g);
#endif
}public static bool TryHexTextToInt(char[]text,int start,int end,out int value){value=0;for(int i=start;i<end;i++){char ch=text[i];int chValue;if(ch<=57&&ch>=48){chValue=ch-48;}else if(ch<=70&&ch>=65){chValue=ch-55;}else if(ch<=102&&ch>=97){chValue=ch-87;}else{value=0;return false;}value+=chValue<<((end-1-i)*4);}return true;}}}namespace Newtonsoft.Json.Converters{public abstract class CustomCreationConverter<T>:JsonConverter{public override void WriteJson(JsonWriter writer,object?value,JsonSerializer serializer){throw new NotSupportedException("CustomCreationConverter should only be used while deserializing.");}public override object?ReadJson(JsonReader reader,Type objectType,object?existingValue,JsonSerializer serializer){if(reader.TokenType==JsonToken.Null){return null;}T value=Create(objectType);if(value==null){throw new JsonSerializationException("No object created.");}serializer.Populate(reader,value);return value;}public abstract T Create(Type objectType);public override bool CanConvert(Type objectType){return typeof(T).IsAssignableFrom(objectType);}public override bool CanWrite=>false;}}
#if HAVE_ADO_NET
namespace Newtonsoft.Json.Converters{public class DataSetConverter:JsonConverter{public override void WriteJson(JsonWriter writer,object?value,JsonSerializer serializer){if(value==null){writer.WriteNull();return;}DataSet dataSet=(DataSet)value;DefaultContractResolver?resolver=serializer.ContractResolver as DefaultContractResolver;DataTableConverter converter=new DataTableConverter();writer.WriteStartObject();foreach(DataTable table in dataSet.Tables){writer.WritePropertyName((resolver!=null)?resolver.GetResolvedPropertyName(table.TableName):table.TableName);converter.WriteJson(writer,table,serializer);}writer.WriteEndObject();}public override object?ReadJson(JsonReader reader,Type objectType,object?existingValue,JsonSerializer serializer){if(reader.TokenType==JsonToken.Null){return null;}DataSet ds=(objectType==typeof(DataSet))?new DataSet():(DataSet)Activator.CreateInstance(objectType);DataTableConverter converter=new DataTableConverter();reader.ReadAndAssert();while(reader.TokenType==JsonToken.PropertyName){DataTable dt=ds.Tables[(string)reader.Value!];bool exists=(dt!=null);dt=(DataTable)converter.ReadJson(reader,typeof(DataTable),dt,serializer)!;if(!exists){ds.Tables.Add(dt);}reader.ReadAndAssert();}return ds;}public override bool CanConvert(Type valueType){return typeof(DataSet).IsAssignableFrom(valueType);}}}
#endif
#if HAVE_ADO_NET
namespace Newtonsoft.Json.Converters{public class DataTableConverter:JsonConverter{public override void WriteJson(JsonWriter writer,object?value,JsonSerializer serializer){if(value==null){writer.WriteNull();return;}DataTable table=(DataTable)value;DefaultContractResolver?resolver=serializer.ContractResolver as DefaultContractResolver;writer.WriteStartArray();foreach(DataRow row in table.Rows){writer.WriteStartObject();foreach(DataColumn column in row.Table.Columns){object columnValue=row[column];if(serializer.NullValueHandling==NullValueHandling.Ignore&&(columnValue==null||columnValue==DBNull.Value)){continue;}writer.WritePropertyName((resolver!=null)?resolver.GetResolvedPropertyName(column.ColumnName):column.ColumnName);serializer.Serialize(writer,columnValue);}writer.WriteEndObject();}writer.WriteEndArray();}public override object?ReadJson(JsonReader reader,Type objectType,object?existingValue,JsonSerializer serializer){if(reader.TokenType==JsonToken.Null){return null;}if(!(existingValue is DataTable dt)){dt=(objectType==typeof(DataTable))?new DataTable():(DataTable)Activator.CreateInstance(objectType);}if(reader.TokenType==JsonToken.PropertyName){dt.TableName=(string)reader.Value!;reader.ReadAndAssert();if(reader.TokenType==JsonToken.Null){return dt;}}if(reader.TokenType!=JsonToken.StartArray){throw JsonSerializationException.Create(reader,"Unexpected JSON token when reading DataTable. Expected StartArray, got {0}.".FormatWith(CultureInfo.InvariantCulture,reader.TokenType));}reader.ReadAndAssert();while(reader.TokenType!=JsonToken.EndArray){CreateRow(reader,dt,serializer);reader.ReadAndAssert();}return dt;}private static void CreateRow(JsonReader reader,DataTable dt,JsonSerializer serializer){DataRow dr=dt.NewRow();reader.ReadAndAssert();while(reader.TokenType==JsonToken.PropertyName){string columnName=(string)reader.Value!;reader.ReadAndAssert();DataColumn column=dt.Columns[columnName];if(column==null){Type columnType=GetColumnDataType(reader);column=new DataColumn(columnName,columnType);dt.Columns.Add(column);}if(column.DataType==typeof(DataTable)){if(reader.TokenType==JsonToken.StartArray){reader.ReadAndAssert();}DataTable nestedDt=new DataTable();while(reader.TokenType!=JsonToken.EndArray){CreateRow(reader,nestedDt,serializer);reader.ReadAndAssert();}dr[columnName]=nestedDt;}else if(column.DataType.IsArray&&column.DataType!=typeof(byte[])){if(reader.TokenType==JsonToken.StartArray){reader.ReadAndAssert();}List<object?>o=new List<object?>();while(reader.TokenType!=JsonToken.EndArray){o.Add(reader.Value);reader.ReadAndAssert();}Array destinationArray=Array.CreateInstance(column.DataType.GetElementType(),o.Count);((IList)o).CopyTo(destinationArray,0);dr[columnName]=destinationArray;}else{object columnValue=(reader.Value!=null)?serializer.Deserialize(reader,column.DataType)??DBNull.Value:DBNull.Value;dr[columnName]=columnValue;}reader.ReadAndAssert();}dr.EndEdit();dt.Rows.Add(dr);}private static Type GetColumnDataType(JsonReader reader){JsonToken tokenType=reader.TokenType;switch(tokenType){case JsonToken.Integer:case JsonToken.Boolean:case JsonToken.Float:case JsonToken.String:case JsonToken.Date:case JsonToken.Bytes:return reader.ValueType!;case JsonToken.Null:case JsonToken.Undefined:case JsonToken.EndArray:return typeof(string);case JsonToken.StartArray:reader.ReadAndAssert();if(reader.TokenType==JsonToken.StartObject){return typeof(DataTable);}Type arrayType=GetColumnDataType(reader);return arrayType.MakeArrayType();default:throw JsonSerializationException.Create(reader,"Unexpected JSON token when reading DataTable: {0}".FormatWith(CultureInfo.InvariantCulture,tokenType));}}public override bool CanConvert(Type valueType){return typeof(DataTable).IsAssignableFrom(valueType);}}}
#endif
namespace Newtonsoft.Json{public enum DateFormatHandling{IsoDateFormat,MicrosoftDateFormat}}namespace Newtonsoft.Json{public enum DateParseHandling{None=0,DateTime=1,
#if HAVE_DATE_TIME_OFFSET
DateTimeOffset=2
#endif
}}namespace Newtonsoft.Json.Converters{public abstract class DateTimeConverterBase:JsonConverter{public override bool CanConvert(Type objectType){if(objectType==typeof(DateTime)||objectType==typeof(DateTime?)){return true;}
#if HAVE_DATE_TIME_OFFSET
if(objectType==typeof(DateTimeOffset)||objectType==typeof(DateTimeOffset?)){return true;}
#endif
return false;}}}namespace Newtonsoft.Json.Utilities{internal enum ParserTimeZone{Unspecified=0,Utc=1,LocalWestOfUtc=2,LocalEastOfUtc=3}internal struct DateTimeParser{static DateTimeParser(){Power10=new[]{-1,10,100,1000,10000,100000,1000000};Lzyyyy="yyyy".Length;Lzyyyy_="yyyy-".Length;Lzyyyy_MM="yyyy-MM".Length;Lzyyyy_MM_="yyyy-MM-".Length;Lzyyyy_MM_dd="yyyy-MM-dd".Length;Lzyyyy_MM_ddT="yyyy-MM-ddT".Length;LzHH="HH".Length;LzHH_="HH:".Length;LzHH_mm="HH:mm".Length;LzHH_mm_="HH:mm:".Length;LzHH_mm_ss="HH:mm:ss".Length;Lz_="-".Length;Lz_zz="-zz".Length;}public int Year;public int Month;public int Day;public int Hour;public int Minute;public int Second;public int Fraction;public int ZoneHour;public int ZoneMinute;public ParserTimeZone Zone;private char[]_text;private int _end;private static readonly int[]Power10;private static readonly int Lzyyyy;private static readonly int Lzyyyy_;private static readonly int Lzyyyy_MM;private static readonly int Lzyyyy_MM_;private static readonly int Lzyyyy_MM_dd;private static readonly int Lzyyyy_MM_ddT;private static readonly int LzHH;private static readonly int LzHH_;private static readonly int LzHH_mm;private static readonly int LzHH_mm_;private static readonly int LzHH_mm_ss;private static readonly int Lz_;private static readonly int Lz_zz;private const short MaxFractionDigits=7;public bool Parse(char[]text,int startIndex,int length){_text=text;_end=startIndex+length;if(ParseDate(startIndex)&&ParseChar(Lzyyyy_MM_dd+startIndex,'T')&&ParseTimeAndZoneAndWhitespace(Lzyyyy_MM_ddT+startIndex)){return true;}return false;}private bool ParseDate(int start){return(Parse4Digit(start,out Year)&&1<=Year&&ParseChar(start+Lzyyyy,'-')&&Parse2Digit(start+Lzyyyy_,out Month)&&1<=Month&&Month<=12&&ParseChar(start+Lzyyyy_MM,'-')&&Parse2Digit(start+Lzyyyy_MM_,out Day)&&1<=Day&&Day<=DateTime.DaysInMonth(Year,Month));}private bool ParseTimeAndZoneAndWhitespace(int start){return(ParseTime(ref start)&&ParseZone(start));}private bool ParseTime(ref int start){if(!(Parse2Digit(start,out Hour)&&Hour<=24&&ParseChar(start+LzHH,':')&&Parse2Digit(start+LzHH_,out Minute)&&Minute<60&&ParseChar(start+LzHH_mm,':')&&Parse2Digit(start+LzHH_mm_,out Second)&&Second<60&&(Hour!=24||(Minute==0&&Second==0)))){return false;}start+=LzHH_mm_ss;if(ParseChar(start,'.')){Fraction=0;int numberOfDigits=0;while(++start<_end&&numberOfDigits<MaxFractionDigits){int digit=_text[start]-'0';if(digit<0||digit>9){break;}Fraction=(Fraction*10)+digit;numberOfDigits++;}if(numberOfDigits<MaxFractionDigits){if(numberOfDigits==0){return false;}Fraction*=Power10[MaxFractionDigits-numberOfDigits];}if(Hour==24&&Fraction!=0){return false;}}return true;}private bool ParseZone(int start){if(start<_end){char ch=_text[start];if(ch=='Z'||ch=='z'){Zone=ParserTimeZone.Utc;start++;}else{if(start+2<_end&&Parse2Digit(start+Lz_,out ZoneHour)&&ZoneHour<=99){switch(ch){case'-':Zone=ParserTimeZone.LocalWestOfUtc;start+=Lz_zz;break;case'+':Zone=ParserTimeZone.LocalEastOfUtc;start+=Lz_zz;break;}}if(start<_end){if(ParseChar(start,':')){start+=1;if(start+1<_end&&Parse2Digit(start,out ZoneMinute)&&ZoneMinute<=99){start+=2;}}else{if(start+1<_end&&Parse2Digit(start,out ZoneMinute)&&ZoneMinute<=99){start+=2;}}}}}return(start==_end);}private bool Parse4Digit(int start,out int num){if(start+3<_end){int digit1=_text[start]-'0';int digit2=_text[start+1]-'0';int digit3=_text[start+2]-'0';int digit4=_text[start+3]-'0';if(0<=digit1&&digit1<10&&0<=digit2&&digit2<10&&0<=digit3&&digit3<10&&0<=digit4&&digit4<10){num=(((((digit1*10)+digit2)*10)+digit3)*10)+digit4;return true;}}num=0;return false;}private bool Parse2Digit(int start,out int num){if(start+1<_end){int digit1=_text[start]-'0';int digit2=_text[start+1]-'0';if(0<=digit1&&digit1<10&&0<=digit2&&digit2<10){num=(digit1*10)+digit2;return true;}}num=0;return false;}private bool ParseChar(int start,char ch){return(start<_end&&_text[start]==ch);}}}namespace Newtonsoft.Json.Utilities{internal static class DateTimeUtils{internal static readonly long InitialJavaScriptDateTicks=621355968000000000;private const string IsoDateFormat="yyyy-MM-ddTHH:mm:ss.FFFFFFFK";private const int DaysPer100Years=36524;private const int DaysPer400Years=146097;private const int DaysPer4Years=1461;private const int DaysPerYear=365;private const long TicksPerDay=864000000000L;private static readonly int[]DaysToMonth365;private static readonly int[]DaysToMonth366;static DateTimeUtils(){DaysToMonth365=new[]{0,31,59,90,120,151,181,212,243,273,304,334,365};DaysToMonth366=new[]{0,31,60,91,121,152,182,213,244,274,305,335,366};}public static TimeSpan GetUtcOffset(this DateTime d){
#if !HAVE_TIME_ZONE_INFO
return TimeZone.CurrentTimeZone.GetUtcOffset(d);
#else
return TimeZoneInfo.Local.GetUtcOffset(d);
#endif
}
#if !(PORTABLE40 || PORTABLE) || NETSTANDARD1_3
public static XmlDateTimeSerializationMode ToSerializationMode(DateTimeKind kind){switch(kind){case DateTimeKind.Local:return XmlDateTimeSerializationMode.Local;case DateTimeKind.Unspecified:return XmlDateTimeSerializationMode.Unspecified;case DateTimeKind.Utc:return XmlDateTimeSerializationMode.Utc;default:throw MiscellaneousUtils.CreateArgumentOutOfRangeException(nameof(kind),kind,"Unexpected DateTimeKind value.");}}
#else
public static string ToDateTimeFormat(DateTimeKind kind){switch(kind){case DateTimeKind.Local:return IsoDateFormat;case DateTimeKind.Unspecified:return"yyyy-MM-ddTHH:mm:ss.FFFFFFF";case DateTimeKind.Utc:return"yyyy-MM-ddTHH:mm:ss.FFFFFFFZ";default:throw MiscellaneousUtils.CreateArgumentOutOfRangeException(nameof(kind),kind,"Unexpected DateTimeKind value.");}}
#endif
internal static DateTime EnsureDateTime(DateTime value,DateTimeZoneHandling timeZone){switch(timeZone){case DateTimeZoneHandling.Local:value=SwitchToLocalTime(value);break;case DateTimeZoneHandling.Utc:value=SwitchToUtcTime(value);break;case DateTimeZoneHandling.Unspecified:value=new DateTime(value.Ticks,DateTimeKind.Unspecified);break;case DateTimeZoneHandling.RoundtripKind:break;default:throw new ArgumentException("Invalid date time handling value.");}return value;}private static DateTime SwitchToLocalTime(DateTime value){switch(value.Kind){case DateTimeKind.Unspecified:return new DateTime(value.Ticks,DateTimeKind.Local);case DateTimeKind.Utc:return value.ToLocalTime();case DateTimeKind.Local:return value;}return value;}private static DateTime SwitchToUtcTime(DateTime value){switch(value.Kind){case DateTimeKind.Unspecified:return new DateTime(value.Ticks,DateTimeKind.Utc);case DateTimeKind.Utc:return value;case DateTimeKind.Local:return value.ToUniversalTime();}return value;}private static long ToUniversalTicks(DateTime dateTime){if(dateTime.Kind==DateTimeKind.Utc){return dateTime.Ticks;}return ToUniversalTicks(dateTime,dateTime.GetUtcOffset());}private static long ToUniversalTicks(DateTime dateTime,TimeSpan offset){if(dateTime.Kind==DateTimeKind.Utc||dateTime==DateTime.MaxValue||dateTime==DateTime.MinValue){return dateTime.Ticks;}long ticks=dateTime.Ticks-offset.Ticks;if(ticks>3155378975999999999L){return 3155378975999999999L;}if(ticks<0L){return 0L;}return ticks;}internal static long ConvertDateTimeToJavaScriptTicks(DateTime dateTime,TimeSpan offset){long universalTicks=ToUniversalTicks(dateTime,offset);return UniversalTicksToJavaScriptTicks(universalTicks);}internal static long ConvertDateTimeToJavaScriptTicks(DateTime dateTime){return ConvertDateTimeToJavaScriptTicks(dateTime,true);}internal static long ConvertDateTimeToJavaScriptTicks(DateTime dateTime,bool convertToUtc){long ticks=(convertToUtc)?ToUniversalTicks(dateTime):dateTime.Ticks;return UniversalTicksToJavaScriptTicks(ticks);}private static long UniversalTicksToJavaScriptTicks(long universalTicks){long javaScriptTicks=(universalTicks-InitialJavaScriptDateTicks)/10000;return javaScriptTicks;}internal static DateTime ConvertJavaScriptTicksToDateTime(long javaScriptTicks){DateTime dateTime=new DateTime((javaScriptTicks*10000)+InitialJavaScriptDateTicks,DateTimeKind.Utc);return dateTime;}internal static bool TryParseDateTimeIso(StringReference text,DateTimeZoneHandling dateTimeZoneHandling,out DateTime dt){DateTimeParser dateTimeParser=new DateTimeParser();if(!dateTimeParser.Parse(text.Chars,text.StartIndex,text.Length)){dt=default;return false;}DateTime d=CreateDateTime(dateTimeParser);long ticks;switch(dateTimeParser.Zone){case ParserTimeZone.Utc:d=new DateTime(d.Ticks,DateTimeKind.Utc);break;case ParserTimeZone.LocalWestOfUtc:{TimeSpan offset=new TimeSpan(dateTimeParser.ZoneHour,dateTimeParser.ZoneMinute,0);ticks=d.Ticks+offset.Ticks;if(ticks<=DateTime.MaxValue.Ticks){d=new DateTime(ticks,DateTimeKind.Utc).ToLocalTime();}else{ticks+=d.GetUtcOffset().Ticks;if(ticks>DateTime.MaxValue.Ticks){ticks=DateTime.MaxValue.Ticks;}d=new DateTime(ticks,DateTimeKind.Local);}break;}case ParserTimeZone.LocalEastOfUtc:{TimeSpan offset=new TimeSpan(dateTimeParser.ZoneHour,dateTimeParser.ZoneMinute,0);ticks=d.Ticks-offset.Ticks;if(ticks>=DateTime.MinValue.Ticks){d=new DateTime(ticks,DateTimeKind.Utc).ToLocalTime();}else{ticks+=d.GetUtcOffset().Ticks;if(ticks<DateTime.MinValue.Ticks){ticks=DateTime.MinValue.Ticks;}d=new DateTime(ticks,DateTimeKind.Local);}break;}}dt=EnsureDateTime(d,dateTimeZoneHandling);return true;}
#if HAVE_DATE_TIME_OFFSET
internal static bool TryParseDateTimeOffsetIso(StringReference text,out DateTimeOffset dt){DateTimeParser dateTimeParser=new DateTimeParser();if(!dateTimeParser.Parse(text.Chars,text.StartIndex,text.Length)){dt=default;return false;}DateTime d=CreateDateTime(dateTimeParser);TimeSpan offset;switch(dateTimeParser.Zone){case ParserTimeZone.Utc:offset=new TimeSpan(0L);break;case ParserTimeZone.LocalWestOfUtc:offset=new TimeSpan(-dateTimeParser.ZoneHour,-dateTimeParser.ZoneMinute,0);break;case ParserTimeZone.LocalEastOfUtc:offset=new TimeSpan(dateTimeParser.ZoneHour,dateTimeParser.ZoneMinute,0);break;default:offset=TimeZoneInfo.Local.GetUtcOffset(d);break;}long ticks=d.Ticks-offset.Ticks;if(ticks<0||ticks>3155378975999999999){dt=default;return false;}dt=new DateTimeOffset(d,offset);return true;}
#endif
private static DateTime CreateDateTime(DateTimeParser dateTimeParser){bool is24Hour;if(dateTimeParser.Hour==24){is24Hour=true;dateTimeParser.Hour=0;}else{is24Hour=false;}DateTime d=new DateTime(dateTimeParser.Year,dateTimeParser.Month,dateTimeParser.Day,dateTimeParser.Hour,dateTimeParser.Minute,dateTimeParser.Second);d=d.AddTicks(dateTimeParser.Fraction);if(is24Hour){d=d.AddDays(1);}return d;}internal static bool TryParseDateTime(StringReference s,DateTimeZoneHandling dateTimeZoneHandling,string?dateFormatString,CultureInfo culture,out DateTime dt){if(s.Length>0){int i=s.StartIndex;if(s[i]=='/'){if(s.Length>=9&&s.StartsWith("/Date(")&&s.EndsWith(")/")){if(TryParseDateTimeMicrosoft(s,dateTimeZoneHandling,out dt)){return true;}}}else if(s.Length>=19&&s.Length<=40&&char.IsDigit(s[i])&&s[i+10]=='T'){if(TryParseDateTimeIso(s,dateTimeZoneHandling,out dt)){return true;}}if(!StringUtils.IsNullOrEmpty(dateFormatString)){if(TryParseDateTimeExact(s.ToString(),dateTimeZoneHandling,dateFormatString,culture,out dt)){return true;}}}dt=default;return false;}internal static bool TryParseDateTime(string s,DateTimeZoneHandling dateTimeZoneHandling,string?dateFormatString,CultureInfo culture,out DateTime dt){if(s.Length>0){if(s[0]=='/'){if(s.Length>=9&&s.StartsWith("/Date(",StringComparison.Ordinal)&&s.EndsWith(")/",StringComparison.Ordinal)){if(TryParseDateTimeMicrosoft(new StringReference(s.ToCharArray(),0,s.Length),dateTimeZoneHandling,out dt)){return true;}}}else if(s.Length>=19&&s.Length<=40&&char.IsDigit(s[0])&&s[10]=='T'){if(DateTime.TryParseExact(s,IsoDateFormat,CultureInfo.InvariantCulture,DateTimeStyles.RoundtripKind,out dt)){dt=EnsureDateTime(dt,dateTimeZoneHandling);return true;}}if(!StringUtils.IsNullOrEmpty(dateFormatString)){if(TryParseDateTimeExact(s,dateTimeZoneHandling,dateFormatString,culture,out dt)){return true;}}}dt=default;return false;}
#if HAVE_DATE_TIME_OFFSET
internal static bool TryParseDateTimeOffset(StringReference s,string?dateFormatString,CultureInfo culture,out DateTimeOffset dt){if(s.Length>0){int i=s.StartIndex;if(s[i]=='/'){if(s.Length>=9&&s.StartsWith("/Date(")&&s.EndsWith(")/")){if(TryParseDateTimeOffsetMicrosoft(s,out dt)){return true;}}}else if(s.Length>=19&&s.Length<=40&&char.IsDigit(s[i])&&s[i+10]=='T'){if(TryParseDateTimeOffsetIso(s,out dt)){return true;}}if(!StringUtils.IsNullOrEmpty(dateFormatString)){if(TryParseDateTimeOffsetExact(s.ToString(),dateFormatString,culture,out dt)){return true;}}}dt=default;return false;}internal static bool TryParseDateTimeOffset(string s,string?dateFormatString,CultureInfo culture,out DateTimeOffset dt){if(s.Length>0){if(s[0]=='/'){if(s.Length>=9&&s.StartsWith("/Date(",StringComparison.Ordinal)&&s.EndsWith(")/",StringComparison.Ordinal)){if(TryParseDateTimeOffsetMicrosoft(new StringReference(s.ToCharArray(),0,s.Length),out dt)){return true;}}}else if(s.Length>=19&&s.Length<=40&&char.IsDigit(s[0])&&s[10]=='T'){if(DateTimeOffset.TryParseExact(s,IsoDateFormat,CultureInfo.InvariantCulture,DateTimeStyles.RoundtripKind,out dt)){if(TryParseDateTimeOffsetIso(new StringReference(s.ToCharArray(),0,s.Length),out dt)){return true;}}}if(!StringUtils.IsNullOrEmpty(dateFormatString)){if(TryParseDateTimeOffsetExact(s,dateFormatString,culture,out dt)){return true;}}}dt=default;return false;}
#endif
private static bool TryParseMicrosoftDate(StringReference text,out long ticks,out TimeSpan offset,out DateTimeKind kind){kind=DateTimeKind.Utc;int index=text.IndexOf('+',7,text.Length-8);if(index==-1){index=text.IndexOf('-',7,text.Length-8);}if(index!=-1){kind=DateTimeKind.Local;if(!TryReadOffset(text,index+text.StartIndex,out offset)){ticks=0;return false;}}else{offset=TimeSpan.Zero;index=text.Length-2;}return(ConvertUtils.Int64TryParse(text.Chars,6+text.StartIndex,index-6,out ticks)==ParseResult.Success);}private static bool TryParseDateTimeMicrosoft(StringReference text,DateTimeZoneHandling dateTimeZoneHandling,out DateTime dt){if(!TryParseMicrosoftDate(text,out long ticks,out _,out DateTimeKind kind)){dt=default;return false;}DateTime utcDateTime=ConvertJavaScriptTicksToDateTime(ticks);switch(kind){case DateTimeKind.Unspecified:dt=DateTime.SpecifyKind(utcDateTime.ToLocalTime(),DateTimeKind.Unspecified);break;case DateTimeKind.Local:dt=utcDateTime.ToLocalTime();break;default:dt=utcDateTime;break;}dt=EnsureDateTime(dt,dateTimeZoneHandling);return true;}private static bool TryParseDateTimeExact(string text,DateTimeZoneHandling dateTimeZoneHandling,string dateFormatString,CultureInfo culture,out DateTime dt){if(DateTime.TryParseExact(text,dateFormatString,culture,DateTimeStyles.RoundtripKind,out DateTime temp)){temp=EnsureDateTime(temp,dateTimeZoneHandling);dt=temp;return true;}dt=default;return false;}
#if HAVE_DATE_TIME_OFFSET
private static bool TryParseDateTimeOffsetMicrosoft(StringReference text,out DateTimeOffset dt){if(!TryParseMicrosoftDate(text,out long ticks,out TimeSpan offset,out _)){dt=default(DateTime);return false;}DateTime utcDateTime=ConvertJavaScriptTicksToDateTime(ticks);dt=new DateTimeOffset(utcDateTime.Add(offset).Ticks,offset);return true;}private static bool TryParseDateTimeOffsetExact(string text,string dateFormatString,CultureInfo culture,out DateTimeOffset dt){if(DateTimeOffset.TryParseExact(text,dateFormatString,culture,DateTimeStyles.RoundtripKind,out DateTimeOffset temp)){dt=temp;return true;}dt=default;return false;}
#endif
private static bool TryReadOffset(StringReference offsetText,int startIndex,out TimeSpan offset){bool negative=(offsetText[startIndex]=='-');if(ConvertUtils.Int32TryParse(offsetText.Chars,startIndex+1,2,out int hours)!=ParseResult.Success){offset=default;return false;}int minutes=0;if(offsetText.Length-startIndex>5){if(ConvertUtils.Int32TryParse(offsetText.Chars,startIndex+3,2,out minutes)!=ParseResult.Success){offset=default;return false;}}offset=TimeSpan.FromHours(hours)+TimeSpan.FromMinutes(minutes);if(negative){offset=offset.Negate();}return true;}internal static void WriteDateTimeString(TextWriter writer,DateTime value,DateFormatHandling format,string?formatString,CultureInfo culture){if(StringUtils.IsNullOrEmpty(formatString)){char[]chars=new char[64];int pos=WriteDateTimeString(chars,0,value,null,value.Kind,format);writer.Write(chars,0,pos);}else{writer.Write(value.ToString(formatString,culture));}}internal static int WriteDateTimeString(char[]chars,int start,DateTime value,TimeSpan?offset,DateTimeKind kind,DateFormatHandling format){int pos=start;if(format==DateFormatHandling.MicrosoftDateFormat){TimeSpan o=offset??value.GetUtcOffset();long javaScriptTicks=ConvertDateTimeToJavaScriptTicks(value,o);@"\/Date(".CopyTo(0,chars,pos,7);pos+=7;string ticksText=javaScriptTicks.ToString(CultureInfo.InvariantCulture);ticksText.CopyTo(0,chars,pos,ticksText.Length);pos+=ticksText.Length;switch(kind){case DateTimeKind.Unspecified:if(value!=DateTime.MaxValue&&value!=DateTime.MinValue){pos=WriteDateTimeOffset(chars,pos,o,format);}break;case DateTimeKind.Local:pos=WriteDateTimeOffset(chars,pos,o,format);break;}@")\/".CopyTo(0,chars,pos,3);pos+=3;}else{pos=WriteDefaultIsoDate(chars,pos,value);switch(kind){case DateTimeKind.Local:pos=WriteDateTimeOffset(chars,pos,offset??value.GetUtcOffset(),format);break;case DateTimeKind.Utc:chars[pos++]='Z';break;}}return pos;}internal static int WriteDefaultIsoDate(char[]chars,int start,DateTime dt){int length=19;GetDateValues(dt,out int year,out int month,out int day);CopyIntToCharArray(chars,start,year,4);chars[start+4]='-';CopyIntToCharArray(chars,start+5,month,2);chars[start+7]='-';CopyIntToCharArray(chars,start+8,day,2);chars[start+10]='T';CopyIntToCharArray(chars,start+11,dt.Hour,2);chars[start+13]=':';CopyIntToCharArray(chars,start+14,dt.Minute,2);chars[start+16]=':';CopyIntToCharArray(chars,start+17,dt.Second,2);int fraction=(int)(dt.Ticks%10000000L);if(fraction!=0){int digits=7;while((fraction%10)==0){digits--;fraction/=10;}chars[start+19]='.';CopyIntToCharArray(chars,start+20,fraction,digits);length+=digits+1;}return start+length;}private static void CopyIntToCharArray(char[]chars,int start,int value,int digits){while(digits--!=0){chars[start+digits]=(char)((value%10)+48);value/=10;}}internal static int WriteDateTimeOffset(char[]chars,int start,TimeSpan offset,DateFormatHandling format){chars[start++]=(offset.Ticks>=0L)?'+':'-';int absHours=Math.Abs(offset.Hours);CopyIntToCharArray(chars,start,absHours,2);start+=2;if(format==DateFormatHandling.IsoDateFormat){chars[start++]=':';}int absMinutes=Math.Abs(offset.Minutes);CopyIntToCharArray(chars,start,absMinutes,2);start+=2;return start;}
#if HAVE_DATE_TIME_OFFSET
internal static void WriteDateTimeOffsetString(TextWriter writer,DateTimeOffset value,DateFormatHandling format,string?formatString,CultureInfo culture){if(StringUtils.IsNullOrEmpty(formatString)){char[]chars=new char[64];int pos=WriteDateTimeString(chars,0,(format==DateFormatHandling.IsoDateFormat)?value.DateTime:value.UtcDateTime,value.Offset,DateTimeKind.Local,format);writer.Write(chars,0,pos);}else{writer.Write(value.ToString(formatString,culture));}}
#endif
private static void GetDateValues(DateTime td,out int year,out int month,out int day){long ticks=td.Ticks;int n=(int)(ticks/TicksPerDay);int y400=n/DaysPer400Years;n-=y400*DaysPer400Years;int y100=n/DaysPer100Years;if(y100==4){y100=3;}n-=y100*DaysPer100Years;int y4=n/DaysPer4Years;n-=y4*DaysPer4Years;int y1=n/DaysPerYear;if(y1==4){y1=3;}year=y400*400+y100*100+y4*4+y1+1;n-=y1*DaysPerYear;bool leapYear=y1==3&&(y4!=24||y100==3);int[]days=leapYear?DaysToMonth366:DaysToMonth365;int m=n>>5+1;while(n>=days[m]){m++;}month=m;day=n-days[m-1]+1;}}}namespace Newtonsoft.Json{public enum DateTimeZoneHandling{Local=0,Utc=1,Unspecified=2,RoundtripKind=3}}
namespace Newtonsoft.Json.Serialization{public class DefaultContractResolver:IContractResolver{private static readonly IContractResolver _instance=new DefaultContractResolver();internal static IContractResolver Instance=>_instance;private static readonly string[]BlacklistedTypeNames={"System.IO.DriveInfo","System.IO.FileInfo","System.IO.DirectoryInfo"};private static readonly JsonConverter[]BuiltInConverters={
#if HAVE_ENTITY_FRAMEWORK
new EntityKeyMemberConverter(),
#endif
#if HAVE_DYNAMIC
new ExpandoObjectConverter(),
#endif
#if (HAVE_XML_DOCUMENT || HAVE_XLINQ)
new XmlNodeConverter(),
#endif
#if HAVE_ADO_NET
new BinaryConverter(),new DataSetConverter(),new DataTableConverter(),
#endif
#if HAVE_FSHARP_TYPES
new DiscriminatedUnionConverter(),
#endif
new KeyValuePairConverter(),
new BsonObjectIdConverter(),
new RegexConverter()};private readonly DefaultJsonNameTable _nameTable=new DefaultJsonNameTable();private readonly ThreadSafeStore<Type,JsonContract>_contractCache;public bool DynamicCodeGeneration=>JsonTypeReflector.DynamicCodeGeneration;
#if !PORTABLE
[Obsolete("DefaultMembersSearchFlags is obsolete. To modify the members serialized inherit from DefaultContractResolver and override the GetSerializableMembers method instead.")]public BindingFlags DefaultMembersSearchFlags{get;set;}
#else
private readonly BindingFlags DefaultMembersSearchFlags;
#endif
public bool SerializeCompilerGeneratedMembers{get;set;}
#if HAVE_BINARY_SERIALIZATION
public bool IgnoreSerializableInterface{get;set;}public bool IgnoreSerializableAttribute{get;set;}
#endif
public bool IgnoreIsSpecifiedMembers{get;set;}public bool IgnoreShouldSerializeMembers{get;set;}public NamingStrategy?NamingStrategy{get;set;}public DefaultContractResolver(){
#if HAVE_BINARY_SERIALIZATION
IgnoreSerializableAttribute=true;
#endif
DefaultMembersSearchFlags=BindingFlags.Instance|BindingFlags.Public;
_contractCache=new ThreadSafeStore<Type,JsonContract>(CreateContract);}public virtual JsonContract ResolveContract(Type type){ValidationUtils.ArgumentNotNull(type,nameof(type));return _contractCache.Get(type);}private static bool FilterMembers(MemberInfo member){if(member is PropertyInfo property){if(ReflectionUtils.IsIndexedProperty(property)){return false;}return!ReflectionUtils.IsByRefLikeType(property.PropertyType);}else if(member is FieldInfo field){return!ReflectionUtils.IsByRefLikeType(field.FieldType);}return true;}protected virtual List<MemberInfo>GetSerializableMembers(Type objectType){bool ignoreSerializableAttribute;
#if HAVE_BINARY_SERIALIZATION
ignoreSerializableAttribute=IgnoreSerializableAttribute;
#else
ignoreSerializableAttribute=true;
#endif
MemberSerialization memberSerialization=JsonTypeReflector.GetObjectMemberSerialization(objectType,ignoreSerializableAttribute);IEnumerable<MemberInfo>allMembers=ReflectionUtils.GetFieldsAndProperties(objectType,BindingFlags.Public|BindingFlags.NonPublic|BindingFlags.Instance|BindingFlags.Static).Where(m=>m is PropertyInfo p?!ReflectionUtils.IsIndexedProperty(p):true);List<MemberInfo>serializableMembers=new List<MemberInfo>();if(memberSerialization!=MemberSerialization.Fields){
#if HAVE_DATA_CONTRACTS
DataContractAttribute?dataContractAttribute=JsonTypeReflector.GetDataContractAttribute(objectType);
#endif
List<MemberInfo>defaultMembers=ReflectionUtils.GetFieldsAndProperties(objectType,DefaultMembersSearchFlags).Where(FilterMembers).ToList();
foreach(MemberInfo member in allMembers){if(SerializeCompilerGeneratedMembers||!member.IsDefined(typeof(CompilerGeneratedAttribute),true)){if(defaultMembers.Contains(member)){serializableMembers.Add(member);}else{if(JsonTypeReflector.GetAttribute<JsonPropertyAttribute>(member)!=null){serializableMembers.Add(member);}else if(JsonTypeReflector.GetAttribute<JsonRequiredAttribute>(member)!=null){serializableMembers.Add(member);}
#if HAVE_DATA_CONTRACTS
else if(dataContractAttribute!=null&&JsonTypeReflector.GetAttribute<DataMemberAttribute>(member)!=null){serializableMembers.Add(member);}
#endif
else if(memberSerialization==MemberSerialization.Fields&&member.MemberType()==MemberTypes.Field){serializableMembers.Add(member);}}}}
#if HAVE_DATA_CONTRACTS
if(objectType.AssignableToTypeName("System.Data.Objects.DataClasses.EntityObject",false,out _)){serializableMembers=serializableMembers.Where(ShouldSerializeEntityMember).ToList();}
#endif
if(typeof(Exception).IsAssignableFrom(objectType)){serializableMembers=serializableMembers.Where(m=>!string.Equals(m.Name,"TargetSite",StringComparison.Ordinal)).ToList();}}else{foreach(MemberInfo member in allMembers){if(member is FieldInfo field&&!field.IsStatic){serializableMembers.Add(member);}}}return serializableMembers;}
#if HAVE_DATA_CONTRACTS
private bool ShouldSerializeEntityMember(MemberInfo memberInfo){if(memberInfo is PropertyInfo propertyInfo){if(propertyInfo.PropertyType.IsGenericType()&&propertyInfo.PropertyType.GetGenericTypeDefinition().FullName=="System.Data.Objects.DataClasses.EntityReference`1"){return false;}}return true;}
#endif
protected virtual JsonObjectContract CreateObjectContract(Type objectType){JsonObjectContract contract=new JsonObjectContract(objectType);InitializeContract(contract);bool ignoreSerializableAttribute;
#if HAVE_BINARY_SERIALIZATION
ignoreSerializableAttribute=IgnoreSerializableAttribute;
#else
ignoreSerializableAttribute=true;
#endif
contract.MemberSerialization=JsonTypeReflector.GetObjectMemberSerialization(contract.NonNullableUnderlyingType,ignoreSerializableAttribute);contract.Properties.AddRange(CreateProperties(contract.NonNullableUnderlyingType,contract.MemberSerialization));Func<string,string>?extensionDataNameResolver=null;JsonObjectAttribute?attribute=JsonTypeReflector.GetCachedAttribute<JsonObjectAttribute>(contract.NonNullableUnderlyingType);if(attribute!=null){contract.ItemRequired=attribute._itemRequired;contract.ItemNullValueHandling=attribute._itemNullValueHandling;contract.MissingMemberHandling=attribute._missingMemberHandling;if(attribute.NamingStrategyType!=null){NamingStrategy namingStrategy=JsonTypeReflector.GetContainerNamingStrategy(attribute)!;extensionDataNameResolver=s=>namingStrategy.GetDictionaryKey(s);}}if(extensionDataNameResolver==null){extensionDataNameResolver=ResolveExtensionDataName;}contract.ExtensionDataNameResolver=extensionDataNameResolver;if(contract.IsInstantiable){ConstructorInfo?overrideConstructor=GetAttributeConstructor(contract.NonNullableUnderlyingType);if(overrideConstructor!=null){contract.OverrideCreator=JsonTypeReflector.ReflectionDelegateFactory.CreateParameterizedConstructor(overrideConstructor);contract.CreatorParameters.AddRange(CreateConstructorParameters(overrideConstructor,contract.Properties));}else if(contract.MemberSerialization==MemberSerialization.Fields){
#if HAVE_BINARY_FORMATTER
if(JsonTypeReflector.FullyTrusted){contract.DefaultCreator=contract.GetUninitializedObject;}
#endif
}else if(contract.DefaultCreator==null||contract.DefaultCreatorNonPublic){ConstructorInfo?constructor=GetParameterizedConstructor(contract.NonNullableUnderlyingType);if(constructor!=null){contract.ParameterizedCreator=JsonTypeReflector.ReflectionDelegateFactory.CreateParameterizedConstructor(constructor);contract.CreatorParameters.AddRange(CreateConstructorParameters(constructor,contract.Properties));}}else if(contract.NonNullableUnderlyingType.IsValueType()){ConstructorInfo?constructor=GetImmutableConstructor(contract.NonNullableUnderlyingType,contract.Properties);if(constructor!=null){contract.OverrideCreator=JsonTypeReflector.ReflectionDelegateFactory.CreateParameterizedConstructor(constructor);contract.CreatorParameters.AddRange(CreateConstructorParameters(constructor,contract.Properties));}}}MemberInfo extensionDataMember=GetExtensionDataMemberForType(contract.NonNullableUnderlyingType);if(extensionDataMember!=null){SetExtensionDataDelegates(contract,extensionDataMember);}if(Array.IndexOf(BlacklistedTypeNames,objectType.FullName)!=-1){contract.OnSerializingCallbacks.Add(ThrowUnableToSerializeError);}return contract;}private static void ThrowUnableToSerializeError(object o,StreamingContext context){throw new JsonSerializationException("Unable to serialize instance of '{0}'.".FormatWith(CultureInfo.InvariantCulture,o.GetType()));}private MemberInfo GetExtensionDataMemberForType(Type type){IEnumerable<MemberInfo>members=GetClassHierarchyForType(type).SelectMany(baseType=>{IList<MemberInfo>m=new List<MemberInfo>();m.AddRange(baseType.GetProperties(BindingFlags.Public|BindingFlags.NonPublic|BindingFlags.Instance|BindingFlags.DeclaredOnly));m.AddRange(baseType.GetFields(BindingFlags.Public|BindingFlags.NonPublic|BindingFlags.Instance|BindingFlags.DeclaredOnly));return m;});MemberInfo extensionDataMember=members.LastOrDefault(m=>{MemberTypes memberType=m.MemberType();if(memberType!=MemberTypes.Property&&memberType!=MemberTypes.Field){return false;}if(!m.IsDefined(typeof(JsonExtensionDataAttribute),false)){return false;}if(!ReflectionUtils.CanReadMemberValue(m,true)){throw new JsonException("Invalid extension data attribute on '{0}'. Member '{1}' must have a getter.".FormatWith(CultureInfo.InvariantCulture,GetClrTypeFullName(m.DeclaringType),m.Name));}Type t=ReflectionUtils.GetMemberUnderlyingType(m);if(ReflectionUtils.ImplementsGenericDefinition(t,typeof(IDictionary<,>),out Type?dictionaryType)){Type keyType=dictionaryType.GetGenericArguments()[0];Type valueType=dictionaryType.GetGenericArguments()[1];if(keyType.IsAssignableFrom(typeof(string))&&valueType.IsAssignableFrom(typeof(JToken))){return true;}}throw new JsonException("Invalid extension data attribute on '{0}'. Member '{1}' type must implement IDictionary<string, JToken>.".FormatWith(CultureInfo.InvariantCulture,GetClrTypeFullName(m.DeclaringType),m.Name));});return extensionDataMember;}private static void SetExtensionDataDelegates(JsonObjectContract contract,MemberInfo member){JsonExtensionDataAttribute?extensionDataAttribute=ReflectionUtils.GetAttribute<JsonExtensionDataAttribute>(member);if(extensionDataAttribute==null){return;}Type t=ReflectionUtils.GetMemberUnderlyingType(member);ReflectionUtils.ImplementsGenericDefinition(t,typeof(IDictionary<,>),out Type?dictionaryType);Type keyType=dictionaryType!.GetGenericArguments()[0];Type valueType=dictionaryType!.GetGenericArguments()[1];Type createdType;if(ReflectionUtils.IsGenericDefinition(t,typeof(IDictionary<,>))){createdType=typeof(Dictionary<,>).MakeGenericType(keyType,valueType);}else{createdType=t;}Func<object,object?>getExtensionDataDictionary=JsonTypeReflector.ReflectionDelegateFactory.CreateGet<object>(member);if(extensionDataAttribute.ReadData){Action<object,object?>?setExtensionDataDictionary=(ReflectionUtils.CanSetMemberValue(member,true,false))?JsonTypeReflector.ReflectionDelegateFactory.CreateSet<object>(member):null;Func<object>createExtensionDataDictionary=JsonTypeReflector.ReflectionDelegateFactory.CreateDefaultConstructor<object>(createdType);MethodInfo?setMethod=t.GetProperty("Item",BindingFlags.Public|BindingFlags.Instance,null,valueType,new[]{keyType},null)?.GetSetMethod();if(setMethod==null){setMethod=dictionaryType!.GetProperty("Item",BindingFlags.Public|BindingFlags.Instance,null,valueType,new[]{keyType},null)?.GetSetMethod();}MethodCall<object,object?>setExtensionDataDictionaryValue=JsonTypeReflector.ReflectionDelegateFactory.CreateMethodCall<object>(setMethod!);ExtensionDataSetter extensionDataSetter=(o,key,value)=>{object?dictionary=getExtensionDataDictionary(o);if(dictionary==null){if(setExtensionDataDictionary==null){throw new JsonSerializationException("Cannot set value onto extension data member '{0}'. The extension data collection is null and it cannot be set.".FormatWith(CultureInfo.InvariantCulture,member.Name));}dictionary=createExtensionDataDictionary();setExtensionDataDictionary(o,dictionary);}setExtensionDataDictionaryValue(dictionary,key,value);};contract.ExtensionDataSetter=extensionDataSetter;}if(extensionDataAttribute.WriteData){Type enumerableWrapper=typeof(EnumerableDictionaryWrapper<,>).MakeGenericType(keyType,valueType);ConstructorInfo constructors=enumerableWrapper.GetConstructors().First();ObjectConstructor<object>createEnumerableWrapper=JsonTypeReflector.ReflectionDelegateFactory.CreateParameterizedConstructor(constructors);ExtensionDataGetter extensionDataGetter=o=>{object?dictionary=getExtensionDataDictionary(o);if(dictionary==null){return null;}return(IEnumerable<KeyValuePair<object,object>>)createEnumerableWrapper(dictionary);};contract.ExtensionDataGetter=extensionDataGetter;}contract.ExtensionDataValueType=valueType;}internal class EnumerableDictionaryWrapper<TEnumeratorKey,TEnumeratorValue>:IEnumerable<KeyValuePair<object,object>>{private readonly IEnumerable<KeyValuePair<TEnumeratorKey,TEnumeratorValue>>_e;public EnumerableDictionaryWrapper(IEnumerable<KeyValuePair<TEnumeratorKey,TEnumeratorValue>>e){ValidationUtils.ArgumentNotNull(e,nameof(e));_e=e;}public IEnumerator<KeyValuePair<object,object>>GetEnumerator(){foreach(KeyValuePair<TEnumeratorKey,TEnumeratorValue>item in _e){yield return new KeyValuePair<object,object>(item.Key!,item.Value!);}}IEnumerator IEnumerable.GetEnumerator(){return GetEnumerator();}}private ConstructorInfo?GetAttributeConstructor(Type objectType){IEnumerator<ConstructorInfo>en=objectType.GetConstructors(BindingFlags.Instance|BindingFlags.Public|BindingFlags.NonPublic).Where(c=>c.IsDefined(typeof(JsonConstructorAttribute),true)).GetEnumerator();if(en.MoveNext()){ConstructorInfo conInfo=en.Current;if(en.MoveNext()){throw new JsonException("Multiple constructors with the JsonConstructorAttribute.");}return conInfo;}if(objectType==typeof(Version)){return objectType.GetConstructor(new[]{typeof(int),typeof(int),typeof(int),typeof(int)});}return null;}private ConstructorInfo?GetImmutableConstructor(Type objectType,JsonPropertyCollection memberProperties){IEnumerable<ConstructorInfo>constructors=objectType.GetConstructors();IEnumerator<ConstructorInfo>en=constructors.GetEnumerator();if(en.MoveNext()){ConstructorInfo constructor=en.Current;if(!en.MoveNext()){ParameterInfo[]parameters=constructor.GetParameters();if(parameters.Length>0){foreach(ParameterInfo parameterInfo in parameters){JsonProperty?memberProperty=MatchProperty(memberProperties,parameterInfo.Name,parameterInfo.ParameterType);if(memberProperty==null||memberProperty.Writable){return null;}}return constructor;}}}return null;}private ConstructorInfo?GetParameterizedConstructor(Type objectType){
#if PORTABLE
IEnumerable<ConstructorInfo>constructors=objectType.GetConstructors(BindingFlags.Public|BindingFlags.Instance);IEnumerator<ConstructorInfo>en=constructors.GetEnumerator();if(en.MoveNext()){ConstructorInfo conInfo=en.Current;if(!en.MoveNext()){return conInfo;}}
#else
ConstructorInfo[]constructors=objectType.GetConstructors(BindingFlags.Public|BindingFlags.Instance);if(constructors.Length==1){return constructors[0];}
#endif
return null;}protected virtual IList<JsonProperty>CreateConstructorParameters(ConstructorInfo constructor,JsonPropertyCollection memberProperties){ParameterInfo[]constructorParameters=constructor.GetParameters();JsonPropertyCollection parameterCollection=new JsonPropertyCollection(constructor.DeclaringType);foreach(ParameterInfo parameterInfo in constructorParameters){if(parameterInfo.Name==null){continue;}JsonProperty?matchingMemberProperty=MatchProperty(memberProperties,parameterInfo.Name,parameterInfo.ParameterType);if(matchingMemberProperty!=null||parameterInfo.Name!=null){JsonProperty property=CreatePropertyFromConstructorParameter(matchingMemberProperty,parameterInfo);if(property!=null){parameterCollection.AddProperty(property);}}}return parameterCollection;}private JsonProperty?MatchProperty(JsonPropertyCollection properties,string name,Type type){if(name==null){return null;}JsonProperty?property=properties.GetClosestMatchProperty(name);if(property==null||property.PropertyType!=type){return null;}return property;}protected virtual JsonProperty CreatePropertyFromConstructorParameter(JsonProperty?matchingMemberProperty,ParameterInfo parameterInfo){JsonProperty property=new JsonProperty();property.PropertyType=parameterInfo.ParameterType;property.AttributeProvider=new ReflectionAttributeProvider(parameterInfo);SetPropertySettingsFromAttributes(property,parameterInfo,parameterInfo.Name,parameterInfo.Member.DeclaringType,MemberSerialization.OptOut,out _);property.Readable=false;property.Writable=true;if(matchingMemberProperty!=null){property.PropertyName=(property.PropertyName!=parameterInfo.Name)?property.PropertyName:matchingMemberProperty.PropertyName;property.Converter=property.Converter??matchingMemberProperty.Converter;if(!property._hasExplicitDefaultValue&&matchingMemberProperty._hasExplicitDefaultValue){property.DefaultValue=matchingMemberProperty.DefaultValue;}property._required=property._required??matchingMemberProperty._required;property.IsReference=property.IsReference??matchingMemberProperty.IsReference;property.NullValueHandling=property.NullValueHandling??matchingMemberProperty.NullValueHandling;property.DefaultValueHandling=property.DefaultValueHandling??matchingMemberProperty.DefaultValueHandling;property.ReferenceLoopHandling=property.ReferenceLoopHandling??matchingMemberProperty.ReferenceLoopHandling;property.ObjectCreationHandling=property.ObjectCreationHandling??matchingMemberProperty.ObjectCreationHandling;property.TypeNameHandling=property.TypeNameHandling??matchingMemberProperty.TypeNameHandling;}return property;}protected virtual JsonConverter?ResolveContractConverter(Type objectType){return JsonTypeReflector.GetJsonConverter(objectType);}private Func<object>GetDefaultCreator(Type createdType){return JsonTypeReflector.ReflectionDelegateFactory.CreateDefaultConstructor<object>(createdType);}
#if NET35
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Portability","CA1903:UseOnlyApiFromTargetedFramework",MessageId="System.Runtime.Serialization.DataContractAttribute.#get_IsReference()")]
#endif
private void InitializeContract(JsonContract contract){JsonContainerAttribute?containerAttribute=JsonTypeReflector.GetCachedAttribute<JsonContainerAttribute>(contract.NonNullableUnderlyingType);if(containerAttribute!=null){contract.IsReference=containerAttribute._isReference;}
#if HAVE_DATA_CONTRACTS
else{DataContractAttribute?dataContractAttribute=JsonTypeReflector.GetDataContractAttribute(contract.NonNullableUnderlyingType);if(dataContractAttribute!=null&&dataContractAttribute.IsReference){contract.IsReference=true;}}
#endif
contract.Converter=ResolveContractConverter(contract.NonNullableUnderlyingType);contract.InternalConverter=JsonSerializer.GetMatchingConverter(BuiltInConverters,contract.NonNullableUnderlyingType);if(contract.IsInstantiable&&(ReflectionUtils.HasDefaultConstructor(contract.CreatedType,true)||contract.CreatedType.IsValueType())){contract.DefaultCreator=GetDefaultCreator(contract.CreatedType);contract.DefaultCreatorNonPublic=(!contract.CreatedType.IsValueType()&&ReflectionUtils.GetDefaultConstructor(contract.CreatedType)==null);}ResolveCallbackMethods(contract,contract.NonNullableUnderlyingType);}private void ResolveCallbackMethods(JsonContract contract,Type t){GetCallbackMethodsForType(t,out List<SerializationCallback>?onSerializing,out List<SerializationCallback>?onSerialized,out List<SerializationCallback>?onDeserializing,out List<SerializationCallback>?onDeserialized,out List<SerializationErrorCallback>?onError);if(onSerializing!=null){contract.OnSerializingCallbacks.AddRange(onSerializing);}if(onSerialized!=null){contract.OnSerializedCallbacks.AddRange(onSerialized);}if(onDeserializing!=null){contract.OnDeserializingCallbacks.AddRange(onDeserializing);}if(onDeserialized!=null){contract.OnDeserializedCallbacks.AddRange(onDeserialized);}if(onError!=null){contract.OnErrorCallbacks.AddRange(onError);}}private void GetCallbackMethodsForType(Type type,out List<SerializationCallback>?onSerializing,out List<SerializationCallback>?onSerialized,out List<SerializationCallback>?onDeserializing,out List<SerializationCallback>?onDeserialized,out List<SerializationErrorCallback>?onError){onSerializing=null;onSerialized=null;onDeserializing=null;onDeserialized=null;onError=null;foreach(Type baseType in GetClassHierarchyForType(type)){MethodInfo?currentOnSerializing=null;MethodInfo?currentOnSerialized=null;MethodInfo?currentOnDeserializing=null;MethodInfo?currentOnDeserialized=null;MethodInfo?currentOnError=null;bool skipSerializing=ShouldSkipSerializing(baseType);bool skipDeserialized=ShouldSkipDeserialized(baseType);foreach(MethodInfo method in baseType.GetMethods(BindingFlags.NonPublic|BindingFlags.Public|BindingFlags.Instance|BindingFlags.DeclaredOnly)){if(method.ContainsGenericParameters){continue;}Type?prevAttributeType=null;ParameterInfo[]parameters=method.GetParameters();if(!skipSerializing&&IsValidCallback(method,parameters,typeof(OnSerializingAttribute),currentOnSerializing,ref prevAttributeType)){onSerializing=onSerializing??new List<SerializationCallback>();onSerializing.Add(JsonContract.CreateSerializationCallback(method));currentOnSerializing=method;}if(IsValidCallback(method,parameters,typeof(OnSerializedAttribute),currentOnSerialized,ref prevAttributeType)){onSerialized=onSerialized??new List<SerializationCallback>();onSerialized.Add(JsonContract.CreateSerializationCallback(method));currentOnSerialized=method;}if(IsValidCallback(method,parameters,typeof(OnDeserializingAttribute),currentOnDeserializing,ref prevAttributeType)){onDeserializing=onDeserializing??new List<SerializationCallback>();onDeserializing.Add(JsonContract.CreateSerializationCallback(method));currentOnDeserializing=method;}if(!skipDeserialized&&IsValidCallback(method,parameters,typeof(OnDeserializedAttribute),currentOnDeserialized,ref prevAttributeType)){onDeserialized=onDeserialized??new List<SerializationCallback>();onDeserialized.Add(JsonContract.CreateSerializationCallback(method));currentOnDeserialized=method;}if(IsValidCallback(method,parameters,typeof(OnErrorAttribute),currentOnError,ref prevAttributeType)){onError=onError??new List<SerializationErrorCallback>();onError.Add(JsonContract.CreateSerializationErrorCallback(method));currentOnError=method;}}}}private static bool IsConcurrentOrObservableCollection(Type t){if(t.IsGenericType()){Type definition=t.GetGenericTypeDefinition();switch(definition.FullName){case"System.Collections.Concurrent.ConcurrentQueue`1":case"System.Collections.Concurrent.ConcurrentStack`1":case"System.Collections.Concurrent.ConcurrentBag`1":case JsonTypeReflector.ConcurrentDictionaryTypeName:case"System.Collections.ObjectModel.ObservableCollection`1":return true;}}return false;}private static bool ShouldSkipDeserialized(Type t){if(IsConcurrentOrObservableCollection(t)){return true;}
#if HAVE_FSHARP_TYPES
if(t.Name==FSharpUtils.FSharpSetTypeName||t.Name==FSharpUtils.FSharpMapTypeName){return true;}
#endif
return false;}private static bool ShouldSkipSerializing(Type t){if(IsConcurrentOrObservableCollection(t)){return true;}
#if HAVE_FSHARP_TYPES
if(t.Name==FSharpUtils.FSharpSetTypeName||t.Name==FSharpUtils.FSharpMapTypeName){return true;}
#endif
return false;}private List<Type>GetClassHierarchyForType(Type type){List<Type>ret=new List<Type>();Type current=type;while(current!=null&&current!=typeof(object)){ret.Add(current);current=current.BaseType();}ret.Reverse();return ret;}protected virtual JsonDictionaryContract CreateDictionaryContract(Type objectType){JsonDictionaryContract contract=new JsonDictionaryContract(objectType);InitializeContract(contract);JsonContainerAttribute?containerAttribute=JsonTypeReflector.GetAttribute<JsonContainerAttribute>(objectType);if(containerAttribute?.NamingStrategyType!=null){NamingStrategy namingStrategy=JsonTypeReflector.GetContainerNamingStrategy(containerAttribute)!;contract.DictionaryKeyResolver=s=>namingStrategy.GetDictionaryKey(s);}else{contract.DictionaryKeyResolver=ResolveDictionaryKey;}ConstructorInfo?overrideConstructor=GetAttributeConstructor(contract.NonNullableUnderlyingType);if(overrideConstructor!=null){ParameterInfo[]parameters=overrideConstructor.GetParameters();Type expectedParameterType=(contract.DictionaryKeyType!=null&&contract.DictionaryValueType!=null)?typeof(IEnumerable<>).MakeGenericType(typeof(KeyValuePair<,>).MakeGenericType(contract.DictionaryKeyType,contract.DictionaryValueType)):typeof(IDictionary);if(parameters.Length==0){contract.HasParameterizedCreator=false;}else if(parameters.Length==1&&expectedParameterType.IsAssignableFrom(parameters[0].ParameterType)){contract.HasParameterizedCreator=true;}else{throw new JsonException("Constructor for '{0}' must have no parameters or a single parameter that implements '{1}'.".FormatWith(CultureInfo.InvariantCulture,contract.UnderlyingType,expectedParameterType));}contract.OverrideCreator=JsonTypeReflector.ReflectionDelegateFactory.CreateParameterizedConstructor(overrideConstructor);}return contract;}protected virtual JsonArrayContract CreateArrayContract(Type objectType){JsonArrayContract contract=new JsonArrayContract(objectType);InitializeContract(contract);ConstructorInfo?overrideConstructor=GetAttributeConstructor(contract.NonNullableUnderlyingType);if(overrideConstructor!=null){ParameterInfo[]parameters=overrideConstructor.GetParameters();Type expectedParameterType=(contract.CollectionItemType!=null)?typeof(IEnumerable<>).MakeGenericType(contract.CollectionItemType):typeof(IEnumerable);if(parameters.Length==0){contract.HasParameterizedCreator=false;}else if(parameters.Length==1&&expectedParameterType.IsAssignableFrom(parameters[0].ParameterType)){contract.HasParameterizedCreator=true;}else{throw new JsonException("Constructor for '{0}' must have no parameters or a single parameter that implements '{1}'.".FormatWith(CultureInfo.InvariantCulture,contract.UnderlyingType,expectedParameterType));}contract.OverrideCreator=JsonTypeReflector.ReflectionDelegateFactory.CreateParameterizedConstructor(overrideConstructor);}return contract;}protected virtual JsonPrimitiveContract CreatePrimitiveContract(Type objectType){JsonPrimitiveContract contract=new JsonPrimitiveContract(objectType);InitializeContract(contract);return contract;}protected virtual JsonLinqContract CreateLinqContract(Type objectType){JsonLinqContract contract=new JsonLinqContract(objectType);InitializeContract(contract);return contract;}
#if HAVE_BINARY_SERIALIZATION
protected virtual JsonISerializableContract CreateISerializableContract(Type objectType){JsonISerializableContract contract=new JsonISerializableContract(objectType);InitializeContract(contract);if(contract.IsInstantiable){ConstructorInfo constructorInfo=contract.NonNullableUnderlyingType.GetConstructor(BindingFlags.Public|BindingFlags.NonPublic|BindingFlags.Instance,null,new[]{typeof(SerializationInfo),typeof(StreamingContext)},null);if(constructorInfo!=null){ObjectConstructor<object>creator=JsonTypeReflector.ReflectionDelegateFactory.CreateParameterizedConstructor(constructorInfo);contract.ISerializableCreator=creator;}}return contract;}
#endif
#if HAVE_DYNAMIC
protected virtual JsonDynamicContract CreateDynamicContract(Type objectType){JsonDynamicContract contract=new JsonDynamicContract(objectType);InitializeContract(contract);JsonContainerAttribute?containerAttribute=JsonTypeReflector.GetAttribute<JsonContainerAttribute>(objectType);if(containerAttribute?.NamingStrategyType!=null){NamingStrategy namingStrategy=JsonTypeReflector.GetContainerNamingStrategy(containerAttribute)!;contract.PropertyNameResolver=s=>namingStrategy.GetDictionaryKey(s);}else{contract.PropertyNameResolver=ResolveDictionaryKey;}contract.Properties.AddRange(CreateProperties(objectType,MemberSerialization.OptOut));return contract;}
#endif
protected virtual JsonStringContract CreateStringContract(Type objectType){JsonStringContract contract=new JsonStringContract(objectType);InitializeContract(contract);return contract;}protected virtual JsonContract CreateContract(Type objectType){Type t=ReflectionUtils.EnsureNotByRefType(objectType);if(IsJsonPrimitiveType(t)){return CreatePrimitiveContract(objectType);}t=ReflectionUtils.EnsureNotNullableType(t);JsonContainerAttribute?containerAttribute=JsonTypeReflector.GetCachedAttribute<JsonContainerAttribute>(t);if(containerAttribute is JsonObjectAttribute){return CreateObjectContract(objectType);}if(containerAttribute is JsonArrayAttribute){return CreateArrayContract(objectType);}if(containerAttribute is JsonDictionaryAttribute){return CreateDictionaryContract(objectType);}if(t==typeof(JToken)||t.IsSubclassOf(typeof(JToken))){return CreateLinqContract(objectType);}if(CollectionUtils.IsDictionaryType(t)){return CreateDictionaryContract(objectType);}if(typeof(IEnumerable).IsAssignableFrom(t)){return CreateArrayContract(objectType);}if(CanConvertToString(t)){return CreateStringContract(objectType);}
#if HAVE_BINARY_SERIALIZATION
if(!IgnoreSerializableInterface&&typeof(ISerializable).IsAssignableFrom(t)&&JsonTypeReflector.IsSerializable(t)){return CreateISerializableContract(objectType);}
#endif
#if HAVE_DYNAMIC
if(typeof(IDynamicMetaObjectProvider).IsAssignableFrom(t)){return CreateDynamicContract(objectType);}
#endif
#if HAVE_ICONVERTIBLE
if(IsIConvertible(t)){return CreatePrimitiveContract(t);}
#endif
return CreateObjectContract(objectType);}internal static bool IsJsonPrimitiveType(Type t){PrimitiveTypeCode typeCode=ConvertUtils.GetTypeCode(t);return(typeCode!=PrimitiveTypeCode.Empty&&typeCode!=PrimitiveTypeCode.Object);}
#if HAVE_ICONVERTIBLE
internal static bool IsIConvertible(Type t){if(typeof(IConvertible).IsAssignableFrom(t)||(ReflectionUtils.IsNullableType(t)&&typeof(IConvertible).IsAssignableFrom(Nullable.GetUnderlyingType(t)))){return!typeof(JToken).IsAssignableFrom(t);}return false;}
#endif
internal static bool CanConvertToString(Type type){
#if HAVE_TYPE_DESCRIPTOR
if(JsonTypeReflector.CanTypeDescriptorConvertString(type,out _)){return true;}
#endif
if(type==typeof(Type)||type.IsSubclassOf(typeof(Type))){return true;}return false;}private static bool IsValidCallback(MethodInfo method,ParameterInfo[]parameters,Type attributeType,MethodInfo?currentCallback,ref Type?prevAttributeType){if(!method.IsDefined(attributeType,false)){return false;}if(currentCallback!=null){throw new JsonException("Invalid attribute. Both '{0}' and '{1}' in type '{2}' have '{3}'.".FormatWith(CultureInfo.InvariantCulture,method,currentCallback,GetClrTypeFullName(method.DeclaringType),attributeType));}if(prevAttributeType!=null){throw new JsonException("Invalid Callback. Method '{3}' in type '{2}' has both '{0}' and '{1}'.".FormatWith(CultureInfo.InvariantCulture,prevAttributeType,attributeType,GetClrTypeFullName(method.DeclaringType),method));}if(method.IsVirtual){throw new JsonException("Virtual Method '{0}' of type '{1}' cannot be marked with '{2}' attribute.".FormatWith(CultureInfo.InvariantCulture,method,GetClrTypeFullName(method.DeclaringType),attributeType));}if(method.ReturnType!=typeof(void)){throw new JsonException("Serialization Callback '{1}' in type '{0}' must return void.".FormatWith(CultureInfo.InvariantCulture,GetClrTypeFullName(method.DeclaringType),method));}if(attributeType==typeof(OnErrorAttribute)){if(parameters==null||parameters.Length!=2||parameters[0].ParameterType!=typeof(StreamingContext)||parameters[1].ParameterType!=typeof(ErrorContext)){throw new JsonException("Serialization Error Callback '{1}' in type '{0}' must have two parameters of type '{2}' and '{3}'.".FormatWith(CultureInfo.InvariantCulture,GetClrTypeFullName(method.DeclaringType),method,typeof(StreamingContext),typeof(ErrorContext)));}}else{if(parameters==null||parameters.Length!=1||parameters[0].ParameterType!=typeof(StreamingContext)){throw new JsonException("Serialization Callback '{1}' in type '{0}' must have a single parameter of type '{2}'.".FormatWith(CultureInfo.InvariantCulture,GetClrTypeFullName(method.DeclaringType),method,typeof(StreamingContext)));}}prevAttributeType=attributeType;return true;}internal static string GetClrTypeFullName(Type type){if(type.IsGenericTypeDefinition()||!type.ContainsGenericParameters()){return type.FullName;}return"{0}.{1}".FormatWith(CultureInfo.InvariantCulture,type.Namespace,type.Name);}protected virtual IList<JsonProperty>CreateProperties(Type type,MemberSerialization memberSerialization){List<MemberInfo>members=GetSerializableMembers(type);if(members==null){throw new JsonSerializationException("Null collection of serializable members returned.");}DefaultJsonNameTable nameTable=GetNameTable();JsonPropertyCollection properties=new JsonPropertyCollection(type);foreach(MemberInfo member in members){JsonProperty property=CreateProperty(member,memberSerialization);if(property!=null){lock(nameTable){property.PropertyName=nameTable.Add(property.PropertyName!);}properties.AddProperty(property);}}IList<JsonProperty>orderedProperties=properties.OrderBy(p=>p.Order??-1).ToList();return orderedProperties;}internal virtual DefaultJsonNameTable GetNameTable(){return _nameTable;}protected virtual IValueProvider CreateMemberValueProvider(MemberInfo member){IValueProvider valueProvider;
#if !(PORTABLE40 || PORTABLE || DOTNET || NETSTANDARD2_0)
if(DynamicCodeGeneration){valueProvider=null;}else{valueProvider=new ReflectionValueProvider(member);}
#elif !(PORTABLE40)
valueProvider=new ExpressionValueProvider(member);
#else
valueProvider=new ReflectionValueProvider(member);
#endif
return valueProvider;}protected virtual JsonProperty CreateProperty(MemberInfo member,MemberSerialization memberSerialization){JsonProperty property=new JsonProperty();property.PropertyType=ReflectionUtils.GetMemberUnderlyingType(member);property.DeclaringType=member.DeclaringType;property.ValueProvider=CreateMemberValueProvider(member);property.AttributeProvider=new ReflectionAttributeProvider(member);SetPropertySettingsFromAttributes(property,member,member.Name,member.DeclaringType,memberSerialization,out bool allowNonPublicAccess);if(memberSerialization!=MemberSerialization.Fields){property.Readable=ReflectionUtils.CanReadMemberValue(member,allowNonPublicAccess);property.Writable=ReflectionUtils.CanSetMemberValue(member,allowNonPublicAccess,property.HasMemberAttribute);}else{property.Readable=true;property.Writable=true;}if(!IgnoreShouldSerializeMembers){property.ShouldSerialize=CreateShouldSerializeTest(member);}if(!IgnoreIsSpecifiedMembers){SetIsSpecifiedActions(property,member,allowNonPublicAccess);}return property;}private void SetPropertySettingsFromAttributes(JsonProperty property,object attributeProvider,string name,Type declaringType,MemberSerialization memberSerialization,out bool allowNonPublicAccess){
#if HAVE_DATA_CONTRACTS
DataContractAttribute?dataContractAttribute=JsonTypeReflector.GetDataContractAttribute(declaringType);MemberInfo?memberInfo=attributeProvider as MemberInfo;DataMemberAttribute?dataMemberAttribute;if(dataContractAttribute!=null&&memberInfo!=null){dataMemberAttribute=JsonTypeReflector.GetDataMemberAttribute((MemberInfo)memberInfo);}else{dataMemberAttribute=null;}
#endif
JsonPropertyAttribute?propertyAttribute=JsonTypeReflector.GetAttribute<JsonPropertyAttribute>(attributeProvider);JsonRequiredAttribute?requiredAttribute=JsonTypeReflector.GetAttribute<JsonRequiredAttribute>(attributeProvider);string mappedName;bool hasSpecifiedName;if(propertyAttribute?.PropertyName!=null){mappedName=propertyAttribute.PropertyName;hasSpecifiedName=true;}
#if HAVE_DATA_CONTRACTS
else if(dataMemberAttribute?.Name!=null){mappedName=dataMemberAttribute.Name;hasSpecifiedName=true;}
#endif
else{mappedName=name;hasSpecifiedName=false;}JsonContainerAttribute?containerAttribute=JsonTypeReflector.GetAttribute<JsonContainerAttribute>(declaringType);NamingStrategy?namingStrategy;if(propertyAttribute?.NamingStrategyType!=null){namingStrategy=JsonTypeReflector.CreateNamingStrategyInstance(propertyAttribute.NamingStrategyType,propertyAttribute.NamingStrategyParameters);}else if(containerAttribute?.NamingStrategyType!=null){namingStrategy=JsonTypeReflector.GetContainerNamingStrategy(containerAttribute);}else{namingStrategy=NamingStrategy;}if(namingStrategy!=null){property.PropertyName=namingStrategy.GetPropertyName(mappedName,hasSpecifiedName);}else{property.PropertyName=ResolvePropertyName(mappedName);}property.UnderlyingName=name;bool hasMemberAttribute=false;if(propertyAttribute!=null){property._required=propertyAttribute._required;property.Order=propertyAttribute._order;property.DefaultValueHandling=propertyAttribute._defaultValueHandling;hasMemberAttribute=true;property.NullValueHandling=propertyAttribute._nullValueHandling;property.ReferenceLoopHandling=propertyAttribute._referenceLoopHandling;property.ObjectCreationHandling=propertyAttribute._objectCreationHandling;property.TypeNameHandling=propertyAttribute._typeNameHandling;property.IsReference=propertyAttribute._isReference;property.ItemIsReference=propertyAttribute._itemIsReference;property.ItemConverter=propertyAttribute.ItemConverterType!=null?JsonTypeReflector.CreateJsonConverterInstance(propertyAttribute.ItemConverterType,propertyAttribute.ItemConverterParameters):null;property.ItemReferenceLoopHandling=propertyAttribute._itemReferenceLoopHandling;property.ItemTypeNameHandling=propertyAttribute._itemTypeNameHandling;}else{property.NullValueHandling=null;property.ReferenceLoopHandling=null;property.ObjectCreationHandling=null;property.TypeNameHandling=null;property.IsReference=null;property.ItemIsReference=null;property.ItemConverter=null;property.ItemReferenceLoopHandling=null;property.ItemTypeNameHandling=null;
#if HAVE_DATA_CONTRACTS
if(dataMemberAttribute!=null){property._required=(dataMemberAttribute.IsRequired)?Required.AllowNull:Required.Default;property.Order=(dataMemberAttribute.Order!=-1)?(int?)dataMemberAttribute.Order:null;property.DefaultValueHandling=(!dataMemberAttribute.EmitDefaultValue)?(DefaultValueHandling?)DefaultValueHandling.Ignore:null;hasMemberAttribute=true;}
#endif
}if(requiredAttribute!=null){property._required=Required.Always;hasMemberAttribute=true;}property.HasMemberAttribute=hasMemberAttribute;bool hasJsonIgnoreAttribute=JsonTypeReflector.GetAttribute<JsonIgnoreAttribute>(attributeProvider)!=null||JsonTypeReflector.GetAttribute<JsonExtensionDataAttribute>(attributeProvider)!=null
#if HAVE_NON_SERIALIZED_ATTRIBUTE
||JsonTypeReflector.IsNonSerializable(attributeProvider)
#endif
;if(memberSerialization!=MemberSerialization.OptIn){bool hasIgnoreDataMemberAttribute=false;
#if HAVE_IGNORE_DATA_MEMBER_ATTRIBUTE
hasIgnoreDataMemberAttribute=(JsonTypeReflector.GetAttribute<IgnoreDataMemberAttribute>(attributeProvider)!=null);
#endif
property.Ignored=(hasJsonIgnoreAttribute||hasIgnoreDataMemberAttribute);}else{property.Ignored=(hasJsonIgnoreAttribute||!hasMemberAttribute);}property.Converter=JsonTypeReflector.GetJsonConverter(attributeProvider);DefaultValueAttribute?defaultValueAttribute=JsonTypeReflector.GetAttribute<DefaultValueAttribute>(attributeProvider);if(defaultValueAttribute!=null){property.DefaultValue=defaultValueAttribute.Value;}allowNonPublicAccess=false;
if((DefaultMembersSearchFlags&BindingFlags.NonPublic)==BindingFlags.NonPublic){allowNonPublicAccess=true;}
if(hasMemberAttribute){allowNonPublicAccess=true;}if(memberSerialization==MemberSerialization.Fields){allowNonPublicAccess=true;}}private Predicate<object>?CreateShouldSerializeTest(MemberInfo member){MethodInfo shouldSerializeMethod=member.DeclaringType.GetMethod(JsonTypeReflector.ShouldSerializePrefix+member.Name,ReflectionUtils.EmptyTypes);if(shouldSerializeMethod==null||shouldSerializeMethod.ReturnType!=typeof(bool)){return null;}MethodCall<object,object?>shouldSerializeCall=JsonTypeReflector.ReflectionDelegateFactory.CreateMethodCall<object>(shouldSerializeMethod);return o=>(bool)shouldSerializeCall(o)!;}private void SetIsSpecifiedActions(JsonProperty property,MemberInfo member,bool allowNonPublicAccess){MemberInfo?specifiedMember=member.DeclaringType.GetProperty(member.Name+JsonTypeReflector.SpecifiedPostfix,BindingFlags.Instance|BindingFlags.Public|BindingFlags.NonPublic);if(specifiedMember==null){specifiedMember=member.DeclaringType.GetField(member.Name+JsonTypeReflector.SpecifiedPostfix,BindingFlags.Instance|BindingFlags.Public|BindingFlags.NonPublic);}if(specifiedMember==null||ReflectionUtils.GetMemberUnderlyingType(specifiedMember)!=typeof(bool)){return;}Func<object,object>specifiedPropertyGet=JsonTypeReflector.ReflectionDelegateFactory.CreateGet<object>(specifiedMember)!;property.GetIsSpecified=o=>(bool)specifiedPropertyGet(o);if(ReflectionUtils.CanSetMemberValue(specifiedMember,allowNonPublicAccess,false)){property.SetIsSpecified=JsonTypeReflector.ReflectionDelegateFactory.CreateSet<object>(specifiedMember);}}protected virtual string ResolvePropertyName(string propertyName){if(NamingStrategy!=null){return NamingStrategy.GetPropertyName(propertyName,false);}return propertyName;}protected virtual string ResolveExtensionDataName(string extensionDataName){if(NamingStrategy!=null){return NamingStrategy.GetExtensionDataName(extensionDataName);}return extensionDataName;}protected virtual string ResolveDictionaryKey(string dictionaryKey){if(NamingStrategy!=null){return NamingStrategy.GetDictionaryKey(dictionaryKey);}return ResolvePropertyName(dictionaryKey);}public string GetResolvedPropertyName(string propertyName){return ResolvePropertyName(propertyName);}}}namespace Newtonsoft.Json{public class DefaultJsonNameTable:JsonNameTable{private static readonly int HashCodeRandomizer;private int _count;private Entry[]_entries;private int _mask=31;static DefaultJsonNameTable(){HashCodeRandomizer=Environment.TickCount;}public DefaultJsonNameTable(){_entries=new Entry[_mask+1];}public override string?Get(char[]key,int start,int length){if(length==0){return string.Empty;}int hashCode=length+HashCodeRandomizer;hashCode+=(hashCode<<7)^key[start];int end=start+length;for(int i=start+1;i<end;i++){hashCode+=(hashCode<<7)^key[i];}hashCode-=hashCode>>17;hashCode-=hashCode>>11;hashCode-=hashCode>>5;var index=hashCode&_mask;var entries=_entries;for(Entry entry=entries[index];entry!=null;entry=entry.Next){if(entry.HashCode==hashCode&&TextEquals(entry.Value,key,start,length)){return entry.Value;}}return null;}public string Add(string key){if(key==null){throw new ArgumentNullException(nameof(key));}int length=key.Length;if(length==0){return string.Empty;}int hashCode=length+HashCodeRandomizer;for(int i=0;i<key.Length;i++){hashCode+=(hashCode<<7)^key[i];}hashCode-=hashCode>>17;hashCode-=hashCode>>11;hashCode-=hashCode>>5;for(Entry entry=_entries[hashCode&_mask];entry!=null;entry=entry.Next){if(entry.HashCode==hashCode&&entry.Value.Equals(key,StringComparison.Ordinal)){return entry.Value;}}return AddEntry(key,hashCode);}private string AddEntry(string str,int hashCode){int index=hashCode&_mask;Entry entry=new Entry(str,hashCode,_entries[index]);_entries[index]=entry;if(_count++==_mask){Grow();}return entry.Value;}private void Grow(){Entry[]entries=_entries;int newMask=(_mask*2)+1;Entry[]newEntries=new Entry[newMask+1];for(int i=0;i<entries.Length;i++){Entry next;for(Entry entry=entries[i];entry!=null;entry=next){int index=entry.HashCode&newMask;next=entry.Next;entry.Next=newEntries[index];newEntries[index]=entry;}}_entries=newEntries;_mask=newMask;}private static bool TextEquals(string str1,char[]str2,int str2Start,int str2Length){if(str1.Length!=str2Length){return false;}for(int i=0;i<str1.Length;i++){if(str1[i]!=str2[str2Start+i]){return false;}}return true;}private class Entry{internal readonly string Value;internal readonly int HashCode;internal Entry Next;internal Entry(string value,int hashCode,Entry next){Value=value;HashCode=hashCode;Next=next;}}}}namespace Newtonsoft.Json.Serialization{public class DefaultNamingStrategy:NamingStrategy{protected override string ResolvePropertyName(string name){return name;}}}namespace Newtonsoft.Json.Serialization{internal class DefaultReferenceResolver:IReferenceResolver{private int _referenceCount;private BidirectionalDictionary<string,object>GetMappings(object context){if(!(context is JsonSerializerInternalBase internalSD)){if(context is JsonSerializerProxy proxy){internalSD=proxy.GetInternalSD();}else{throw new JsonException("The DefaultReferenceResolver can only be used internally.");}}return internalSD.DefaultReferenceMappings;}public object ResolveReference(object context,string reference){GetMappings(context).TryGetByFirst(reference,out object value);return value;}public string GetReference(object context,object value){BidirectionalDictionary<string,object>mappings=GetMappings(context);if(!mappings.TryGetBySecond(value,out string reference)){_referenceCount++;reference=_referenceCount.ToString(CultureInfo.InvariantCulture);mappings.Set(reference,value);}return reference;}public void AddReference(object context,string reference,object value){GetMappings(context).Set(reference,value);}public bool IsReferenced(object context,object value){return GetMappings(context).TryGetBySecond(value,out _);}}}namespace Newtonsoft.Json.Serialization{public class DefaultSerializationBinder:
SerializationBinder,
ISerializationBinder{internal static readonly DefaultSerializationBinder Instance=new DefaultSerializationBinder();private readonly ThreadSafeStore<StructMultiKey<string?,string>,Type>_typeCache;public DefaultSerializationBinder(){_typeCache=new ThreadSafeStore<StructMultiKey<string?,string>,Type>(GetTypeFromTypeNameKey);}private Type GetTypeFromTypeNameKey(StructMultiKey<string?,string>typeNameKey){string?assemblyName=typeNameKey.Value1;string typeName=typeNameKey.Value2;if(assemblyName!=null){Assembly assembly;
#if !(DOTNET || PORTABLE40 || PORTABLE)
assembly=Assembly.LoadWithPartialName(assemblyName);
#elif DOTNET || PORTABLE
assembly=Assembly.Load(new AssemblyName(assemblyName));
#else
assembly=Assembly.Load(assemblyName);
#endif
#if HAVE_APP_DOMAIN
if(assembly==null){Assembly[]loadedAssemblies=AppDomain.CurrentDomain.GetAssemblies();foreach(Assembly a in loadedAssemblies){if(a.FullName==assemblyName||a.GetName().Name==assemblyName){assembly=a;break;}}}
#endif
if(assembly==null){throw new JsonSerializationException("Could not load assembly '{0}'.".FormatWith(CultureInfo.InvariantCulture,assemblyName));}Type?type=assembly.GetType(typeName);if(type==null){if(typeName.IndexOf('`')>=0){try{type=GetGenericTypeFromTypeName(typeName,assembly);}catch(Exception ex){throw new JsonSerializationException("Could not find type '{0}' in assembly '{1}'.".FormatWith(CultureInfo.InvariantCulture,typeName,assembly.FullName),ex);}}if(type==null){throw new JsonSerializationException("Could not find type '{0}' in assembly '{1}'.".FormatWith(CultureInfo.InvariantCulture,typeName,assembly.FullName));}}return type;}else{return Type.GetType(typeName);}}private Type?GetGenericTypeFromTypeName(string typeName,Assembly assembly){Type?type=null;int openBracketIndex=typeName.IndexOf('[');if(openBracketIndex>=0){string genericTypeDefName=typeName.Substring(0,openBracketIndex);Type genericTypeDef=assembly.GetType(genericTypeDefName);if(genericTypeDef!=null){List<Type>genericTypeArguments=new List<Type>();int scope=0;int typeArgStartIndex=0;int endIndex=typeName.Length-1;for(int i=openBracketIndex+1;i<endIndex;++i){char current=typeName[i];switch(current){case'[':if(scope==0){typeArgStartIndex=i+1;}++scope;break;case']':--scope;if(scope==0){string typeArgAssemblyQualifiedName=typeName.Substring(typeArgStartIndex,i-typeArgStartIndex);StructMultiKey<string?,string>typeNameKey=ReflectionUtils.SplitFullyQualifiedTypeName(typeArgAssemblyQualifiedName);genericTypeArguments.Add(GetTypeByName(typeNameKey));}break;}}type=genericTypeDef.MakeGenericType(genericTypeArguments.ToArray());}}return type;}private Type GetTypeByName(StructMultiKey<string?,string>typeNameKey){return _typeCache.Get(typeNameKey);}public override Type BindToType(string?assemblyName,string typeName){return GetTypeByName(new StructMultiKey<string?,string>(assemblyName,typeName));}public
#if HAVE_SERIALIZATION_BINDER_BIND_TO_NAME
override
#endif
void BindToName(Type serializedType,out string?assemblyName,out string?typeName){
#if !HAVE_FULL_REFLECTION
assemblyName=serializedType.GetTypeInfo().Assembly.FullName;typeName=serializedType.FullName;
#else
assemblyName=serializedType.Assembly.FullName;typeName=serializedType.FullName;
#endif
}}}namespace Newtonsoft.Json{[Flags]public enum DefaultValueHandling{Include=0,Ignore=1,Populate=2,IgnoreAndPopulate=Ignore|Populate}}
#if HAVE_TRACE_WRITER
using DiagnosticsTrace=System.Diagnostics.Trace;namespace Newtonsoft.Json.Serialization{public class DiagnosticsTraceWriter:ITraceWriter{public TraceLevel LevelFilter{get;set;}private TraceEventType GetTraceEventType(TraceLevel level){switch(level){case TraceLevel.Error:return TraceEventType.Error;case TraceLevel.Warning:return TraceEventType.Warning;case TraceLevel.Info:return TraceEventType.Information;case TraceLevel.Verbose:return TraceEventType.Verbose;default:throw new ArgumentOutOfRangeException(nameof(level));}}public void Trace(TraceLevel level,string message,Exception?ex){if(level==TraceLevel.Off){return;}TraceEventCache eventCache=new TraceEventCache();TraceEventType traceEventType=GetTraceEventType(level);foreach(TraceListener listener in DiagnosticsTrace.Listeners){if(!listener.IsThreadSafe){lock(listener){listener.TraceEvent(eventCache,"SD",traceEventType,0,message);}}else{listener.TraceEvent(eventCache,"SD",traceEventType,0,message);}if(DiagnosticsTrace.AutoFlush){listener.Flush();}}}}}
#endif
namespace Newtonsoft.Json.Utilities{internal interface IWrappedDictionary:IDictionary{object UnderlyingDictionary{get;}}internal class DictionaryWrapper<TKey,TValue>:IDictionary<TKey,TValue>,IWrappedDictionary{private readonly IDictionary?_dictionary;private readonly IDictionary<TKey,TValue>?_genericDictionary;
#if HAVE_READ_ONLY_COLLECTIONS
private readonly IReadOnlyDictionary<TKey,TValue>?_readOnlyDictionary;
#endif
private object?_syncRoot;public DictionaryWrapper(IDictionary dictionary){ValidationUtils.ArgumentNotNull(dictionary,nameof(dictionary));_dictionary=dictionary;}public DictionaryWrapper(IDictionary<TKey,TValue>dictionary){ValidationUtils.ArgumentNotNull(dictionary,nameof(dictionary));_genericDictionary=dictionary;}
#if HAVE_READ_ONLY_COLLECTIONS
public DictionaryWrapper(IReadOnlyDictionary<TKey,TValue>dictionary){ValidationUtils.ArgumentNotNull(dictionary,nameof(dictionary));_readOnlyDictionary=dictionary;}
#endif
internal IDictionary<TKey,TValue>GenericDictionary{get{MiscellaneousUtils.Assert(_genericDictionary!=null);return _genericDictionary;}}public void Add(TKey key,TValue value){if(_dictionary!=null){_dictionary.Add(key,value);}else if(_genericDictionary!=null){_genericDictionary.Add(key,value);}else{throw new NotSupportedException();}}public bool ContainsKey(TKey key){if(_dictionary!=null){return _dictionary.Contains(key);}
#if HAVE_READ_ONLY_COLLECTIONS
else if(_readOnlyDictionary!=null){return _readOnlyDictionary.ContainsKey(key);}
#endif
else{return GenericDictionary.ContainsKey(key);}}public ICollection<TKey>Keys{get{if(_dictionary!=null){return _dictionary.Keys.Cast<TKey>().ToList();}
#if HAVE_READ_ONLY_COLLECTIONS
else if(_readOnlyDictionary!=null){return _readOnlyDictionary.Keys.ToList();}
#endif
else{return GenericDictionary.Keys;}}}public bool Remove(TKey key){if(_dictionary!=null){if(_dictionary.Contains(key)){_dictionary.Remove(key);return true;}else{return false;}}
#if HAVE_READ_ONLY_COLLECTIONS
else if(_readOnlyDictionary!=null){throw new NotSupportedException();}
#endif
else{return GenericDictionary.Remove(key);}}
public bool TryGetValue(TKey key,out TValue?value)
{if(_dictionary!=null){if(!_dictionary.Contains(key)){
value=default;
return false;}else{value=(TValue)_dictionary[key];return true;}}
#if HAVE_READ_ONLY_COLLECTIONS
else if(_readOnlyDictionary!=null){throw new NotSupportedException();}
#endif
else{return GenericDictionary.TryGetValue(key,out value);}}public ICollection<TValue>Values{get{if(_dictionary!=null){return _dictionary.Values.Cast<TValue>().ToList();}
#if HAVE_READ_ONLY_COLLECTIONS
else if(_readOnlyDictionary!=null){return _readOnlyDictionary.Values.ToList();}
#endif
else{return GenericDictionary.Values;}}}public TValue this[TKey key]{get{if(_dictionary!=null){return(TValue)_dictionary[key];}
#if HAVE_READ_ONLY_COLLECTIONS
else if(_readOnlyDictionary!=null){return _readOnlyDictionary[key];}
#endif
else{return GenericDictionary[key];}}set{if(_dictionary!=null){_dictionary[key]=value;}
#if HAVE_READ_ONLY_COLLECTIONS
else if(_readOnlyDictionary!=null){throw new NotSupportedException();}
#endif
else{GenericDictionary[key]=value;}}}public void Add(KeyValuePair<TKey,TValue>item){if(_dictionary!=null){((IList)_dictionary).Add(item);}
#if HAVE_READ_ONLY_COLLECTIONS
else if(_readOnlyDictionary!=null){throw new NotSupportedException();}
#endif
else{_genericDictionary?.Add(item);}}public void Clear(){if(_dictionary!=null){_dictionary.Clear();}
#if HAVE_READ_ONLY_COLLECTIONS
else if(_readOnlyDictionary!=null){throw new NotSupportedException();}
#endif
else{GenericDictionary.Clear();}}public bool Contains(KeyValuePair<TKey,TValue>item){if(_dictionary!=null){return((IList)_dictionary).Contains(item);}
#if HAVE_READ_ONLY_COLLECTIONS
else if(_readOnlyDictionary!=null){return _readOnlyDictionary.Contains(item);}
#endif
else{return GenericDictionary.Contains(item);}}public void CopyTo(KeyValuePair<TKey,TValue>[]array,int arrayIndex){if(_dictionary!=null){IDictionaryEnumerator e=_dictionary.GetEnumerator();try{while(e.MoveNext()){DictionaryEntry entry=e.Entry;array[arrayIndex++]=new KeyValuePair<TKey,TValue>((TKey)entry.Key,(TValue)entry.Value);}}finally{(e as IDisposable)?.Dispose();}}
#if HAVE_READ_ONLY_COLLECTIONS
else if(_readOnlyDictionary!=null){throw new NotSupportedException();}
#endif
else{GenericDictionary.CopyTo(array,arrayIndex);}}public int Count{get{if(_dictionary!=null){return _dictionary.Count;}
#if HAVE_READ_ONLY_COLLECTIONS
else if(_readOnlyDictionary!=null){return _readOnlyDictionary.Count;}
#endif
else{return GenericDictionary.Count;}}}public bool IsReadOnly{get{if(_dictionary!=null){return _dictionary.IsReadOnly;}
#if HAVE_READ_ONLY_COLLECTIONS
else if(_readOnlyDictionary!=null){return true;}
#endif
else{return GenericDictionary.IsReadOnly;}}}public bool Remove(KeyValuePair<TKey,TValue>item){if(_dictionary!=null){if(_dictionary.Contains(item.Key)){object value=_dictionary[item.Key];if(Equals(value,item.Value)){_dictionary.Remove(item.Key);return true;}else{return false;}}else{return true;}}
#if HAVE_READ_ONLY_COLLECTIONS
else if(_readOnlyDictionary!=null){throw new NotSupportedException();}
#endif
else{return GenericDictionary.Remove(item);}}public IEnumerator<KeyValuePair<TKey,TValue>>GetEnumerator(){if(_dictionary!=null){return _dictionary.Cast<DictionaryEntry>().Select(de=>new KeyValuePair<TKey,TValue>((TKey)de.Key,(TValue)de.Value)).GetEnumerator();}
#if HAVE_READ_ONLY_COLLECTIONS
else if(_readOnlyDictionary!=null){return _readOnlyDictionary.GetEnumerator();}
#endif
else{return GenericDictionary.GetEnumerator();}}IEnumerator IEnumerable.GetEnumerator(){return GetEnumerator();}void IDictionary.Add(object key,object value){if(_dictionary!=null){_dictionary.Add(key,value);}
#if HAVE_READ_ONLY_COLLECTIONS
else if(_readOnlyDictionary!=null){throw new NotSupportedException();}
#endif
else{GenericDictionary.Add((TKey)key,(TValue)value);}}object?IDictionary.this[object key]{get{if(_dictionary!=null){return _dictionary[key];}
#if HAVE_READ_ONLY_COLLECTIONS
else if(_readOnlyDictionary!=null){return _readOnlyDictionary[(TKey)key];}
#endif
else{return GenericDictionary[(TKey)key];}}set{if(_dictionary!=null){_dictionary[key]=value;}
#if HAVE_READ_ONLY_COLLECTIONS
else if(_readOnlyDictionary!=null){throw new NotSupportedException();}
#endif
else{
GenericDictionary[(TKey)key]=(TValue)value;
}}}private readonly struct DictionaryEnumerator<TEnumeratorKey,TEnumeratorValue>:IDictionaryEnumerator{private readonly IEnumerator<KeyValuePair<TEnumeratorKey,TEnumeratorValue>>_e;public DictionaryEnumerator(IEnumerator<KeyValuePair<TEnumeratorKey,TEnumeratorValue>>e){ValidationUtils.ArgumentNotNull(e,nameof(e));_e=e;}public DictionaryEntry Entry=>(DictionaryEntry)Current;public object Key=>Entry.Key;public object Value=>Entry.Value;public object Current=>new DictionaryEntry(_e.Current.Key,_e.Current.Value);public bool MoveNext(){return _e.MoveNext();}public void Reset(){_e.Reset();}}IDictionaryEnumerator IDictionary.GetEnumerator(){if(_dictionary!=null){return _dictionary.GetEnumerator();}
#if HAVE_READ_ONLY_COLLECTIONS
else if(_readOnlyDictionary!=null){return new DictionaryEnumerator<TKey,TValue>(_readOnlyDictionary.GetEnumerator());}
#endif
else{return new DictionaryEnumerator<TKey,TValue>(GenericDictionary.GetEnumerator());}}bool IDictionary.Contains(object key){if(_genericDictionary!=null){return _genericDictionary.ContainsKey((TKey)key);}
#if HAVE_READ_ONLY_COLLECTIONS
else if(_readOnlyDictionary!=null){return _readOnlyDictionary.ContainsKey((TKey)key);}
#endif
else{return _dictionary!.Contains(key);}}bool IDictionary.IsFixedSize{get{if(_genericDictionary!=null){return false;}
#if HAVE_READ_ONLY_COLLECTIONS
else if(_readOnlyDictionary!=null){return true;}
#endif
else{return _dictionary!.IsFixedSize;}}}ICollection IDictionary.Keys{get{if(_genericDictionary!=null){return _genericDictionary.Keys.ToList();}
#if HAVE_READ_ONLY_COLLECTIONS
else if(_readOnlyDictionary!=null){return _readOnlyDictionary.Keys.ToList();}
#endif
else{return _dictionary!.Keys;}}}public void Remove(object key){if(_dictionary!=null){_dictionary.Remove(key);}
#if HAVE_READ_ONLY_COLLECTIONS
else if(_readOnlyDictionary!=null){throw new NotSupportedException();}
#endif
else{GenericDictionary.Remove((TKey)key);}}ICollection IDictionary.Values{get{if(_genericDictionary!=null){return _genericDictionary.Values.ToList();}
#if HAVE_READ_ONLY_COLLECTIONS
else if(_readOnlyDictionary!=null){return _readOnlyDictionary.Values.ToList();}
#endif
else{return _dictionary!.Values;}}}void ICollection.CopyTo(Array array,int index){if(_dictionary!=null){_dictionary.CopyTo(array,index);}
#if HAVE_READ_ONLY_COLLECTIONS
else if(_readOnlyDictionary!=null){throw new NotSupportedException();}
#endif
else{GenericDictionary.CopyTo((KeyValuePair<TKey,TValue>[])array,index);}}bool ICollection.IsSynchronized{get{if(_dictionary!=null){return _dictionary.IsSynchronized;}else{return false;}}}object ICollection.SyncRoot{get{if(_syncRoot==null){Interlocked.CompareExchange(ref _syncRoot,new object(),null);}return _syncRoot;}}public object UnderlyingDictionary{get{if(_dictionary!=null){return _dictionary;}
#if HAVE_READ_ONLY_COLLECTIONS
else if(_readOnlyDictionary!=null){return _readOnlyDictionary;}
#endif
else{return GenericDictionary;}}}}}
#if HAVE_FSHARP_TYPES
#if !HAVE_LINQ
#else
#endif
namespace Newtonsoft.Json.Converters{public class DiscriminatedUnionConverter:JsonConverter{internal class Union{public readonly FSharpFunction TagReader;public readonly List<UnionCase>Cases;public Union(FSharpFunction tagReader,List<UnionCase>cases){TagReader=tagReader;Cases=cases;}}internal class UnionCase{public readonly int Tag;public readonly string Name;public readonly PropertyInfo[]Fields;public readonly FSharpFunction FieldReader;public readonly FSharpFunction Constructor;public UnionCase(int tag,string name,PropertyInfo[]fields,FSharpFunction fieldReader,FSharpFunction constructor){Tag=tag;Name=name;Fields=fields;FieldReader=fieldReader;Constructor=constructor;}}private const string CasePropertyName="Case";private const string FieldsPropertyName="Fields";private static readonly ThreadSafeStore<Type,Union>UnionCache=new ThreadSafeStore<Type,Union>(CreateUnion);private static readonly ThreadSafeStore<Type,Type>UnionTypeLookupCache=new ThreadSafeStore<Type,Type>(CreateUnionTypeLookup);private static Type CreateUnionTypeLookup(Type t){object[]cases=(object[])FSharpUtils.Instance.GetUnionCases(null,t,null)!;object caseInfo=cases.First();Type unionType=(Type)FSharpUtils.Instance.GetUnionCaseInfoDeclaringType(caseInfo)!;return unionType;}private static Union CreateUnion(Type t){Union u=new Union((FSharpFunction)FSharpUtils.Instance.PreComputeUnionTagReader(null,t,null),new List<UnionCase>());object[]cases=(object[])FSharpUtils.Instance.GetUnionCases(null,t,null)!;foreach(object unionCaseInfo in cases){UnionCase unionCase=new UnionCase((int)FSharpUtils.Instance.GetUnionCaseInfoTag(unionCaseInfo),(string)FSharpUtils.Instance.GetUnionCaseInfoName(unionCaseInfo),(PropertyInfo[])FSharpUtils.Instance.GetUnionCaseInfoFields(unionCaseInfo)!,(FSharpFunction)FSharpUtils.Instance.PreComputeUnionReader(null,unionCaseInfo,null),(FSharpFunction)FSharpUtils.Instance.PreComputeUnionConstructor(null,unionCaseInfo,null));u.Cases.Add(unionCase);}return u;}public override void WriteJson(JsonWriter writer,object?value,JsonSerializer serializer){if(value==null){writer.WriteNull();return;}DefaultContractResolver?resolver=serializer.ContractResolver as DefaultContractResolver;Type unionType=UnionTypeLookupCache.Get(value.GetType());Union union=UnionCache.Get(unionType);int tag=(int)union.TagReader.Invoke(value);UnionCase caseInfo=union.Cases.Single(c=>c.Tag==tag);writer.WriteStartObject();writer.WritePropertyName((resolver!=null)?resolver.GetResolvedPropertyName(CasePropertyName):CasePropertyName);writer.WriteValue(caseInfo.Name);if(caseInfo.Fields!=null&&caseInfo.Fields.Length>0){object[]fields=(object[])caseInfo.FieldReader.Invoke(value)!;writer.WritePropertyName((resolver!=null)?resolver.GetResolvedPropertyName(FieldsPropertyName):FieldsPropertyName);writer.WriteStartArray();foreach(object field in fields){serializer.Serialize(writer,field);}writer.WriteEndArray();}writer.WriteEndObject();}public override object?ReadJson(JsonReader reader,Type objectType,object?existingValue,JsonSerializer serializer){if(reader.TokenType==JsonToken.Null){return null;}UnionCase?caseInfo=null;string?caseName=null;JArray?fields=null;reader.ReadAndAssert();while(reader.TokenType==JsonToken.PropertyName){string propertyName=reader.Value!.ToString();if(string.Equals(propertyName,CasePropertyName,StringComparison.OrdinalIgnoreCase)){reader.ReadAndAssert();Union union=UnionCache.Get(objectType);caseName=reader.Value!.ToString();caseInfo=union.Cases.SingleOrDefault(c=>c.Name==caseName);if(caseInfo==null){throw JsonSerializationException.Create(reader,"No union type found with the name '{0}'.".FormatWith(CultureInfo.InvariantCulture,caseName));}}else if(string.Equals(propertyName,FieldsPropertyName,StringComparison.OrdinalIgnoreCase)){reader.ReadAndAssert();if(reader.TokenType!=JsonToken.StartArray){throw JsonSerializationException.Create(reader,"Union fields must been an array.");}fields=(JArray)JToken.ReadFrom(reader);}else{throw JsonSerializationException.Create(reader,"Unexpected property '{0}' found when reading union.".FormatWith(CultureInfo.InvariantCulture,propertyName));}reader.ReadAndAssert();}if(caseInfo==null){throw JsonSerializationException.Create(reader,"No '{0}' property with union name found.".FormatWith(CultureInfo.InvariantCulture,CasePropertyName));}object?[]typedFieldValues=new object?[caseInfo.Fields.Length];if(caseInfo.Fields.Length>0&&fields==null){throw JsonSerializationException.Create(reader,"No '{0}' property with union fields found.".FormatWith(CultureInfo.InvariantCulture,FieldsPropertyName));}if(fields!=null){if(caseInfo.Fields.Length!=fields.Count){throw JsonSerializationException.Create(reader,"The number of field values does not match the number of properties defined by union '{0}'.".FormatWith(CultureInfo.InvariantCulture,caseName));}for(int i=0;i<fields.Count;i++){JToken t=fields[i];PropertyInfo fieldProperty=caseInfo.Fields[i];typedFieldValues[i]=t.ToObject(fieldProperty.PropertyType,serializer);}}object[]args={typedFieldValues};return caseInfo.Constructor.Invoke(args);}public override bool CanConvert(Type objectType){if(typeof(IEnumerable).IsAssignableFrom(objectType)){return false;}object[]attributes;
#if HAVE_FULL_REFLECTION
attributes=objectType.GetCustomAttributes(true);
#else
attributes=objectType.GetTypeInfo().GetCustomAttributes(true).ToArray();
#endif
bool isFSharpType=false;foreach(object attribute in attributes){Type attributeType=attribute.GetType();if(attributeType.FullName=="Microsoft.FSharp.Core.CompilationMappingAttribute"){FSharpUtils.EnsureInitialized(attributeType.Assembly());isFSharpType=true;break;}}if(!isFSharpType){return false;}return(bool)FSharpUtils.Instance.IsUnion(null,objectType,null);}}}
#endif
namespace Newtonsoft.Json.Linq{public enum DuplicatePropertyNameHandling{Replace=0,Ignore=1,Error=2}}
#if HAVE_DYNAMIC
namespace Newtonsoft.Json.Utilities{internal class DynamicProxy<T>{public virtual IEnumerable<string>GetDynamicMemberNames(T instance){return CollectionUtils.ArrayEmpty<string>();}public virtual bool TryBinaryOperation(T instance,BinaryOperationBinder binder,object arg,out object?result){result=null;return false;}public virtual bool TryConvert(T instance,ConvertBinder binder,out object?result){result=null;return false;}public virtual bool TryCreateInstance(T instance,CreateInstanceBinder binder,object[]args,out object?result){result=null;return false;}public virtual bool TryDeleteIndex(T instance,DeleteIndexBinder binder,object[]indexes){return false;}public virtual bool TryDeleteMember(T instance,DeleteMemberBinder binder){return false;}public virtual bool TryGetIndex(T instance,GetIndexBinder binder,object[]indexes,out object?result){result=null;return false;}public virtual bool TryGetMember(T instance,GetMemberBinder binder,out object?result){result=null;return false;}public virtual bool TryInvoke(T instance,InvokeBinder binder,object[]args,out object?result){result=null;return false;}public virtual bool TryInvokeMember(T instance,InvokeMemberBinder binder,object[]args,out object?result){result=null;return false;}public virtual bool TrySetIndex(T instance,SetIndexBinder binder,object[]indexes,object value){return false;}public virtual bool TrySetMember(T instance,SetMemberBinder binder,object value){return false;}public virtual bool TryUnaryOperation(T instance,UnaryOperationBinder binder,out object?result){result=null;return false;}}}
#endif
#if HAVE_DYNAMIC
namespace Newtonsoft.Json.Utilities{internal sealed class DynamicProxyMetaObject<T>:DynamicMetaObject{private readonly DynamicProxy<T>_proxy;internal DynamicProxyMetaObject(Expression expression,T value,DynamicProxy<T>proxy):base(expression,BindingRestrictions.Empty,value){_proxy=proxy;}private bool IsOverridden(string method){return ReflectionUtils.IsMethodOverridden(_proxy.GetType(),typeof(DynamicProxy<T>),method);}public override DynamicMetaObject BindGetMember(GetMemberBinder binder){return IsOverridden(nameof(DynamicProxy<T>.TryGetMember))?CallMethodWithResult(nameof(DynamicProxy<T>.TryGetMember),binder,NoArgs,e=>binder.FallbackGetMember(this,e)):base.BindGetMember(binder);}public override DynamicMetaObject BindSetMember(SetMemberBinder binder,DynamicMetaObject value){return IsOverridden(nameof(DynamicProxy<T>.TrySetMember))?CallMethodReturnLast(nameof(DynamicProxy<T>.TrySetMember),binder,GetArgs(value),e=>binder.FallbackSetMember(this,value,e)):base.BindSetMember(binder,value);}public override DynamicMetaObject BindDeleteMember(DeleteMemberBinder binder){return IsOverridden(nameof(DynamicProxy<T>.TryDeleteMember))?CallMethodNoResult(nameof(DynamicProxy<T>.TryDeleteMember),binder,NoArgs,e=>binder.FallbackDeleteMember(this,e)):base.BindDeleteMember(binder);}public override DynamicMetaObject BindConvert(ConvertBinder binder){return IsOverridden(nameof(DynamicProxy<T>.TryConvert))?CallMethodWithResult(nameof(DynamicProxy<T>.TryConvert),binder,NoArgs,e=>binder.FallbackConvert(this,e)):base.BindConvert(binder);}public override DynamicMetaObject BindInvokeMember(InvokeMemberBinder binder,DynamicMetaObject[]args){if(!IsOverridden(nameof(DynamicProxy<T>.TryInvokeMember))){return base.BindInvokeMember(binder,args);}Fallback fallback=e=>binder.FallbackInvokeMember(this,args,e);return BuildCallMethodWithResult(nameof(DynamicProxy<T>.TryInvokeMember),binder,GetArgArray(args),BuildCallMethodWithResult(nameof(DynamicProxy<T>.TryGetMember),new GetBinderAdapter(binder),NoArgs,fallback(null),e=>binder.FallbackInvoke(e,args,null)),null);}public override DynamicMetaObject BindCreateInstance(CreateInstanceBinder binder,DynamicMetaObject[]args){return IsOverridden(nameof(DynamicProxy<T>.TryCreateInstance))?CallMethodWithResult(nameof(DynamicProxy<T>.TryCreateInstance),binder,GetArgArray(args),e=>binder.FallbackCreateInstance(this,args,e)):base.BindCreateInstance(binder,args);}public override DynamicMetaObject BindInvoke(InvokeBinder binder,DynamicMetaObject[]args){return IsOverridden(nameof(DynamicProxy<T>.TryInvoke))?CallMethodWithResult(nameof(DynamicProxy<T>.TryInvoke),binder,GetArgArray(args),e=>binder.FallbackInvoke(this,args,e)):base.BindInvoke(binder,args);}public override DynamicMetaObject BindBinaryOperation(BinaryOperationBinder binder,DynamicMetaObject arg){return IsOverridden(nameof(DynamicProxy<T>.TryBinaryOperation))?CallMethodWithResult(nameof(DynamicProxy<T>.TryBinaryOperation),binder,GetArgs(arg),e=>binder.FallbackBinaryOperation(this,arg,e)):base.BindBinaryOperation(binder,arg);}public override DynamicMetaObject BindUnaryOperation(UnaryOperationBinder binder){return IsOverridden(nameof(DynamicProxy<T>.TryUnaryOperation))?CallMethodWithResult(nameof(DynamicProxy<T>.TryUnaryOperation),binder,NoArgs,e=>binder.FallbackUnaryOperation(this,e)):base.BindUnaryOperation(binder);}public override DynamicMetaObject BindGetIndex(GetIndexBinder binder,DynamicMetaObject[]indexes){return IsOverridden(nameof(DynamicProxy<T>.TryGetIndex))?CallMethodWithResult(nameof(DynamicProxy<T>.TryGetIndex),binder,GetArgArray(indexes),e=>binder.FallbackGetIndex(this,indexes,e)):base.BindGetIndex(binder,indexes);}public override DynamicMetaObject BindSetIndex(SetIndexBinder binder,DynamicMetaObject[]indexes,DynamicMetaObject value){return IsOverridden(nameof(DynamicProxy<T>.TrySetIndex))?CallMethodReturnLast(nameof(DynamicProxy<T>.TrySetIndex),binder,GetArgArray(indexes,value),e=>binder.FallbackSetIndex(this,indexes,value,e)):base.BindSetIndex(binder,indexes,value);}public override DynamicMetaObject BindDeleteIndex(DeleteIndexBinder binder,DynamicMetaObject[]indexes){return IsOverridden(nameof(DynamicProxy<T>.TryDeleteIndex))?CallMethodNoResult(nameof(DynamicProxy<T>.TryDeleteIndex),binder,GetArgArray(indexes),e=>binder.FallbackDeleteIndex(this,indexes,e)):base.BindDeleteIndex(binder,indexes);}private delegate DynamicMetaObject Fallback(DynamicMetaObject?errorSuggestion);private static Expression[]NoArgs=>CollectionUtils.ArrayEmpty<Expression>();private static IEnumerable<Expression>GetArgs(params DynamicMetaObject[]args){return args.Select(arg=>{Expression exp=arg.Expression;return exp.Type.IsValueType()?Expression.Convert(exp,typeof(object)):exp;});}private static Expression[]GetArgArray(DynamicMetaObject[]args){return new[]{Expression.NewArrayInit(typeof(object),GetArgs(args))};}private static Expression[]GetArgArray(DynamicMetaObject[]args,DynamicMetaObject value){Expression exp=value.Expression;return new[]{Expression.NewArrayInit(typeof(object),GetArgs(args)),exp.Type.IsValueType()?Expression.Convert(exp,typeof(object)):exp};}private static ConstantExpression Constant(DynamicMetaObjectBinder binder){Type t=binder.GetType();while(!t.IsVisible()){t=t.BaseType();}return Expression.Constant(binder,t);}private DynamicMetaObject CallMethodWithResult(string methodName,DynamicMetaObjectBinder binder,IEnumerable<Expression>args,Fallback fallback,Fallback?fallbackInvoke=null){DynamicMetaObject fallbackResult=fallback(null);return BuildCallMethodWithResult(methodName,binder,args,fallbackResult,fallbackInvoke);}private DynamicMetaObject BuildCallMethodWithResult(string methodName,DynamicMetaObjectBinder binder,IEnumerable<Expression>args,DynamicMetaObject fallbackResult,Fallback?fallbackInvoke){ParameterExpression result=Expression.Parameter(typeof(object),null);IList<Expression>callArgs=new List<Expression>();callArgs.Add(Expression.Convert(Expression,typeof(T)));callArgs.Add(Constant(binder));callArgs.AddRange(args);callArgs.Add(result);DynamicMetaObject resultMetaObject=new DynamicMetaObject(result,BindingRestrictions.Empty);if(binder.ReturnType!=typeof(object)){UnaryExpression convert=Expression.Convert(resultMetaObject.Expression,binder.ReturnType);resultMetaObject=new DynamicMetaObject(convert,resultMetaObject.Restrictions);}if(fallbackInvoke!=null){resultMetaObject=fallbackInvoke(resultMetaObject);}DynamicMetaObject callDynamic=new DynamicMetaObject(Expression.Block(new[]{result},Expression.Condition(Expression.Call(Expression.Constant(_proxy),typeof(DynamicProxy<T>).GetMethod(methodName),callArgs),resultMetaObject.Expression,fallbackResult.Expression,binder.ReturnType)),GetRestrictions().Merge(resultMetaObject.Restrictions).Merge(fallbackResult.Restrictions));return callDynamic;}private DynamicMetaObject CallMethodReturnLast(string methodName,DynamicMetaObjectBinder binder,IEnumerable<Expression>args,Fallback fallback){DynamicMetaObject fallbackResult=fallback(null);ParameterExpression result=Expression.Parameter(typeof(object),null);IList<Expression>callArgs=new List<Expression>();callArgs.Add(Expression.Convert(Expression,typeof(T)));callArgs.Add(Constant(binder));callArgs.AddRange(args);callArgs[callArgs.Count-1]=Expression.Assign(result,callArgs[callArgs.Count-1]);return new DynamicMetaObject(Expression.Block(new[]{result},Expression.Condition(Expression.Call(Expression.Constant(_proxy),typeof(DynamicProxy<T>).GetMethod(methodName),callArgs),result,fallbackResult.Expression,typeof(object))),GetRestrictions().Merge(fallbackResult.Restrictions));}private DynamicMetaObject CallMethodNoResult(string methodName,DynamicMetaObjectBinder binder,Expression[]args,Fallback fallback){DynamicMetaObject fallbackResult=fallback(null);IList<Expression>callArgs=new List<Expression>();callArgs.Add(Expression.Convert(Expression,typeof(T)));callArgs.Add(Constant(binder));callArgs.AddRange(args);return new DynamicMetaObject(Expression.Condition(Expression.Call(Expression.Constant(_proxy),typeof(DynamicProxy<T>).GetMethod(methodName),callArgs),Expression.Empty(),fallbackResult.Expression,typeof(void)),GetRestrictions().Merge(fallbackResult.Restrictions));}private BindingRestrictions GetRestrictions(){return(Value==null&&HasValue)?BindingRestrictions.GetInstanceRestriction(Expression,null):BindingRestrictions.GetTypeRestriction(Expression,LimitType);}public override IEnumerable<string>GetDynamicMemberNames(){return _proxy.GetDynamicMemberNames((T)Value);}private sealed class GetBinderAdapter:GetMemberBinder{internal GetBinderAdapter(InvokeMemberBinder binder):base(binder.Name,binder.IgnoreCase){}public override DynamicMetaObject FallbackGetMember(DynamicMetaObject target,DynamicMetaObject errorSuggestion){throw new NotSupportedException();}}}}
#endif
#if HAVE_REFLECTION_EMIT
#if !HAVE_LINQ
#endif
namespace Newtonsoft.Json.Utilities{internal class DynamicReflectionDelegateFactory:ReflectionDelegateFactory{internal static DynamicReflectionDelegateFactory Instance{get;}=new DynamicReflectionDelegateFactory();private static DynamicMethod CreateDynamicMethod(string name,Type?returnType,Type[]parameterTypes,Type owner){DynamicMethod dynamicMethod=!owner.IsInterface()?new DynamicMethod(name,returnType,parameterTypes,owner,true):new DynamicMethod(name,returnType,parameterTypes,owner.Module,true);return dynamicMethod;}public override ObjectConstructor<object>CreateParameterizedConstructor(MethodBase method){DynamicMethod dynamicMethod=CreateDynamicMethod(method.ToString(),typeof(object),new[]{typeof(object[])},method.DeclaringType);ILGenerator generator=dynamicMethod.GetILGenerator();GenerateCreateMethodCallIL(method,generator,0);return(ObjectConstructor<object>)dynamicMethod.CreateDelegate(typeof(ObjectConstructor<object>));}public override MethodCall<T,object?>CreateMethodCall<T>(MethodBase method){DynamicMethod dynamicMethod=CreateDynamicMethod(method.ToString(),typeof(object),new[]{typeof(object),typeof(object[])},method.DeclaringType);ILGenerator generator=dynamicMethod.GetILGenerator();GenerateCreateMethodCallIL(method,generator,1);return(MethodCall<T,object?>)dynamicMethod.CreateDelegate(typeof(MethodCall<T,object?>));}private void GenerateCreateMethodCallIL(MethodBase method,ILGenerator generator,int argsIndex){ParameterInfo[]args=method.GetParameters();Label argsOk=generator.DefineLabel();generator.Emit(OpCodes.Ldarg,argsIndex);generator.Emit(OpCodes.Ldlen);generator.Emit(OpCodes.Ldc_I4,args.Length);generator.Emit(OpCodes.Beq,argsOk);generator.Emit(OpCodes.Newobj,typeof(TargetParameterCountException).GetConstructor(ReflectionUtils.EmptyTypes));generator.Emit(OpCodes.Throw);generator.MarkLabel(argsOk);if(!method.IsConstructor&&!method.IsStatic){generator.PushInstance(method.DeclaringType);}LocalBuilder localConvertible=generator.DeclareLocal(typeof(IConvertible));LocalBuilder localObject=generator.DeclareLocal(typeof(object));OpCode variableAddressOpCode=args.Length<256?OpCodes.Ldloca_S:OpCodes.Ldloca;OpCode variableLoadOpCode=args.Length<256?OpCodes.Ldloc_S:OpCodes.Ldloc;for(int i=0;i<args.Length;i++){ParameterInfo parameter=args[i];Type parameterType=parameter.ParameterType;if(parameterType.IsByRef){parameterType=parameterType.GetElementType();LocalBuilder localVariable=generator.DeclareLocal(parameterType);if(!parameter.IsOut){generator.PushArrayInstance(argsIndex,i);if(parameterType.IsValueType()){Label skipSettingDefault=generator.DefineLabel();Label finishedProcessingParameter=generator.DefineLabel();generator.Emit(OpCodes.Brtrue_S,skipSettingDefault);generator.Emit(variableAddressOpCode,localVariable);generator.Emit(OpCodes.Initobj,parameterType);generator.Emit(OpCodes.Br_S,finishedProcessingParameter);generator.MarkLabel(skipSettingDefault);generator.PushArrayInstance(argsIndex,i);generator.UnboxIfNeeded(parameterType);generator.Emit(OpCodes.Stloc_S,localVariable);generator.MarkLabel(finishedProcessingParameter);}else{generator.UnboxIfNeeded(parameterType);generator.Emit(OpCodes.Stloc_S,localVariable);}}generator.Emit(variableAddressOpCode,localVariable);}else if(parameterType.IsValueType()){generator.PushArrayInstance(argsIndex,i);generator.Emit(OpCodes.Stloc_S,localObject);Label skipSettingDefault=generator.DefineLabel();Label finishedProcessingParameter=generator.DefineLabel();generator.Emit(OpCodes.Ldloc_S,localObject);generator.Emit(OpCodes.Brtrue_S,skipSettingDefault);LocalBuilder localVariable=generator.DeclareLocal(parameterType);generator.Emit(variableAddressOpCode,localVariable);generator.Emit(OpCodes.Initobj,parameterType);generator.Emit(variableLoadOpCode,localVariable);generator.Emit(OpCodes.Br_S,finishedProcessingParameter);generator.MarkLabel(skipSettingDefault);if(parameterType.IsPrimitive()){MethodInfo toParameterTypeMethod=typeof(IConvertible).GetMethod("To"+parameterType.Name,new[]{typeof(IFormatProvider)});if(toParameterTypeMethod!=null){Label skipConvertible=generator.DefineLabel();generator.Emit(OpCodes.Ldloc_S,localObject);generator.Emit(OpCodes.Isinst,parameterType);generator.Emit(OpCodes.Brtrue_S,skipConvertible);generator.Emit(OpCodes.Ldloc_S,localObject);generator.Emit(OpCodes.Isinst,typeof(IConvertible));generator.Emit(OpCodes.Stloc_S,localConvertible);generator.Emit(OpCodes.Ldloc_S,localConvertible);generator.Emit(OpCodes.Brfalse_S,skipConvertible);generator.Emit(OpCodes.Ldloc_S,localConvertible);generator.Emit(OpCodes.Ldnull);generator.Emit(OpCodes.Callvirt,toParameterTypeMethod);generator.Emit(OpCodes.Br_S,finishedProcessingParameter);generator.MarkLabel(skipConvertible);}}generator.Emit(OpCodes.Ldloc_S,localObject);generator.UnboxIfNeeded(parameterType);generator.MarkLabel(finishedProcessingParameter);}else{generator.PushArrayInstance(argsIndex,i);generator.UnboxIfNeeded(parameterType);}}if(method.IsConstructor){generator.Emit(OpCodes.Newobj,(ConstructorInfo)method);}else{generator.CallMethod((MethodInfo)method);}Type returnType=method.IsConstructor?method.DeclaringType:((MethodInfo)method).ReturnType;if(returnType!=typeof(void)){generator.BoxIfNeeded(returnType);}else{generator.Emit(OpCodes.Ldnull);}generator.Return();}public override Func<T>CreateDefaultConstructor<T>(Type type){DynamicMethod dynamicMethod=CreateDynamicMethod("Create"+type.FullName,typeof(T),ReflectionUtils.EmptyTypes,type);dynamicMethod.InitLocals=true;ILGenerator generator=dynamicMethod.GetILGenerator();GenerateCreateDefaultConstructorIL(type,generator,typeof(T));return(Func<T>)dynamicMethod.CreateDelegate(typeof(Func<T>));}private void GenerateCreateDefaultConstructorIL(Type type,ILGenerator generator,Type delegateType){if(type.IsValueType()){generator.DeclareLocal(type);generator.Emit(OpCodes.Ldloc_0);if(type!=delegateType){generator.Emit(OpCodes.Box,type);}}else{ConstructorInfo constructorInfo=type.GetConstructor(BindingFlags.Public|BindingFlags.NonPublic|BindingFlags.Instance,null,ReflectionUtils.EmptyTypes,null);if(constructorInfo==null){throw new ArgumentException("Could not get constructor for {0}.".FormatWith(CultureInfo.InvariantCulture,type));}generator.Emit(OpCodes.Newobj,constructorInfo);}generator.Return();}public override Func<T,object?>CreateGet<T>(PropertyInfo propertyInfo){DynamicMethod dynamicMethod=CreateDynamicMethod("Get"+propertyInfo.Name,typeof(object),new[]{typeof(T)},propertyInfo.DeclaringType);ILGenerator generator=dynamicMethod.GetILGenerator();GenerateCreateGetPropertyIL(propertyInfo,generator);return(Func<T,object?>)dynamicMethod.CreateDelegate(typeof(Func<T,object?>));}private void GenerateCreateGetPropertyIL(PropertyInfo propertyInfo,ILGenerator generator){MethodInfo getMethod=propertyInfo.GetGetMethod(true);if(getMethod==null){throw new ArgumentException("Property '{0}' does not have a getter.".FormatWith(CultureInfo.InvariantCulture,propertyInfo.Name));}if(!getMethod.IsStatic){generator.PushInstance(propertyInfo.DeclaringType);}generator.CallMethod(getMethod);generator.BoxIfNeeded(propertyInfo.PropertyType);generator.Return();}public override Func<T,object?>CreateGet<T>(FieldInfo fieldInfo){if(fieldInfo.IsLiteral){object constantValue=fieldInfo.GetValue(null);Func<T,object?>getter=o=>constantValue;return getter;}DynamicMethod dynamicMethod=CreateDynamicMethod("Get"+fieldInfo.Name,typeof(T),new[]{typeof(object)},fieldInfo.DeclaringType);ILGenerator generator=dynamicMethod.GetILGenerator();GenerateCreateGetFieldIL(fieldInfo,generator);return(Func<T,object?>)dynamicMethod.CreateDelegate(typeof(Func<T,object?>));}private void GenerateCreateGetFieldIL(FieldInfo fieldInfo,ILGenerator generator){if(!fieldInfo.IsStatic){generator.PushInstance(fieldInfo.DeclaringType);generator.Emit(OpCodes.Ldfld,fieldInfo);}else{generator.Emit(OpCodes.Ldsfld,fieldInfo);}generator.BoxIfNeeded(fieldInfo.FieldType);generator.Return();}public override Action<T,object?>CreateSet<T>(FieldInfo fieldInfo){DynamicMethod dynamicMethod=CreateDynamicMethod("Set"+fieldInfo.Name,null,new[]{typeof(T),typeof(object)},fieldInfo.DeclaringType);ILGenerator generator=dynamicMethod.GetILGenerator();GenerateCreateSetFieldIL(fieldInfo,generator);return(Action<T,object?>)dynamicMethod.CreateDelegate(typeof(Action<T,object?>));}internal static void GenerateCreateSetFieldIL(FieldInfo fieldInfo,ILGenerator generator){if(!fieldInfo.IsStatic){generator.PushInstance(fieldInfo.DeclaringType);}generator.Emit(OpCodes.Ldarg_1);generator.UnboxIfNeeded(fieldInfo.FieldType);if(!fieldInfo.IsStatic){generator.Emit(OpCodes.Stfld,fieldInfo);}else{generator.Emit(OpCodes.Stsfld,fieldInfo);}generator.Return();}public override Action<T,object?>CreateSet<T>(PropertyInfo propertyInfo){DynamicMethod dynamicMethod=CreateDynamicMethod("Set"+propertyInfo.Name,null,new[]{typeof(T),typeof(object)},propertyInfo.DeclaringType);ILGenerator generator=dynamicMethod.GetILGenerator();GenerateCreateSetPropertyIL(propertyInfo,generator);return(Action<T,object?>)dynamicMethod.CreateDelegate(typeof(Action<T,object>));}internal static void GenerateCreateSetPropertyIL(PropertyInfo propertyInfo,ILGenerator generator){MethodInfo setMethod=propertyInfo.GetSetMethod(true);if(!setMethod.IsStatic){generator.PushInstance(propertyInfo.DeclaringType);}generator.Emit(OpCodes.Ldarg_1);generator.UnboxIfNeeded(propertyInfo.PropertyType);generator.CallMethod(setMethod);generator.Return();}}}
#endif
#if HAVE_DYNAMIC
#if !HAVE_REFLECTION_BINDER
#else
using Microsoft.CSharp.RuntimeBinder;
#endif
namespace Newtonsoft.Json.Utilities{internal static class DynamicUtils{internal static class BinderWrapper{
#if !HAVE_REFLECTION_BINDER
public const string CSharpAssemblyName="Microsoft.CSharp, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";private const string BinderTypeName="Microsoft.CSharp.RuntimeBinder.Binder, "+CSharpAssemblyName;private const string CSharpArgumentInfoTypeName="Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo, "+CSharpAssemblyName;private const string CSharpArgumentInfoFlagsTypeName="Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags, "+CSharpAssemblyName;private const string CSharpBinderFlagsTypeName="Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, "+CSharpAssemblyName;private static object?_getCSharpArgumentInfoArray;private static object?_setCSharpArgumentInfoArray;private static MethodCall<object?,object?>?_getMemberCall;private static MethodCall<object?,object?>?_setMemberCall;private static bool _init;private static void Init(){if(!_init){Type binderType=Type.GetType(BinderTypeName,false);if(binderType==null){throw new InvalidOperationException("Could not resolve type '{0}'. You may need to add a reference to Microsoft.CSharp.dll to work with dynamic types.".FormatWith(CultureInfo.InvariantCulture,BinderTypeName));}_getCSharpArgumentInfoArray=CreateSharpArgumentInfoArray(0);_setCSharpArgumentInfoArray=CreateSharpArgumentInfoArray(0,3);CreateMemberCalls();_init=true;}}private static object CreateSharpArgumentInfoArray(params int[]values){Type csharpArgumentInfoType=Type.GetType(CSharpArgumentInfoTypeName);Type csharpArgumentInfoFlags=Type.GetType(CSharpArgumentInfoFlagsTypeName);Array a=Array.CreateInstance(csharpArgumentInfoType,values.Length);for(int i=0;i<values.Length;i++){MethodInfo createArgumentInfoMethod=csharpArgumentInfoType.GetMethod("Create",new[]{csharpArgumentInfoFlags,typeof(string)});object arg=createArgumentInfoMethod.Invoke(null,new object?[]{0,null});a.SetValue(arg,i);}return a;}private static void CreateMemberCalls(){Type csharpArgumentInfoType=Type.GetType(CSharpArgumentInfoTypeName,true);Type csharpBinderFlagsType=Type.GetType(CSharpBinderFlagsTypeName,true);Type binderType=Type.GetType(BinderTypeName,true);Type csharpArgumentInfoTypeEnumerableType=typeof(IEnumerable<>).MakeGenericType(csharpArgumentInfoType);MethodInfo getMemberMethod=binderType.GetMethod("GetMember",new[]{csharpBinderFlagsType,typeof(string),typeof(Type),csharpArgumentInfoTypeEnumerableType});_getMemberCall=JsonTypeReflector.ReflectionDelegateFactory.CreateMethodCall<object?>(getMemberMethod);MethodInfo setMemberMethod=binderType.GetMethod("SetMember",new[]{csharpBinderFlagsType,typeof(string),typeof(Type),csharpArgumentInfoTypeEnumerableType});_setMemberCall=JsonTypeReflector.ReflectionDelegateFactory.CreateMethodCall<object?>(setMemberMethod);}
#endif
public static CallSiteBinder GetMember(string name,Type context){
#if !HAVE_REFLECTION_BINDER
Init();MiscellaneousUtils.Assert(_getMemberCall!=null);MiscellaneousUtils.Assert(_getCSharpArgumentInfoArray!=null);return(CallSiteBinder)_getMemberCall(null,0,name,context,_getCSharpArgumentInfoArray)!;
#else
return Binder.GetMember(CSharpBinderFlags.None,name,context,new[]{CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None,null)});
#endif
}public static CallSiteBinder SetMember(string name,Type context){
#if !HAVE_REFLECTION_BINDER
Init();MiscellaneousUtils.Assert(_setMemberCall!=null);MiscellaneousUtils.Assert(_setCSharpArgumentInfoArray!=null);return(CallSiteBinder)_setMemberCall(null,0,name,context,_setCSharpArgumentInfoArray)!;
#else
return Binder.SetMember(CSharpBinderFlags.None,name,context,new[]{CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType,null),CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.Constant,null)});
#endif
}}public static IEnumerable<string>GetDynamicMemberNames(this IDynamicMetaObjectProvider dynamicProvider){DynamicMetaObject metaObject=dynamicProvider.GetMetaObject(Expression.Constant(dynamicProvider));return metaObject.GetDynamicMemberNames();}}internal class NoThrowGetBinderMember:GetMemberBinder{private readonly GetMemberBinder _innerBinder;public NoThrowGetBinderMember(GetMemberBinder innerBinder):base(innerBinder.Name,innerBinder.IgnoreCase){_innerBinder=innerBinder;}public override DynamicMetaObject FallbackGetMember(DynamicMetaObject target,DynamicMetaObject errorSuggestion){DynamicMetaObject retMetaObject=_innerBinder.Bind(target,CollectionUtils.ArrayEmpty<DynamicMetaObject>());NoThrowExpressionVisitor noThrowVisitor=new NoThrowExpressionVisitor();Expression resultExpression=noThrowVisitor.Visit(retMetaObject.Expression);DynamicMetaObject finalMetaObject=new DynamicMetaObject(resultExpression,retMetaObject.Restrictions);return finalMetaObject;}}internal class NoThrowSetBinderMember:SetMemberBinder{private readonly SetMemberBinder _innerBinder;public NoThrowSetBinderMember(SetMemberBinder innerBinder):base(innerBinder.Name,innerBinder.IgnoreCase){_innerBinder=innerBinder;}public override DynamicMetaObject FallbackSetMember(DynamicMetaObject target,DynamicMetaObject value,DynamicMetaObject errorSuggestion){DynamicMetaObject retMetaObject=_innerBinder.Bind(target,new DynamicMetaObject[]{value});NoThrowExpressionVisitor noThrowVisitor=new NoThrowExpressionVisitor();Expression resultExpression=noThrowVisitor.Visit(retMetaObject.Expression);DynamicMetaObject finalMetaObject=new DynamicMetaObject(resultExpression,retMetaObject.Restrictions);return finalMetaObject;}}internal class NoThrowExpressionVisitor:ExpressionVisitor{internal static readonly object ErrorResult=new object();protected override Expression VisitConditional(ConditionalExpression node){if(node.IfFalse.NodeType==ExpressionType.Throw){return Expression.Condition(node.Test,node.IfTrue,Expression.Constant(ErrorResult));}return base.VisitConditional(node);}}}
#endif
#if HAVE_REFLECTION_EMIT
#if !HAVE_LINQ
#endif
namespace Newtonsoft.Json.Serialization{public class DynamicValueProvider:IValueProvider{private readonly MemberInfo _memberInfo;private Func<object,object?>?_getter;private Action<object,object?>?_setter;public DynamicValueProvider(MemberInfo memberInfo){ValidationUtils.ArgumentNotNull(memberInfo,nameof(memberInfo));_memberInfo=memberInfo;}public void SetValue(object target,object?value){try{if(_setter==null){_setter=DynamicReflectionDelegateFactory.Instance.CreateSet<object>(_memberInfo);}
#if DEBUG
if(value==null){if(!ReflectionUtils.IsNullable(ReflectionUtils.GetMemberUnderlyingType(_memberInfo))){throw new JsonSerializationException("Incompatible value. Cannot set {0} to null.".FormatWith(CultureInfo.InvariantCulture,_memberInfo));}}else if(!ReflectionUtils.GetMemberUnderlyingType(_memberInfo).IsAssignableFrom(value.GetType())){throw new JsonSerializationException("Incompatible value. Cannot set {0} to type {1}.".FormatWith(CultureInfo.InvariantCulture,_memberInfo,value.GetType()));}
#endif
_setter(target,value);}catch(Exception ex){throw new JsonSerializationException("Error setting value to '{0}' on '{1}'.".FormatWith(CultureInfo.InvariantCulture,_memberInfo.Name,target.GetType()),ex);}}public object?GetValue(object target){try{if(_getter==null){_getter=DynamicReflectionDelegateFactory.Instance.CreateGet<object>(_memberInfo);}return _getter(target);}catch(Exception ex){throw new JsonSerializationException("Error getting value from '{0}' on '{1}'.".FormatWith(CultureInfo.InvariantCulture,_memberInfo.Name,target.GetType()),ex);}}}}
#endif
#if HAVE_ENTITY_FRAMEWORK
namespace Newtonsoft.Json.Converters{public class EntityKeyMemberConverter:JsonConverter{private const string EntityKeyMemberFullTypeName="System.Data.EntityKeyMember";private const string KeyPropertyName="Key";private const string TypePropertyName="Type";private const string ValuePropertyName="Value";private static ReflectionObject?_reflectionObject;public override void WriteJson(JsonWriter writer,object?value,JsonSerializer serializer){if(value==null){writer.WriteNull();return;}EnsureReflectionObject(value.GetType());MiscellaneousUtils.Assert(_reflectionObject!=null);DefaultContractResolver?resolver=serializer.ContractResolver as DefaultContractResolver;string keyName=(string)_reflectionObject.GetValue(value,KeyPropertyName)!;object?keyValue=_reflectionObject.GetValue(value,ValuePropertyName);Type?keyValueType=keyValue?.GetType();writer.WriteStartObject();writer.WritePropertyName((resolver!=null)?resolver.GetResolvedPropertyName(KeyPropertyName):KeyPropertyName);writer.WriteValue(keyName);writer.WritePropertyName((resolver!=null)?resolver.GetResolvedPropertyName(TypePropertyName):TypePropertyName);writer.WriteValue(keyValueType?.FullName);writer.WritePropertyName((resolver!=null)?resolver.GetResolvedPropertyName(ValuePropertyName):ValuePropertyName);if(keyValueType!=null){if(JsonSerializerInternalWriter.TryConvertToString(keyValue!,keyValueType,out string?valueJson)){writer.WriteValue(valueJson);}else{writer.WriteValue(keyValue);}}else{writer.WriteNull();}writer.WriteEndObject();}private static void ReadAndAssertProperty(JsonReader reader,string propertyName){reader.ReadAndAssert();if(reader.TokenType!=JsonToken.PropertyName||!string.Equals(reader.Value?.ToString(),propertyName,StringComparison.OrdinalIgnoreCase)){throw new JsonSerializationException("Expected JSON property '{0}'.".FormatWith(CultureInfo.InvariantCulture,propertyName));}}public override object?ReadJson(JsonReader reader,Type objectType,object?existingValue,JsonSerializer serializer){EnsureReflectionObject(objectType);MiscellaneousUtils.Assert(_reflectionObject!=null);object entityKeyMember=_reflectionObject.Creator!();ReadAndAssertProperty(reader,KeyPropertyName);reader.ReadAndAssert();_reflectionObject.SetValue(entityKeyMember,KeyPropertyName,reader.Value?.ToString());ReadAndAssertProperty(reader,TypePropertyName);reader.ReadAndAssert();string?type=reader.Value?.ToString();Type t=Type.GetType(type);ReadAndAssertProperty(reader,ValuePropertyName);reader.ReadAndAssert();_reflectionObject.SetValue(entityKeyMember,ValuePropertyName,serializer.Deserialize(reader,t));reader.ReadAndAssert();return entityKeyMember;}private static void EnsureReflectionObject(Type objectType){if(_reflectionObject==null){_reflectionObject=ReflectionObject.Create(objectType,KeyPropertyName,ValuePropertyName);}}public override bool CanConvert(Type objectType){return objectType.AssignableToTypeName(EntityKeyMemberFullTypeName,false);}}}
#endif
namespace Newtonsoft.Json.Utilities{internal class EnumInfo{public EnumInfo(bool isFlags,ulong[]values,string[]names,string[]resolvedNames){IsFlags=isFlags;Values=values;Names=names;ResolvedNames=resolvedNames;}public readonly bool IsFlags;public readonly ulong[]Values;public readonly string[]Names;public readonly string[]ResolvedNames;}}
namespace Newtonsoft.Json.Utilities{internal static class EnumUtils{private const char EnumSeparatorChar=',';private const string EnumSeparatorString=", ";private static readonly ThreadSafeStore<StructMultiKey<Type,NamingStrategy?>,EnumInfo>ValuesAndNamesPerEnum=new ThreadSafeStore<StructMultiKey<Type,NamingStrategy?>,EnumInfo>(InitializeValuesAndNames);private static EnumInfo InitializeValuesAndNames(StructMultiKey<Type,NamingStrategy?>key){Type enumType=key.Value1;string[]names=Enum.GetNames(enumType);string[]resolvedNames=new string[names.Length];ulong[]values=new ulong[names.Length];bool hasSpecifiedName;for(int i=0;i<names.Length;i++){string name=names[i];FieldInfo f=enumType.GetField(name,BindingFlags.NonPublic|BindingFlags.Public|BindingFlags.Static)!;values[i]=ToUInt64(f.GetValue(null));string resolvedName;
#if HAVE_DATA_CONTRACTS
string specifiedName=f.GetCustomAttributes(typeof(EnumMemberAttribute),true).Cast<EnumMemberAttribute>().Select(a=>a.Value).SingleOrDefault();hasSpecifiedName=specifiedName!=null;resolvedName=specifiedName??name;if(Array.IndexOf(resolvedNames,resolvedName,0,i)!=-1){throw new InvalidOperationException("Enum name '{0}' already exists on enum '{1}'.".FormatWith(CultureInfo.InvariantCulture,resolvedName,enumType.Name));}
#else
resolvedName=name;hasSpecifiedName=false;
#endif
resolvedNames[i]=key.Value2!=null?key.Value2.GetPropertyName(resolvedName,hasSpecifiedName):resolvedName;}bool isFlags=enumType.IsDefined(typeof(FlagsAttribute),false);return new EnumInfo(isFlags,values,names,resolvedNames);}public static IList<T>GetFlagsValues<T>(T value)where T:struct{Type enumType=typeof(T);if(!enumType.IsDefined(typeof(FlagsAttribute),false)){throw new ArgumentException("Enum type {0} is not a set of flags.".FormatWith(CultureInfo.InvariantCulture,enumType));}Type underlyingType=Enum.GetUnderlyingType(value.GetType());ulong num=ToUInt64(value);EnumInfo enumNameValues=GetEnumValuesAndNames(enumType);IList<T>selectedFlagsValues=new List<T>();for(int i=0;i<enumNameValues.Values.Length;i++){ulong v=enumNameValues.Values[i];if((num&v)==v&&v!=0){selectedFlagsValues.Add((T)Convert.ChangeType(v,underlyingType,CultureInfo.CurrentCulture));}}if(selectedFlagsValues.Count==0&&enumNameValues.Values.Any(v=>v==0)){selectedFlagsValues.Add(default);}return selectedFlagsValues;}private static CamelCaseNamingStrategy _camelCaseNamingStrategy=new CamelCaseNamingStrategy();public static bool TryToString(Type enumType,object value,bool camelCase,[NotNullWhen(true)]out string?name){return TryToString(enumType,value,camelCase?_camelCaseNamingStrategy:null,out name);}public static bool TryToString(Type enumType,object value,NamingStrategy?namingStrategy,[NotNullWhen(true)]out string?name){EnumInfo enumInfo=ValuesAndNamesPerEnum.Get(new StructMultiKey<Type,NamingStrategy?>(enumType,namingStrategy));ulong v=ToUInt64(value);if(!enumInfo.IsFlags){int index=Array.BinarySearch(enumInfo.Values,v);if(index>=0){name=enumInfo.ResolvedNames[index];return true;}name=null;return false;}else{name=InternalFlagsFormat(enumInfo,v);return name!=null;}}private static string?InternalFlagsFormat(EnumInfo entry,ulong result){string[]resolvedNames=entry.ResolvedNames;ulong[]values=entry.Values;int index=values.Length-1;StringBuilder sb=new StringBuilder();bool firstTime=true;ulong saveResult=result;while(index>=0){if(index==0&&values[index]==0){break;}if((result&values[index])==values[index]){result-=values[index];if(!firstTime){sb.Insert(0,EnumSeparatorString);}string resolvedName=resolvedNames[index];sb.Insert(0,resolvedName);firstTime=false;}index--;}string?returnString;if(result!=0){returnString=null;}else if(saveResult==0){if(values.Length>0&&values[0]==0){returnString=resolvedNames[0];}else{returnString=null;}}else{returnString=sb.ToString();}return returnString;}public static EnumInfo GetEnumValuesAndNames(Type enumType){return ValuesAndNamesPerEnum.Get(new StructMultiKey<Type,NamingStrategy?>(enumType,null));}private static ulong ToUInt64(object value){PrimitiveTypeCode typeCode=ConvertUtils.GetTypeCode(value.GetType(),out bool _);switch(typeCode){case PrimitiveTypeCode.SByte:return(ulong)(sbyte)value;case PrimitiveTypeCode.Byte:return(byte)value;case PrimitiveTypeCode.Boolean:return Convert.ToByte((bool)value);case PrimitiveTypeCode.Int16:return(ulong)(short)value;case PrimitiveTypeCode.UInt16:return(ushort)value;case PrimitiveTypeCode.Char:return(char)value;case PrimitiveTypeCode.UInt32:return(uint)value;case PrimitiveTypeCode.Int32:return(ulong)(int)value;case PrimitiveTypeCode.UInt64:return(ulong)value;case PrimitiveTypeCode.Int64:return(ulong)(long)value;default:throw new InvalidOperationException("Unknown enum type.");}}public static object ParseEnum(Type enumType,NamingStrategy?namingStrategy,string value,bool disallowNumber){ValidationUtils.ArgumentNotNull(enumType,nameof(enumType));ValidationUtils.ArgumentNotNull(value,nameof(value));if(!enumType.IsEnum()){throw new ArgumentException("Type provided must be an Enum.",nameof(enumType));}EnumInfo entry=ValuesAndNamesPerEnum.Get(new StructMultiKey<Type,NamingStrategy?>(enumType,namingStrategy));string[]enumNames=entry.Names;string[]resolvedNames=entry.ResolvedNames;ulong[]enumValues=entry.Values;int?matchingIndex=FindIndexByName(resolvedNames,value,0,value.Length,StringComparison.Ordinal);if(matchingIndex!=null){return Enum.ToObject(enumType,enumValues[matchingIndex.Value]);}int firstNonWhitespaceIndex=-1;for(int i=0;i<value.Length;i++){if(!char.IsWhiteSpace(value[i])){firstNonWhitespaceIndex=i;break;}}if(firstNonWhitespaceIndex==-1){throw new ArgumentException("Must specify valid information for parsing in the string.");}char firstNonWhitespaceChar=value[firstNonWhitespaceIndex];if(char.IsDigit(firstNonWhitespaceChar)||firstNonWhitespaceChar=='-'||firstNonWhitespaceChar=='+'){Type underlyingType=Enum.GetUnderlyingType(enumType);value=value.Trim();object?temp=null;try{temp=Convert.ChangeType(value,underlyingType,CultureInfo.InvariantCulture);}catch(FormatException){}if(temp!=null){if(disallowNumber){throw new FormatException("Integer string '{0}' is not allowed.".FormatWith(CultureInfo.InvariantCulture,value));}return Enum.ToObject(enumType,temp);}}ulong result=0;int valueIndex=firstNonWhitespaceIndex;while(valueIndex<=value.Length){int endIndex=value.IndexOf(EnumSeparatorChar,valueIndex);if(endIndex==-1){endIndex=value.Length;}int endIndexNoWhitespace=endIndex;while(valueIndex<endIndex&&char.IsWhiteSpace(value[valueIndex])){valueIndex++;}while(endIndexNoWhitespace>valueIndex&&char.IsWhiteSpace(value[endIndexNoWhitespace-1])){endIndexNoWhitespace--;}int valueSubstringLength=endIndexNoWhitespace-valueIndex;matchingIndex=MatchName(value,enumNames,resolvedNames,valueIndex,valueSubstringLength,StringComparison.Ordinal);if(matchingIndex==null){matchingIndex=MatchName(value,enumNames,resolvedNames,valueIndex,valueSubstringLength,StringComparison.OrdinalIgnoreCase);}if(matchingIndex==null){matchingIndex=FindIndexByName(resolvedNames,value,0,value.Length,StringComparison.OrdinalIgnoreCase);if(matchingIndex!=null){return Enum.ToObject(enumType,enumValues[matchingIndex.Value]);}throw new ArgumentException("Requested value '{0}' was not found.".FormatWith(CultureInfo.InvariantCulture,value));}result|=enumValues[matchingIndex.Value];valueIndex=endIndex+1;}return Enum.ToObject(enumType,result);}private static int?MatchName(string value,string[]enumNames,string[]resolvedNames,int valueIndex,int valueSubstringLength,StringComparison comparison){int?matchingIndex=FindIndexByName(resolvedNames,value,valueIndex,valueSubstringLength,comparison);if(matchingIndex==null){matchingIndex=FindIndexByName(enumNames,value,valueIndex,valueSubstringLength,comparison);}return matchingIndex;}private static int?FindIndexByName(string[]enumNames,string value,int valueIndex,int valueSubstringLength,StringComparison comparison){for(int i=0;i<enumNames.Length;i++){if(enumNames[i].Length==valueSubstringLength&&string.Compare(enumNames[i],0,value,valueIndex,valueSubstringLength,comparison)==0){return i;}}return null;}}}namespace Newtonsoft.Json.Serialization{public class ErrorContext{internal ErrorContext(object?originalObject,object?member,string path,Exception error){OriginalObject=originalObject;Member=member;Error=error;Path=path;}internal bool Traced{get;set;}public Exception Error{get;}public object?OriginalObject{get;}public object?Member{get;}public string Path{get;}public bool Handled{get;set;}}}namespace Newtonsoft.Json.Serialization{public class ErrorEventArgs:EventArgs{public object?CurrentObject{get;}public ErrorContext ErrorContext{get;}public ErrorEventArgs(object?currentObject,ErrorContext errorContext){CurrentObject=currentObject;ErrorContext=errorContext;}}}
#if HAVE_DYNAMIC
namespace Newtonsoft.Json.Converters{public class ExpandoObjectConverter:JsonConverter{public override void WriteJson(JsonWriter writer,object?value,JsonSerializer serializer){}public override object?ReadJson(JsonReader reader,Type objectType,object?existingValue,JsonSerializer serializer){return ReadValue(reader);}private object?ReadValue(JsonReader reader){if(!reader.MoveToContent()){throw JsonSerializationException.Create(reader,"Unexpected end when reading ExpandoObject.");}switch(reader.TokenType){case JsonToken.StartObject:return ReadObject(reader);case JsonToken.StartArray:return ReadList(reader);default:if(JsonTokenUtils.IsPrimitiveToken(reader.TokenType)){return reader.Value;}throw JsonSerializationException.Create(reader,"Unexpected token when converting ExpandoObject: {0}".FormatWith(CultureInfo.InvariantCulture,reader.TokenType));}}private object ReadList(JsonReader reader){IList<object?>list=new List<object?>();while(reader.Read()){switch(reader.TokenType){case JsonToken.Comment:break;default:object?v=ReadValue(reader);list.Add(v);break;case JsonToken.EndArray:return list;}}throw JsonSerializationException.Create(reader,"Unexpected end when reading ExpandoObject.");}private object ReadObject(JsonReader reader){IDictionary<string,object?>expandoObject=new ExpandoObject();while(reader.Read()){switch(reader.TokenType){case JsonToken.PropertyName:string propertyName=reader.Value!.ToString();if(!reader.Read()){throw JsonSerializationException.Create(reader,"Unexpected end when reading ExpandoObject.");}object?v=ReadValue(reader);expandoObject[propertyName]=v;break;case JsonToken.Comment:break;case JsonToken.EndObject:return expandoObject;}}throw JsonSerializationException.Create(reader,"Unexpected end when reading ExpandoObject.");}public override bool CanConvert(Type objectType){return(objectType==typeof(ExpandoObject));}public override bool CanWrite=>false;}}
#endif
#if !(NET20 || NET35)
namespace Newtonsoft.Json.Utilities{internal class ExpressionReflectionDelegateFactory:ReflectionDelegateFactory{private static readonly ExpressionReflectionDelegateFactory _instance=new ExpressionReflectionDelegateFactory();internal static ReflectionDelegateFactory Instance=>_instance;public override ObjectConstructor<object>CreateParameterizedConstructor(MethodBase method){ValidationUtils.ArgumentNotNull(method,nameof(method));Type type=typeof(object);ParameterExpression argsParameterExpression=Expression.Parameter(typeof(object[]),"args");Expression callExpression=BuildMethodCall(method,type,null,argsParameterExpression);LambdaExpression lambdaExpression=Expression.Lambda(typeof(ObjectConstructor<object>),callExpression,argsParameterExpression);ObjectConstructor<object>compiled=(ObjectConstructor<object>)lambdaExpression.Compile();return compiled;}public override MethodCall<T,object?>CreateMethodCall<T>(MethodBase method){ValidationUtils.ArgumentNotNull(method,nameof(method));Type type=typeof(object);ParameterExpression targetParameterExpression=Expression.Parameter(type,"target");ParameterExpression argsParameterExpression=Expression.Parameter(typeof(object[]),"args");Expression callExpression=BuildMethodCall(method,type,targetParameterExpression,argsParameterExpression);LambdaExpression lambdaExpression=Expression.Lambda(typeof(MethodCall<T,object>),callExpression,targetParameterExpression,argsParameterExpression);MethodCall<T,object?>compiled=(MethodCall<T,object?>)lambdaExpression.Compile();return compiled;}private class ByRefParameter{public Expression Value;public ParameterExpression Variable;public bool IsOut;public ByRefParameter(Expression value,ParameterExpression variable,bool isOut){Value=value;Variable=variable;IsOut=isOut;}}private Expression BuildMethodCall(MethodBase method,Type type,ParameterExpression?targetParameterExpression,ParameterExpression argsParameterExpression){ParameterInfo[]parametersInfo=method.GetParameters();Expression[]argsExpression;IList<ByRefParameter>refParameterMap;if(parametersInfo.Length==0){argsExpression=CollectionUtils.ArrayEmpty<Expression>();refParameterMap=CollectionUtils.ArrayEmpty<ByRefParameter>();}else{argsExpression=new Expression[parametersInfo.Length];refParameterMap=new List<ByRefParameter>();for(int i=0;i<parametersInfo.Length;i++){ParameterInfo parameter=parametersInfo[i];Type parameterType=parameter.ParameterType;bool isByRef=false;if(parameterType.IsByRef){parameterType=parameterType.GetElementType();isByRef=true;}Expression indexExpression=Expression.Constant(i);Expression paramAccessorExpression=Expression.ArrayIndex(argsParameterExpression,indexExpression);Expression argExpression=EnsureCastExpression(paramAccessorExpression,parameterType,!isByRef);if(isByRef){ParameterExpression variable=Expression.Variable(parameterType);refParameterMap.Add(new ByRefParameter(argExpression,variable,parameter.IsOut));argExpression=variable;}argsExpression[i]=argExpression;}}Expression callExpression;if(method.IsConstructor){callExpression=Expression.New((ConstructorInfo)method,argsExpression);}else if(method.IsStatic){callExpression=Expression.Call((MethodInfo)method,argsExpression);}else{Expression readParameter=EnsureCastExpression(targetParameterExpression!,method.DeclaringType);callExpression=Expression.Call(readParameter,(MethodInfo)method,argsExpression);}if(method is MethodInfo m){if(m.ReturnType!=typeof(void)){callExpression=EnsureCastExpression(callExpression,type);}else{callExpression=Expression.Block(callExpression,Expression.Constant(null));}}else{callExpression=EnsureCastExpression(callExpression,type);}if(refParameterMap.Count>0){IList<ParameterExpression>variableExpressions=new List<ParameterExpression>();IList<Expression>bodyExpressions=new List<Expression>();foreach(ByRefParameter p in refParameterMap){if(!p.IsOut){bodyExpressions.Add(Expression.Assign(p.Variable,p.Value));}variableExpressions.Add(p.Variable);}bodyExpressions.Add(callExpression);callExpression=Expression.Block(variableExpressions,bodyExpressions);}return callExpression;}public override Serialization.Func<T>CreateDefaultConstructor<T>(Type type){ValidationUtils.ArgumentNotNull(type,"type");if(type.IsAbstract()){return()=>(T)Activator.CreateInstance(type);}try{Type resultType=typeof(T);Expression expression=Expression.New(type);expression=EnsureCastExpression(expression,resultType);LambdaExpression lambdaExpression=Expression.Lambda(typeof(Serialization.Func<T>),expression);Serialization.Func<T>compiled=(Serialization.Func<T>)lambdaExpression.Compile();return compiled;}catch{return()=>(T)Activator.CreateInstance(type);}}public override Serialization.Func<T,object?>CreateGet<T>(PropertyInfo propertyInfo){ValidationUtils.ArgumentNotNull(propertyInfo,nameof(propertyInfo));Type instanceType=typeof(T);Type resultType=typeof(object);ParameterExpression parameterExpression=Expression.Parameter(instanceType,"instance");Expression resultExpression;MethodInfo?getMethod=propertyInfo.GetGetMethod(true);if(getMethod==null){throw new ArgumentException("Property does not have a getter.");}if(getMethod.IsStatic){resultExpression=Expression.MakeMemberAccess(null,propertyInfo);}else{Expression readParameter=EnsureCastExpression(parameterExpression,propertyInfo.DeclaringType);resultExpression=Expression.MakeMemberAccess(readParameter,propertyInfo);}resultExpression=EnsureCastExpression(resultExpression,resultType);LambdaExpression lambdaExpression=Expression.Lambda(typeof(Serialization.Func<T,object>),resultExpression,parameterExpression);Serialization.Func<T,object?>compiled=(Serialization.Func<T,object?>)lambdaExpression.Compile();return compiled;}public override Serialization.Func<T,object?>CreateGet<T>(FieldInfo fieldInfo){ValidationUtils.ArgumentNotNull(fieldInfo,nameof(fieldInfo));ParameterExpression sourceParameter=Expression.Parameter(typeof(T),"source");Expression fieldExpression;if(fieldInfo.IsStatic){fieldExpression=Expression.Field(null,fieldInfo);}else{Expression sourceExpression=EnsureCastExpression(sourceParameter,fieldInfo.DeclaringType);fieldExpression=Expression.Field(sourceExpression,fieldInfo);}fieldExpression=EnsureCastExpression(fieldExpression,typeof(object));Serialization.Func<T,object?>compiled=Expression.Lambda<Serialization.Func<T,object?>>(fieldExpression,sourceParameter).Compile();return compiled;}public override Serialization.Action<T,object?>CreateSet<T>(FieldInfo fieldInfo){ValidationUtils.ArgumentNotNull(fieldInfo,nameof(fieldInfo));if(fieldInfo.DeclaringType.IsValueType()||fieldInfo.IsInitOnly){return LateBoundReflectionDelegateFactory.Instance.CreateSet<T>(fieldInfo);}ParameterExpression sourceParameterExpression=Expression.Parameter(typeof(T),"source");ParameterExpression valueParameterExpression=Expression.Parameter(typeof(object),"value");Expression fieldExpression;if(fieldInfo.IsStatic){fieldExpression=Expression.Field(null,fieldInfo);}else{Expression sourceExpression=EnsureCastExpression(sourceParameterExpression,fieldInfo.DeclaringType);fieldExpression=Expression.Field(sourceExpression,fieldInfo);}Expression valueExpression=EnsureCastExpression(valueParameterExpression,fieldExpression.Type);BinaryExpression assignExpression=Expression.Assign(fieldExpression,valueExpression);LambdaExpression lambdaExpression=Expression.Lambda(typeof(Serialization.Action<T,object>),assignExpression,sourceParameterExpression,valueParameterExpression);Serialization.Action<T,object?>compiled=(Serialization.Action<T,object?>)lambdaExpression.Compile();return compiled;}public override Serialization.Action<T,object?>CreateSet<T>(PropertyInfo propertyInfo){ValidationUtils.ArgumentNotNull(propertyInfo,nameof(propertyInfo));if(propertyInfo.DeclaringType.IsValueType()){return LateBoundReflectionDelegateFactory.Instance.CreateSet<T>(propertyInfo);}Type instanceType=typeof(T);Type valueType=typeof(object);ParameterExpression instanceParameter=Expression.Parameter(instanceType,"instance");ParameterExpression valueParameter=Expression.Parameter(valueType,"value");Expression readValueParameter=EnsureCastExpression(valueParameter,propertyInfo.PropertyType);MethodInfo?setMethod=propertyInfo.GetSetMethod(true);if(setMethod==null){throw new ArgumentException("Property does not have a setter.");}Expression setExpression;if(setMethod.IsStatic){setExpression=Expression.Call(setMethod,readValueParameter);}else{Expression readInstanceParameter=EnsureCastExpression(instanceParameter,propertyInfo.DeclaringType);setExpression=Expression.Call(readInstanceParameter,setMethod,readValueParameter);}LambdaExpression lambdaExpression=Expression.Lambda(typeof(Serialization.Action<T,object?>),setExpression,instanceParameter,valueParameter);Serialization.Action<T,object?>compiled=(Serialization.Action<T,object?>)lambdaExpression.Compile();return compiled;}private Expression EnsureCastExpression(Expression expression,Type targetType,bool allowWidening=false){Type expressionType=expression.Type;if(expressionType==targetType||(!expressionType.IsValueType()&&targetType.IsAssignableFrom(expressionType))){return expression;}if(targetType.IsValueType()){Expression convert=Expression.Unbox(expression,targetType);if(allowWidening&&targetType.IsPrimitive()){MethodInfo toTargetTypeMethod=typeof(Convert).GetMethod("To"+targetType.Name,new[]{typeof(object)});if(toTargetTypeMethod!=null){convert=Expression.Condition(Expression.TypeIs(expression,targetType),convert,Expression.Call(toTargetTypeMethod,expression));}}return Expression.Condition(Expression.Equal(expression,Expression.Constant(null,typeof(object))),Expression.Default(targetType),convert);}return Expression.Convert(expression,targetType);}}}
#endif
#if !(NET20 || NET35)
namespace Newtonsoft.Json.Serialization{public class ExpressionValueProvider:IValueProvider{private readonly MemberInfo _memberInfo;private Func<object,object?>?_getter;private Action<object,object?>?_setter;public ExpressionValueProvider(MemberInfo memberInfo){ValidationUtils.ArgumentNotNull(memberInfo,nameof(memberInfo));_memberInfo=memberInfo;}public void SetValue(object target,object?value){try{if(_setter==null){_setter=ExpressionReflectionDelegateFactory.Instance.CreateSet<object>(_memberInfo);}
#if DEBUG
if(value==null){if(!ReflectionUtils.IsNullable(ReflectionUtils.GetMemberUnderlyingType(_memberInfo))){throw new JsonSerializationException("Incompatible value. Cannot set {0} to null.".FormatWith(CultureInfo.InvariantCulture,_memberInfo));}}else if(!ReflectionUtils.GetMemberUnderlyingType(_memberInfo).IsAssignableFrom(value.GetType())){throw new JsonSerializationException("Incompatible value. Cannot set {0} to type {1}.".FormatWith(CultureInfo.InvariantCulture,_memberInfo,value.GetType()));}
#endif
_setter(target,value);}catch(Exception ex){throw new JsonSerializationException("Error setting value to '{0}' on '{1}'.".FormatWith(CultureInfo.InvariantCulture,_memberInfo.Name,target.GetType()),ex);}}public object?GetValue(object target){try{if(_getter==null){_getter=ExpressionReflectionDelegateFactory.Instance.CreateGet<object>(_memberInfo);}return _getter(target);}catch(Exception ex){throw new JsonSerializationException("Error getting value from '{0}' on '{1}'.".FormatWith(CultureInfo.InvariantCulture,_memberInfo.Name,target.GetType()),ex);}}}}
#endif
namespace Newtonsoft.Json.Schema{[Obsolete("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]public static class Extensions{[Obsolete("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]public static bool IsValid(this JToken source,JsonSchema schema){bool valid=true;source.Validate(schema,(sender,args)=>{valid=false;});return valid;}[Obsolete("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]public static bool IsValid(this JToken source,JsonSchema schema,out IList<string>errorMessages){IList<string>errors=new List<string>();source.Validate(schema,(sender,args)=>errors.Add(args.Message));errorMessages=errors;return(errorMessages.Count==0);}[Obsolete("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]public static void Validate(this JToken source,JsonSchema schema){source.Validate(schema,null);}[Obsolete("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]public static void Validate(this JToken source,JsonSchema schema,ValidationEventHandler validationEventHandler){ValidationUtils.ArgumentNotNull(source,nameof(source));ValidationUtils.ArgumentNotNull(schema,nameof(schema));using(JsonValidatingReader reader=new JsonValidatingReader(source.CreateReader())){reader.Schema=schema;if(validationEventHandler!=null){reader.ValidationEventHandler+=validationEventHandler;}while(reader.Read()){}}}}}namespace Newtonsoft.Json.Linq.JsonPath{internal class FieldFilter:PathFilter{internal string?Name;public FieldFilter(string?name){Name=name;}public override IEnumerable<JToken>ExecuteFilter(JToken root,IEnumerable<JToken>current,JsonSelectSettings?settings){foreach(JToken t in current){if(t is JObject o){if(Name!=null){JToken?v=o[Name];if(v!=null){yield return v;}else if(settings?.ErrorWhenNoMatch??false){throw new JsonException("Property '{0}' does not exist on JObject.".FormatWith(CultureInfo.InvariantCulture,Name));}}else{foreach(KeyValuePair<string,JToken?>p in o){yield return p.Value!;}}}else{if(settings?.ErrorWhenNoMatch??false){throw new JsonException("Property '{0}' not valid on {1}.".FormatWith(CultureInfo.InvariantCulture,Name??"*",t.GetType().Name));}}}}}}
namespace Newtonsoft.Json.Linq.JsonPath{internal class FieldMultipleFilter:PathFilter{internal List<string>Names;public FieldMultipleFilter(List<string>names){Names=names;}public override IEnumerable<JToken>ExecuteFilter(JToken root,IEnumerable<JToken>current,JsonSelectSettings?settings){foreach(JToken t in current){if(t is JObject o){foreach(string name in Names){JToken?v=o[name];if(v!=null){yield return v;}if(settings?.ErrorWhenNoMatch??false){throw new JsonException("Property '{0}' does not exist on JObject.".FormatWith(CultureInfo.InvariantCulture,name));}}}else{if(settings?.ErrorWhenNoMatch??false){throw new JsonException("Properties {0} not valid on {1}.".FormatWith(CultureInfo.InvariantCulture,string.Join(", ",Names.Select(n=>"'"+n+"'")
#if !HAVE_STRING_JOIN_WITH_ENUMERABLE
.ToArray()
#endif
),t.GetType().Name));}}}}}}namespace Newtonsoft.Json{public enum FloatFormatHandling{String=0,Symbol=1,DefaultValue=2}}namespace Newtonsoft.Json{public enum FloatParseHandling{Double=0,Decimal=1}}
#if HAVE_OBSOLETE_FORMATTER_ASSEMBLY_STYLE
namespace System.Runtime.Serialization.Formatters{[Obsolete("FormatterAssemblyStyle is obsolete. Use TypeNameAssemblyFormatHandling instead.")]public enum FormatterAssemblyStyle{Simple=0,Full=1}}
#endif
#if HAVE_BINARY_SERIALIZATION && !HAVE_BINARY_FORMATTER
namespace Newtonsoft.Json.Serialization{internal class FormatterConverter:IFormatterConverter{public object Convert(object value,Type type){ValidationUtils.ArgumentNotNull(value,nameof(value));return System.Convert.ChangeType(value,type,CultureInfo.InvariantCulture);}public object Convert(object value,TypeCode typeCode){ValidationUtils.ArgumentNotNull(value,nameof(value));return System.Convert.ChangeType(value,typeCode,CultureInfo.InvariantCulture);}public bool ToBoolean(object value){ValidationUtils.ArgumentNotNull(value,nameof(value));return System.Convert.ToBoolean(value,CultureInfo.InvariantCulture);}public byte ToByte(object value){ValidationUtils.ArgumentNotNull(value,nameof(value));return System.Convert.ToByte(value,CultureInfo.InvariantCulture);}public char ToChar(object value){ValidationUtils.ArgumentNotNull(value,nameof(value));return System.Convert.ToChar(value,CultureInfo.InvariantCulture);}public DateTime ToDateTime(object value){ValidationUtils.ArgumentNotNull(value,nameof(value));return System.Convert.ToDateTime(value,CultureInfo.InvariantCulture);}public decimal ToDecimal(object value){ValidationUtils.ArgumentNotNull(value,nameof(value));return System.Convert.ToDecimal(value,CultureInfo.InvariantCulture);}public double ToDouble(object value){ValidationUtils.ArgumentNotNull(value,nameof(value));return System.Convert.ToDouble(value,CultureInfo.InvariantCulture);}public short ToInt16(object value){ValidationUtils.ArgumentNotNull(value,nameof(value));return System.Convert.ToInt16(value,CultureInfo.InvariantCulture);}public int ToInt32(object value){ValidationUtils.ArgumentNotNull(value,nameof(value));return System.Convert.ToInt32(value,CultureInfo.InvariantCulture);}public long ToInt64(object value){ValidationUtils.ArgumentNotNull(value,nameof(value));return System.Convert.ToInt64(value,CultureInfo.InvariantCulture);}public sbyte ToSByte(object value){ValidationUtils.ArgumentNotNull(value,nameof(value));return System.Convert.ToSByte(value,CultureInfo.InvariantCulture);}public float ToSingle(object value){ValidationUtils.ArgumentNotNull(value,nameof(value));return System.Convert.ToSingle(value,CultureInfo.InvariantCulture);}public string ToString(object value){ValidationUtils.ArgumentNotNull(value,nameof(value));return System.Convert.ToString(value,CultureInfo.InvariantCulture);}public ushort ToUInt16(object value){ValidationUtils.ArgumentNotNull(value,nameof(value));return System.Convert.ToUInt16(value,CultureInfo.InvariantCulture);}public uint ToUInt32(object value){ValidationUtils.ArgumentNotNull(value,nameof(value));return System.Convert.ToUInt32(value,CultureInfo.InvariantCulture);}public ulong ToUInt64(object value){ValidationUtils.ArgumentNotNull(value,nameof(value));return System.Convert.ToUInt64(value,CultureInfo.InvariantCulture);}}}
#endif
namespace Newtonsoft.Json{public enum Formatting{None=0,Indented=1}}
#if HAVE_FSHARP_TYPES
namespace Newtonsoft.Json.Utilities{internal class FSharpFunction{private readonly object?_instance;private readonly MethodCall<object?,object>_invoker;public FSharpFunction(object?instance,MethodCall<object?,object>invoker){_instance=instance;_invoker=invoker;}public object Invoke(params object[]args){object o=_invoker(_instance,args);return o;}}internal class FSharpUtils{private FSharpUtils(Assembly fsharpCoreAssembly){FSharpCoreAssembly=fsharpCoreAssembly;Type fsharpType=fsharpCoreAssembly.GetType("Microsoft.FSharp.Reflection.FSharpType");MethodInfo isUnionMethodInfo=GetMethodWithNonPublicFallback(fsharpType,"IsUnion",BindingFlags.Public|BindingFlags.Static);IsUnion=JsonTypeReflector.ReflectionDelegateFactory.CreateMethodCall<object?>(isUnionMethodInfo)!;MethodInfo getUnionCasesMethodInfo=GetMethodWithNonPublicFallback(fsharpType,"GetUnionCases",BindingFlags.Public|BindingFlags.Static);GetUnionCases=JsonTypeReflector.ReflectionDelegateFactory.CreateMethodCall<object?>(getUnionCasesMethodInfo)!;Type fsharpValue=fsharpCoreAssembly.GetType("Microsoft.FSharp.Reflection.FSharpValue");PreComputeUnionTagReader=CreateFSharpFuncCall(fsharpValue,"PreComputeUnionTagReader");PreComputeUnionReader=CreateFSharpFuncCall(fsharpValue,"PreComputeUnionReader");PreComputeUnionConstructor=CreateFSharpFuncCall(fsharpValue,"PreComputeUnionConstructor");Type unionCaseInfo=fsharpCoreAssembly.GetType("Microsoft.FSharp.Reflection.UnionCaseInfo");GetUnionCaseInfoName=JsonTypeReflector.ReflectionDelegateFactory.CreateGet<object>(unionCaseInfo.GetProperty("Name")!)!;GetUnionCaseInfoTag=JsonTypeReflector.ReflectionDelegateFactory.CreateGet<object>(unionCaseInfo.GetProperty("Tag")!)!;GetUnionCaseInfoDeclaringType=JsonTypeReflector.ReflectionDelegateFactory.CreateGet<object>(unionCaseInfo.GetProperty("DeclaringType")!)!;GetUnionCaseInfoFields=JsonTypeReflector.ReflectionDelegateFactory.CreateMethodCall<object>(unionCaseInfo.GetMethod("GetFields"));Type listModule=fsharpCoreAssembly.GetType("Microsoft.FSharp.Collections.ListModule");_ofSeq=listModule.GetMethod("OfSeq");_mapType=fsharpCoreAssembly.GetType("Microsoft.FSharp.Collections.FSharpMap`2");}private static readonly object Lock=new object();private static FSharpUtils?_instance;public static FSharpUtils Instance{get{MiscellaneousUtils.Assert(_instance!=null);return _instance;}}private MethodInfo _ofSeq;private Type _mapType;public Assembly FSharpCoreAssembly{get;private set;}public MethodCall<object?,object>IsUnion{get;private set;}public MethodCall<object?,object>GetUnionCases{get;private set;}public MethodCall<object?,object>PreComputeUnionTagReader{get;private set;}public MethodCall<object?,object>PreComputeUnionReader{get;private set;}public MethodCall<object?,object>PreComputeUnionConstructor{get;private set;}public Func<object,object>GetUnionCaseInfoDeclaringType{get;private set;}public Func<object,object>GetUnionCaseInfoName{get;private set;}public Func<object,object>GetUnionCaseInfoTag{get;private set;}public MethodCall<object,object?>GetUnionCaseInfoFields{get;private set;}public const string FSharpSetTypeName="FSharpSet`1";public const string FSharpListTypeName="FSharpList`1";public const string FSharpMapTypeName="FSharpMap`2";public static void EnsureInitialized(Assembly fsharpCoreAssembly){if(_instance==null){lock(Lock){if(_instance==null){_instance=new FSharpUtils(fsharpCoreAssembly);}}}}private static MethodInfo GetMethodWithNonPublicFallback(Type type,string methodName,BindingFlags bindingFlags){MethodInfo methodInfo=type.GetMethod(methodName,bindingFlags);if(methodInfo==null&&(bindingFlags&BindingFlags.NonPublic)!=BindingFlags.NonPublic){methodInfo=type.GetMethod(methodName,bindingFlags|BindingFlags.NonPublic);}return methodInfo!;}private static MethodCall<object?,object>CreateFSharpFuncCall(Type type,string methodName){MethodInfo innerMethodInfo=GetMethodWithNonPublicFallback(type,methodName,BindingFlags.Public|BindingFlags.Static);MethodInfo invokeFunc=innerMethodInfo.ReturnType.GetMethod("Invoke",BindingFlags.Public|BindingFlags.Instance);MethodCall<object?,object?>call=JsonTypeReflector.ReflectionDelegateFactory.CreateMethodCall<object?>(innerMethodInfo);MethodCall<object?,object>invoke=JsonTypeReflector.ReflectionDelegateFactory.CreateMethodCall<object?>(invokeFunc)!;MethodCall<object?,object>createFunction=(target,args)=>{object?result=call(target,args);FSharpFunction f=new FSharpFunction(result,invoke);return f;};return createFunction;}public ObjectConstructor<object>CreateSeq(Type t){MethodInfo seqType=_ofSeq.MakeGenericMethod(t);return JsonTypeReflector.ReflectionDelegateFactory.CreateParameterizedConstructor(seqType);}public ObjectConstructor<object>CreateMap(Type keyType,Type valueType){MethodInfo creatorDefinition=typeof(FSharpUtils).GetMethod("BuildMapCreator");MethodInfo creatorGeneric=creatorDefinition.MakeGenericMethod(keyType,valueType);return(ObjectConstructor<object>)creatorGeneric.Invoke(this,null);}public ObjectConstructor<object>BuildMapCreator<TKey,TValue>(){Type genericMapType=_mapType.MakeGenericType(typeof(TKey),typeof(TValue));ConstructorInfo ctor=genericMapType.GetConstructor(new[]{typeof(IEnumerable<Tuple<TKey,TValue>>)});ObjectConstructor<object>ctorDelegate=JsonTypeReflector.ReflectionDelegateFactory.CreateParameterizedConstructor(ctor);ObjectConstructor<object>creator=args=>{IEnumerable<KeyValuePair<TKey,TValue>>values=(IEnumerable<KeyValuePair<TKey,TValue>>)args[0]!;IEnumerable<Tuple<TKey,TValue>>tupleValues=values.Select(kv=>new Tuple<TKey,TValue>(kv.Key,kv.Value));return ctorDelegate(tupleValues);};return creator;}}}
#endif
namespace Newtonsoft.Json{public interface IArrayPool<T>{T[]Rent(int minimumLength);void Return(T[]?array);}}namespace Newtonsoft.Json.Serialization{public interface IAttributeProvider{IList<Attribute>GetAttributes(bool inherit);IList<Attribute>GetAttributes(Type attributeType,bool inherit);}}namespace Newtonsoft.Json.Serialization{public interface IContractResolver{JsonContract ResolveContract(Type type);}}namespace Newtonsoft.Json.Linq{public interface IJEnumerable<
#if HAVE_VARIANT_TYPE_PARAMETERS
out
#endif
T>:IEnumerable<T>where T:JToken{IJEnumerable<JToken>this[object key]{get;}}}namespace Newtonsoft.Json{public interface IJsonLineInfo{bool HasLineInfo();int LineNumber{get;}int LinePosition{get;}}}
#if HAVE_REFLECTION_EMIT
namespace Newtonsoft.Json.Utilities{internal static class ILGeneratorExtensions{public static void PushInstance(this ILGenerator generator,Type type){generator.Emit(OpCodes.Ldarg_0);if(type.IsValueType()){generator.Emit(OpCodes.Unbox,type);}else{generator.Emit(OpCodes.Castclass,type);}}public static void PushArrayInstance(this ILGenerator generator,int argsIndex,int arrayIndex){generator.Emit(OpCodes.Ldarg,argsIndex);generator.Emit(OpCodes.Ldc_I4,arrayIndex);generator.Emit(OpCodes.Ldelem_Ref);}public static void BoxIfNeeded(this ILGenerator generator,Type type){if(type.IsValueType()){generator.Emit(OpCodes.Box,type);}else{generator.Emit(OpCodes.Castclass,type);}}public static void UnboxIfNeeded(this ILGenerator generator,Type type){if(type.IsValueType()){generator.Emit(OpCodes.Unbox_Any,type);}else{generator.Emit(OpCodes.Castclass,type);}}public static void CallMethod(this ILGenerator generator,MethodInfo methodInfo){if(methodInfo.IsFinal||!methodInfo.IsVirtual){generator.Emit(OpCodes.Call,methodInfo);}else{generator.Emit(OpCodes.Callvirt,methodInfo);}}public static void Return(this ILGenerator generator){generator.Emit(OpCodes.Ret);}}}
#endif
namespace Newtonsoft.Json.Utilities{internal static class ImmutableCollectionsUtils{internal class ImmutableCollectionTypeInfo{public ImmutableCollectionTypeInfo(string contractTypeName,string createdTypeName,string builderTypeName){ContractTypeName=contractTypeName;CreatedTypeName=createdTypeName;BuilderTypeName=builderTypeName;}public string ContractTypeName{get;set;}public string CreatedTypeName{get;set;}public string BuilderTypeName{get;set;}}private const string ImmutableListGenericInterfaceTypeName="System.Collections.Immutable.IImmutableList`1";private const string ImmutableQueueGenericInterfaceTypeName="System.Collections.Immutable.IImmutableQueue`1";private const string ImmutableStackGenericInterfaceTypeName="System.Collections.Immutable.IImmutableStack`1";private const string ImmutableSetGenericInterfaceTypeName="System.Collections.Immutable.IImmutableSet`1";private const string ImmutableArrayTypeName="System.Collections.Immutable.ImmutableArray";private const string ImmutableArrayGenericTypeName="System.Collections.Immutable.ImmutableArray`1";private const string ImmutableListTypeName="System.Collections.Immutable.ImmutableList";private const string ImmutableListGenericTypeName="System.Collections.Immutable.ImmutableList`1";private const string ImmutableQueueTypeName="System.Collections.Immutable.ImmutableQueue";private const string ImmutableQueueGenericTypeName="System.Collections.Immutable.ImmutableQueue`1";private const string ImmutableStackTypeName="System.Collections.Immutable.ImmutableStack";private const string ImmutableStackGenericTypeName="System.Collections.Immutable.ImmutableStack`1";private const string ImmutableSortedSetTypeName="System.Collections.Immutable.ImmutableSortedSet";private const string ImmutableSortedSetGenericTypeName="System.Collections.Immutable.ImmutableSortedSet`1";private const string ImmutableHashSetTypeName="System.Collections.Immutable.ImmutableHashSet";private const string ImmutableHashSetGenericTypeName="System.Collections.Immutable.ImmutableHashSet`1";private static readonly IList<ImmutableCollectionTypeInfo>ArrayContractImmutableCollectionDefinitions=new List<ImmutableCollectionTypeInfo>{new ImmutableCollectionTypeInfo(ImmutableListGenericInterfaceTypeName,ImmutableListGenericTypeName,ImmutableListTypeName),new ImmutableCollectionTypeInfo(ImmutableListGenericTypeName,ImmutableListGenericTypeName,ImmutableListTypeName),new ImmutableCollectionTypeInfo(ImmutableQueueGenericInterfaceTypeName,ImmutableQueueGenericTypeName,ImmutableQueueTypeName),new ImmutableCollectionTypeInfo(ImmutableQueueGenericTypeName,ImmutableQueueGenericTypeName,ImmutableQueueTypeName),new ImmutableCollectionTypeInfo(ImmutableStackGenericInterfaceTypeName,ImmutableStackGenericTypeName,ImmutableStackTypeName),new ImmutableCollectionTypeInfo(ImmutableStackGenericTypeName,ImmutableStackGenericTypeName,ImmutableStackTypeName),new ImmutableCollectionTypeInfo(ImmutableSetGenericInterfaceTypeName,ImmutableHashSetGenericTypeName,ImmutableHashSetTypeName),new ImmutableCollectionTypeInfo(ImmutableSortedSetGenericTypeName,ImmutableSortedSetGenericTypeName,ImmutableSortedSetTypeName),new ImmutableCollectionTypeInfo(ImmutableHashSetGenericTypeName,ImmutableHashSetGenericTypeName,ImmutableHashSetTypeName),new ImmutableCollectionTypeInfo(ImmutableArrayGenericTypeName,ImmutableArrayGenericTypeName,ImmutableArrayTypeName)};private const string ImmutableDictionaryGenericInterfaceTypeName="System.Collections.Immutable.IImmutableDictionary`2";private const string ImmutableDictionaryTypeName="System.Collections.Immutable.ImmutableDictionary";private const string ImmutableDictionaryGenericTypeName="System.Collections.Immutable.ImmutableDictionary`2";private const string ImmutableSortedDictionaryTypeName="System.Collections.Immutable.ImmutableSortedDictionary";private const string ImmutableSortedDictionaryGenericTypeName="System.Collections.Immutable.ImmutableSortedDictionary`2";private static readonly IList<ImmutableCollectionTypeInfo>DictionaryContractImmutableCollectionDefinitions=new List<ImmutableCollectionTypeInfo>{new ImmutableCollectionTypeInfo(ImmutableDictionaryGenericInterfaceTypeName,ImmutableDictionaryGenericTypeName,ImmutableDictionaryTypeName),new ImmutableCollectionTypeInfo(ImmutableSortedDictionaryGenericTypeName,ImmutableSortedDictionaryGenericTypeName,ImmutableSortedDictionaryTypeName),new ImmutableCollectionTypeInfo(ImmutableDictionaryGenericTypeName,ImmutableDictionaryGenericTypeName,ImmutableDictionaryTypeName)};internal static bool TryBuildImmutableForArrayContract(Type underlyingType,Type collectionItemType,[NotNullWhen(true)]out Type?createdType,[NotNullWhen(true)]out ObjectConstructor<object>?parameterizedCreator){if(underlyingType.IsGenericType()){Type underlyingTypeDefinition=underlyingType.GetGenericTypeDefinition();string name=underlyingTypeDefinition.FullName;ImmutableCollectionTypeInfo definition=ArrayContractImmutableCollectionDefinitions.FirstOrDefault(d=>d.ContractTypeName==name);if(definition!=null){Type createdTypeDefinition=underlyingTypeDefinition.Assembly().GetType(definition.CreatedTypeName);Type builderTypeDefinition=underlyingTypeDefinition.Assembly().GetType(definition.BuilderTypeName);if(createdTypeDefinition!=null&&builderTypeDefinition!=null){MethodInfo mb=builderTypeDefinition.GetMethods().FirstOrDefault(m=>m.Name=="CreateRange"&&m.GetParameters().Length==1);if(mb!=null){createdType=createdTypeDefinition.MakeGenericType(collectionItemType);MethodInfo method=mb.MakeGenericMethod(collectionItemType);parameterizedCreator=JsonTypeReflector.ReflectionDelegateFactory.CreateParameterizedConstructor(method);return true;}}}}createdType=null;parameterizedCreator=null;return false;}internal static bool TryBuildImmutableForDictionaryContract(Type underlyingType,Type keyItemType,Type valueItemType,[NotNullWhen(true)]out Type?createdType,[NotNullWhen(true)]out ObjectConstructor<object>?parameterizedCreator){if(underlyingType.IsGenericType()){Type underlyingTypeDefinition=underlyingType.GetGenericTypeDefinition();string name=underlyingTypeDefinition.FullName;ImmutableCollectionTypeInfo definition=DictionaryContractImmutableCollectionDefinitions.FirstOrDefault(d=>d.ContractTypeName==name);if(definition!=null){Type createdTypeDefinition=underlyingTypeDefinition.Assembly().GetType(definition.CreatedTypeName);Type builderTypeDefinition=underlyingTypeDefinition.Assembly().GetType(definition.BuilderTypeName);if(createdTypeDefinition!=null&&builderTypeDefinition!=null){MethodInfo mb=builderTypeDefinition.GetMethods().FirstOrDefault(m=>{ParameterInfo[]parameters=m.GetParameters();return m.Name=="CreateRange"&&parameters.Length==1&&parameters[0].ParameterType.IsGenericType()&&parameters[0].ParameterType.GetGenericTypeDefinition()==typeof(IEnumerable<>);});if(mb!=null){createdType=createdTypeDefinition.MakeGenericType(keyItemType,valueItemType);MethodInfo method=mb.MakeGenericMethod(keyItemType,valueItemType);parameterizedCreator=JsonTypeReflector.ReflectionDelegateFactory.CreateParameterizedConstructor(method);return true;}}}}createdType=null;parameterizedCreator=null;return false;}}}namespace Newtonsoft.Json.Serialization{public interface IReferenceResolver{object ResolveReference(object context,string reference);string GetReference(object context,object value);bool IsReferenced(object context,object value);void AddReference(object context,string reference,object value);}}namespace Newtonsoft.Json.Serialization{public interface ISerializationBinder{Type BindToType(string?assemblyName,string typeName);void BindToName(Type serializedType,out string?assemblyName,out string?typeName);}}namespace Newtonsoft.Json.Converters{public class IsoDateTimeConverter:DateTimeConverterBase{private const string DefaultDateTimeFormat="yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK";private DateTimeStyles _dateTimeStyles=DateTimeStyles.RoundtripKind;private string?_dateTimeFormat;private CultureInfo?_culture;public DateTimeStyles DateTimeStyles{get=>_dateTimeStyles;set=>_dateTimeStyles=value;}public string?DateTimeFormat{get=>_dateTimeFormat??string.Empty;set=>_dateTimeFormat=(StringUtils.IsNullOrEmpty(value))?null:value;}public CultureInfo Culture{get=>_culture??CultureInfo.CurrentCulture;set=>_culture=value;}public override void WriteJson(JsonWriter writer,object?value,JsonSerializer serializer){string text;if(value is DateTime dateTime){if((_dateTimeStyles&DateTimeStyles.AdjustToUniversal)==DateTimeStyles.AdjustToUniversal||(_dateTimeStyles&DateTimeStyles.AssumeUniversal)==DateTimeStyles.AssumeUniversal){dateTime=dateTime.ToUniversalTime();}text=dateTime.ToString(_dateTimeFormat??DefaultDateTimeFormat,Culture);}
#if HAVE_DATE_TIME_OFFSET
else if(value is DateTimeOffset dateTimeOffset){if((_dateTimeStyles&DateTimeStyles.AdjustToUniversal)==DateTimeStyles.AdjustToUniversal||(_dateTimeStyles&DateTimeStyles.AssumeUniversal)==DateTimeStyles.AssumeUniversal){dateTimeOffset=dateTimeOffset.ToUniversalTime();}text=dateTimeOffset.ToString(_dateTimeFormat??DefaultDateTimeFormat,Culture);}
#endif
else{throw new JsonSerializationException("Unexpected value when converting date. Expected DateTime or DateTimeOffset, got {0}.".FormatWith(CultureInfo.InvariantCulture,ReflectionUtils.GetObjectType(value)!));}writer.WriteValue(text);}public override object?ReadJson(JsonReader reader,Type objectType,object?existingValue,JsonSerializer serializer){bool nullable=ReflectionUtils.IsNullableType(objectType);if(reader.TokenType==JsonToken.Null){if(!nullable){throw JsonSerializationException.Create(reader,"Cannot convert null value to {0}.".FormatWith(CultureInfo.InvariantCulture,objectType));}return null;}
#if HAVE_DATE_TIME_OFFSET
Type t=(nullable)?Nullable.GetUnderlyingType(objectType):objectType;
#endif
if(reader.TokenType==JsonToken.Date){
#if HAVE_DATE_TIME_OFFSET
if(t==typeof(DateTimeOffset)){return(reader.Value is DateTimeOffset)?reader.Value:new DateTimeOffset((DateTime)reader.Value!);}if(reader.Value is DateTimeOffset offset){return offset.DateTime;}
#endif
return reader.Value;}if(reader.TokenType!=JsonToken.String){throw JsonSerializationException.Create(reader,"Unexpected token parsing date. Expected String, got {0}.".FormatWith(CultureInfo.InvariantCulture,reader.TokenType));}string?dateText=reader.Value?.ToString();if(StringUtils.IsNullOrEmpty(dateText)&&nullable){return null;}
#if HAVE_DATE_TIME_OFFSET
if(t==typeof(DateTimeOffset)){if(!StringUtils.IsNullOrEmpty(_dateTimeFormat)){return DateTimeOffset.ParseExact(dateText,_dateTimeFormat,Culture,_dateTimeStyles);}else{return DateTimeOffset.Parse(dateText,Culture,_dateTimeStyles);}}
#endif
if(!StringUtils.IsNullOrEmpty(_dateTimeFormat)){return DateTime.ParseExact(dateText,_dateTimeFormat,Culture,_dateTimeStyles);}else{return DateTime.Parse(dateText,Culture,_dateTimeStyles);}}}}namespace Newtonsoft.Json.Serialization{public interface ITraceWriter{TraceLevel LevelFilter{get;}void Trace(TraceLevel level,string message,Exception?ex);}}namespace Newtonsoft.Json.Serialization{public interface IValueProvider{void SetValue(object target,object?value);object?GetValue(object target);}}
#if HAVE_ASYNC
namespace Newtonsoft.Json.Linq{public partial class JArray{public override async Task WriteToAsync(JsonWriter writer,CancellationToken cancellationToken,params JsonConverter[]converters){await writer.WriteStartArrayAsync(cancellationToken).ConfigureAwait(false);for(int i=0;i<_values.Count;i++){await _values[i].WriteToAsync(writer,cancellationToken,converters).ConfigureAwait(false);}await writer.WriteEndArrayAsync(cancellationToken).ConfigureAwait(false);}public new static Task<JArray>LoadAsync(JsonReader reader,CancellationToken cancellationToken=default){return LoadAsync(reader,null,cancellationToken);}public new static async Task<JArray>LoadAsync(JsonReader reader,JsonLoadSettings?settings,CancellationToken cancellationToken=default){if(reader.TokenType==JsonToken.None){if(!await reader.ReadAsync(cancellationToken).ConfigureAwait(false)){throw JsonReaderException.Create(reader,"Error reading JArray from JsonReader.");}}await reader.MoveToContentAsync(cancellationToken).ConfigureAwait(false);if(reader.TokenType!=JsonToken.StartArray){throw JsonReaderException.Create(reader,"Error reading JArray from JsonReader. Current JsonReader item is not an array: {0}".FormatWith(CultureInfo.InvariantCulture,reader.TokenType));}JArray a=new JArray();a.SetLineInfo(reader as IJsonLineInfo,settings);await a.ReadTokenFromAsync(reader,settings,cancellationToken).ConfigureAwait(false);return a;}}}
#endif
namespace Newtonsoft.Json.Linq{public partial class JArray:JContainer,IList<JToken>{private readonly List<JToken>_values=new List<JToken>();protected override IList<JToken>ChildrenTokens=>_values;public override JTokenType Type=>JTokenType.Array;public JArray(){}public JArray(JArray other):base(other){}public JArray(params object[]content):this((object)content){}public JArray(object content){Add(content);}internal override bool DeepEquals(JToken node){return(node is JArray t&&ContentsEqual(t));}internal override JToken CloneToken(){return new JArray(this);}public new static JArray Load(JsonReader reader){return Load(reader,null);}public new static JArray Load(JsonReader reader,JsonLoadSettings?settings){if(reader.TokenType==JsonToken.None){if(!reader.Read()){throw JsonReaderException.Create(reader,"Error reading JArray from JsonReader.");}}reader.MoveToContent();if(reader.TokenType!=JsonToken.StartArray){throw JsonReaderException.Create(reader,"Error reading JArray from JsonReader. Current JsonReader item is not an array: {0}".FormatWith(CultureInfo.InvariantCulture,reader.TokenType));}JArray a=new JArray();a.SetLineInfo(reader as IJsonLineInfo,settings);a.ReadTokenFrom(reader,settings);return a;}public new static JArray Parse(string json){return Parse(json,null);}public new static JArray Parse(string json,JsonLoadSettings?settings){using(JsonReader reader=new JsonTextReader(new StringReader(json))){JArray a=Load(reader,settings);while(reader.Read()){}return a;}}public new static JArray FromObject(object o){return FromObject(o,JsonSerializer.CreateDefault());}public new static JArray FromObject(object o,JsonSerializer jsonSD){JToken token=FromObjectInternal(o,jsonSD);if(token.Type!=JTokenType.Array){throw new ArgumentException("Object serialized to {0}. JArray instance expected.".FormatWith(CultureInfo.InvariantCulture,token.Type));}return(JArray)token;}public override void WriteTo(JsonWriter writer,params JsonConverter[]converters){writer.WriteStartArray();for(int i=0;i<_values.Count;i++){_values[i].WriteTo(writer,converters);}writer.WriteEndArray();}public override JToken?this[object key]{get{ValidationUtils.ArgumentNotNull(key,nameof(key));if(!(key is int)){throw new ArgumentException("Accessed JArray values with invalid key value: {0}. Int32 array index expected.".FormatWith(CultureInfo.InvariantCulture,MiscellaneousUtils.ToString(key)));}return GetItem((int)key);}set{ValidationUtils.ArgumentNotNull(key,nameof(key));if(!(key is int)){throw new ArgumentException("Set JArray values with invalid key value: {0}. Int32 array index expected.".FormatWith(CultureInfo.InvariantCulture,MiscellaneousUtils.ToString(key)));}SetItem((int)key,value);}}public JToken this[int index]{get=>GetItem(index);set=>SetItem(index,value);}internal override int IndexOfItem(JToken?item){if(item==null){return-1;}return _values.IndexOfReference(item);}internal override void MergeItem(object content,JsonMergeSettings?settings){IEnumerable?a=(IsMultiContent(content)||content is JArray)?(IEnumerable)content:null;if(a==null){return;}MergeEnumerableContent(this,a,settings);}public int IndexOf(JToken item){return IndexOfItem(item);}public void Insert(int index,JToken item){InsertItem(index,item,false);}public void RemoveAt(int index){RemoveItemAt(index);}public IEnumerator<JToken>GetEnumerator(){return Children().GetEnumerator();}public void Add(JToken item){Add((object)item);}public void Clear(){ClearItems();}public bool Contains(JToken item){return ContainsItem(item);}public void CopyTo(JToken[]array,int arrayIndex){CopyItemsTo(array,arrayIndex);}public bool IsReadOnly=>false;public bool Remove(JToken item){return RemoveItem(item);}internal override int GetDeepHashCode(){return ContentsHashCode();}}}namespace Newtonsoft.Json.Converters{public class JavaScriptDateTimeConverter:DateTimeConverterBase{public override void WriteJson(JsonWriter writer,object?value,JsonSerializer serializer){long ticks;if(value is DateTime dateTime){DateTime utcDateTime=dateTime.ToUniversalTime();ticks=DateTimeUtils.ConvertDateTimeToJavaScriptTicks(utcDateTime);}
#if HAVE_DATE_TIME_OFFSET
else if(value is DateTimeOffset dateTimeOffset){DateTimeOffset utcDateTimeOffset=dateTimeOffset.ToUniversalTime();ticks=DateTimeUtils.ConvertDateTimeToJavaScriptTicks(utcDateTimeOffset.UtcDateTime);}
#endif
else{throw new JsonSerializationException("Expected date object value.");}writer.WriteStartConstructor("Date");writer.WriteValue(ticks);writer.WriteEndConstructor();}public override object?ReadJson(JsonReader reader,Type objectType,object?existingValue,JsonSerializer serializer){if(reader.TokenType==JsonToken.Null){if(!ReflectionUtils.IsNullable(objectType)){throw JsonSerializationException.Create(reader,"Cannot convert null value to {0}.".FormatWith(CultureInfo.InvariantCulture,objectType));}return null;}if(reader.TokenType!=JsonToken.StartConstructor||!string.Equals(reader.Value?.ToString(),"Date",StringComparison.Ordinal)){throw JsonSerializationException.Create(reader,"Unexpected token or value when parsing date. Token: {0}, Value: {1}".FormatWith(CultureInfo.InvariantCulture,reader.TokenType,reader.Value));}if(!JavaScriptUtils.TryGetDateFromConstructorJson(reader,out DateTime d,out string?errorMessage)){throw JsonSerializationException.Create(reader,errorMessage);}
#if HAVE_DATE_TIME_OFFSET
Type t=(ReflectionUtils.IsNullableType(objectType))?Nullable.GetUnderlyingType(objectType):objectType;if(t==typeof(DateTimeOffset)){return new DateTimeOffset(d);}
#endif
return d;}}}
namespace Newtonsoft.Json.Utilities{internal static class BufferUtils{public static char[]RentBuffer(IArrayPool<char>?bufferPool,int minSize){if(bufferPool==null){return new char[minSize];}char[]buffer=bufferPool.Rent(minSize);return buffer;}public static void ReturnBuffer(IArrayPool<char>?bufferPool,char[]?buffer){bufferPool?.Return(buffer);}public static char[]EnsureBufferSize(IArrayPool<char>?bufferPool,int size,char[]?buffer){if(bufferPool==null){return new char[size];}if(buffer!=null){bufferPool.Return(buffer);}return bufferPool.Rent(size);}}internal static class JavaScriptUtils{internal static readonly bool[]SingleQuoteCharEscapeFlags=new bool[128];internal static readonly bool[]DoubleQuoteCharEscapeFlags=new bool[128];internal static readonly bool[]HtmlCharEscapeFlags=new bool[128];private const int UnicodeTextLength=6;static JavaScriptUtils(){IList<char>escapeChars=new List<char>{'\n','\r','\t','\\','\f','\b',};for(int i=0;i<' ';i++){escapeChars.Add((char)i);}foreach(char escapeChar in escapeChars.Union(new[]{'\''})){SingleQuoteCharEscapeFlags[escapeChar]=true;}foreach(char escapeChar in escapeChars.Union(new[]{'"'})){DoubleQuoteCharEscapeFlags[escapeChar]=true;}foreach(char escapeChar in escapeChars.Union(new[]{'"','\'','<','>','&'})){HtmlCharEscapeFlags[escapeChar]=true;}}private const string EscapedUnicodeText="!";public static bool[]GetCharEscapeFlags(StringEscapeHandling stringEscapeHandling,char quoteChar){if(stringEscapeHandling==StringEscapeHandling.EscapeHtml){return HtmlCharEscapeFlags;}if(quoteChar=='"'){return DoubleQuoteCharEscapeFlags;}return SingleQuoteCharEscapeFlags;}public static bool ShouldEscapeJavaScriptString(string?s,bool[]charEscapeFlags){if(s==null){return false;}for(int i=0;i<s.Length;i++){char c=s[i];if(c>=charEscapeFlags.Length||charEscapeFlags[c]){return true;}}return false;}public static void WriteEscapedJavaScriptString(TextWriter writer,string?s,char delimiter,bool appendDelimiters,bool[]charEscapeFlags,StringEscapeHandling stringEscapeHandling,IArrayPool<char>?bufferPool,ref char[]?writeBuffer){if(appendDelimiters){writer.Write(delimiter);}if(!StringUtils.IsNullOrEmpty(s)){int lastWritePosition=FirstCharToEscape(s,charEscapeFlags,stringEscapeHandling);if(lastWritePosition==-1){writer.Write(s);}else{if(lastWritePosition!=0){if(writeBuffer==null||writeBuffer.Length<lastWritePosition){writeBuffer=BufferUtils.EnsureBufferSize(bufferPool,lastWritePosition,writeBuffer);}s.CopyTo(0,writeBuffer,0,lastWritePosition);writer.Write(writeBuffer,0,lastWritePosition);}int length;for(int i=lastWritePosition;i<s.Length;i++){char c=s[i];if(c<charEscapeFlags.Length&&!charEscapeFlags[c]){continue;}string?escapedValue;switch(c){case'\t':escapedValue=@"\t";break;case'\n':escapedValue=@"\n";break;case'\r':escapedValue=@"\r";break;case'\f':escapedValue=@"\f";break;case'\b':escapedValue=@"\b";break;case'\\':escapedValue=@"\\";break;case'\u0085':escapedValue=@"\u0085";break;case'\u2028':escapedValue=@"\u2028";break;case'\u2029':escapedValue=@"\u2029";break;default:if(c<charEscapeFlags.Length||stringEscapeHandling==StringEscapeHandling.EscapeNonAscii){if(c=='\''&&stringEscapeHandling!=StringEscapeHandling.EscapeHtml){escapedValue=@"\'";}else if(c=='"'&&stringEscapeHandling!=StringEscapeHandling.EscapeHtml){escapedValue=@"\""";}else{if(writeBuffer==null||writeBuffer.Length<UnicodeTextLength){writeBuffer=BufferUtils.EnsureBufferSize(bufferPool,UnicodeTextLength,writeBuffer);}StringUtils.ToCharAsUnicode(c,writeBuffer!);escapedValue=EscapedUnicodeText;}}else{escapedValue=null;}break;}if(escapedValue==null){continue;}bool isEscapedUnicodeText=string.Equals(escapedValue,EscapedUnicodeText,StringComparison.Ordinal);if(i>lastWritePosition){length=i-lastWritePosition+((isEscapedUnicodeText)?UnicodeTextLength:0);int start=(isEscapedUnicodeText)?UnicodeTextLength:0;if(writeBuffer==null||writeBuffer.Length<length){char[]newBuffer=BufferUtils.RentBuffer(bufferPool,length);if(isEscapedUnicodeText){MiscellaneousUtils.Assert(writeBuffer!=null,"Write buffer should never be null because it is set when the escaped unicode text is encountered.");Array.Copy(writeBuffer,newBuffer,UnicodeTextLength);}BufferUtils.ReturnBuffer(bufferPool,writeBuffer);writeBuffer=newBuffer;}s.CopyTo(lastWritePosition,writeBuffer,start,length-start);writer.Write(writeBuffer,start,length-start);}lastWritePosition=i+1;if(!isEscapedUnicodeText){writer.Write(escapedValue);}else{writer.Write(writeBuffer,0,UnicodeTextLength);}}MiscellaneousUtils.Assert(lastWritePosition!=0);length=s.Length-lastWritePosition;if(length>0){if(writeBuffer==null||writeBuffer.Length<length){writeBuffer=BufferUtils.EnsureBufferSize(bufferPool,length,writeBuffer);}s.CopyTo(lastWritePosition,writeBuffer,0,length);writer.Write(writeBuffer,0,length);}}}if(appendDelimiters){writer.Write(delimiter);}}public static string ToEscapedJavaScriptString(string?value,char delimiter,bool appendDelimiters,StringEscapeHandling stringEscapeHandling){bool[]charEscapeFlags=GetCharEscapeFlags(stringEscapeHandling,delimiter);using(StringWriter w=StringUtils.CreateStringWriter(value?.Length??16)){char[]?buffer=null;WriteEscapedJavaScriptString(w,value,delimiter,appendDelimiters,charEscapeFlags,stringEscapeHandling,null,ref buffer);return w.ToString();}}private static int FirstCharToEscape(string s,bool[]charEscapeFlags,StringEscapeHandling stringEscapeHandling){for(int i=0;i!=s.Length;i++){char c=s[i];if(c<charEscapeFlags.Length){if(charEscapeFlags[c]){return i;}}else if(stringEscapeHandling==StringEscapeHandling.EscapeNonAscii){return i;}else{switch(c){case'\u0085':case'\u2028':case'\u2029':return i;}}}return-1;}
#if HAVE_ASYNC
public static Task WriteEscapedJavaScriptStringAsync(TextWriter writer,string s,char delimiter,bool appendDelimiters,bool[]charEscapeFlags,StringEscapeHandling stringEscapeHandling,JsonTextWriter client,char[]writeBuffer,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}if(appendDelimiters){return WriteEscapedJavaScriptStringWithDelimitersAsync(writer,s,delimiter,charEscapeFlags,stringEscapeHandling,client,writeBuffer,cancellationToken);}if(StringUtils.IsNullOrEmpty(s)){return cancellationToken.CancelIfRequestedAsync()??AsyncUtils.CompletedTask;}return WriteEscapedJavaScriptStringWithoutDelimitersAsync(writer,s,charEscapeFlags,stringEscapeHandling,client,writeBuffer,cancellationToken);}private static Task WriteEscapedJavaScriptStringWithDelimitersAsync(TextWriter writer,string s,char delimiter,bool[]charEscapeFlags,StringEscapeHandling stringEscapeHandling,JsonTextWriter client,char[]writeBuffer,CancellationToken cancellationToken){Task task=writer.WriteAsync(delimiter,cancellationToken);if(!task.IsCompletedSucessfully()){return WriteEscapedJavaScriptStringWithDelimitersAsync(task,writer,s,delimiter,charEscapeFlags,stringEscapeHandling,client,writeBuffer,cancellationToken);}if(!StringUtils.IsNullOrEmpty(s)){task=WriteEscapedJavaScriptStringWithoutDelimitersAsync(writer,s,charEscapeFlags,stringEscapeHandling,client,writeBuffer,cancellationToken);if(task.IsCompletedSucessfully()){return writer.WriteAsync(delimiter,cancellationToken);}}return WriteCharAsync(task,writer,delimiter,cancellationToken);}private static async Task WriteEscapedJavaScriptStringWithDelimitersAsync(Task task,TextWriter writer,string s,char delimiter,bool[]charEscapeFlags,StringEscapeHandling stringEscapeHandling,JsonTextWriter client,char[]writeBuffer,CancellationToken cancellationToken){await task.ConfigureAwait(false);if(!StringUtils.IsNullOrEmpty(s)){await WriteEscapedJavaScriptStringWithoutDelimitersAsync(writer,s,charEscapeFlags,stringEscapeHandling,client,writeBuffer,cancellationToken).ConfigureAwait(false);}await writer.WriteAsync(delimiter).ConfigureAwait(false);}public static async Task WriteCharAsync(Task task,TextWriter writer,char c,CancellationToken cancellationToken){await task.ConfigureAwait(false);await writer.WriteAsync(c,cancellationToken).ConfigureAwait(false);}private static Task WriteEscapedJavaScriptStringWithoutDelimitersAsync(TextWriter writer,string s,bool[]charEscapeFlags,StringEscapeHandling stringEscapeHandling,JsonTextWriter client,char[]writeBuffer,CancellationToken cancellationToken){int i=FirstCharToEscape(s,charEscapeFlags,stringEscapeHandling);return i==-1?writer.WriteAsync(s,cancellationToken):WriteDefinitelyEscapedJavaScriptStringWithoutDelimitersAsync(writer,s,i,charEscapeFlags,stringEscapeHandling,client,writeBuffer,cancellationToken);}private static async Task WriteDefinitelyEscapedJavaScriptStringWithoutDelimitersAsync(TextWriter writer,string s,int lastWritePosition,bool[]charEscapeFlags,StringEscapeHandling stringEscapeHandling,JsonTextWriter client,char[]writeBuffer,CancellationToken cancellationToken){if(writeBuffer==null||writeBuffer.Length<lastWritePosition){writeBuffer=client.EnsureWriteBuffer(lastWritePosition,UnicodeTextLength);}if(lastWritePosition!=0){s.CopyTo(0,writeBuffer,0,lastWritePosition);await writer.WriteAsync(writeBuffer,0,lastWritePosition,cancellationToken).ConfigureAwait(false);}int length;bool isEscapedUnicodeText=false;string?escapedValue=null;for(int i=lastWritePosition;i<s.Length;i++){char c=s[i];if(c<charEscapeFlags.Length&&!charEscapeFlags[c]){continue;}switch(c){case'\t':escapedValue=@"\t";break;case'\n':escapedValue=@"\n";break;case'\r':escapedValue=@"\r";break;case'\f':escapedValue=@"\f";break;case'\b':escapedValue=@"\b";break;case'\\':escapedValue=@"\\";break;case'\u0085':escapedValue=@"\u0085";break;case'\u2028':escapedValue=@"\u2028";break;case'\u2029':escapedValue=@"\u2029";break;default:if(c<charEscapeFlags.Length||stringEscapeHandling==StringEscapeHandling.EscapeNonAscii){if(c=='\''&&stringEscapeHandling!=StringEscapeHandling.EscapeHtml){escapedValue=@"\'";}else if(c=='"'&&stringEscapeHandling!=StringEscapeHandling.EscapeHtml){escapedValue=@"\""";}else{if(writeBuffer.Length<UnicodeTextLength){writeBuffer=client.EnsureWriteBuffer(UnicodeTextLength,0);}StringUtils.ToCharAsUnicode(c,writeBuffer);isEscapedUnicodeText=true;}}else{continue;}break;}if(i>lastWritePosition){length=i-lastWritePosition+(isEscapedUnicodeText?UnicodeTextLength:0);int start=isEscapedUnicodeText?UnicodeTextLength:0;if(writeBuffer.Length<length){writeBuffer=client.EnsureWriteBuffer(length,UnicodeTextLength);}s.CopyTo(lastWritePosition,writeBuffer,start,length-start);await writer.WriteAsync(writeBuffer,start,length-start,cancellationToken).ConfigureAwait(false);}lastWritePosition=i+1;if(!isEscapedUnicodeText){await writer.WriteAsync(escapedValue!,cancellationToken).ConfigureAwait(false);}else{await writer.WriteAsync(writeBuffer,0,UnicodeTextLength,cancellationToken).ConfigureAwait(false);isEscapedUnicodeText=false;}}length=s.Length-lastWritePosition;if(length!=0){if(writeBuffer.Length<length){writeBuffer=client.EnsureWriteBuffer(length,0);}s.CopyTo(lastWritePosition,writeBuffer,0,length);await writer.WriteAsync(writeBuffer,0,length,cancellationToken).ConfigureAwait(false);}}
#endif
public static bool TryGetDateFromConstructorJson(JsonReader reader,out DateTime dateTime,[NotNullWhen(false)]out string?errorMessage){dateTime=default;errorMessage=null;if(!TryGetDateConstructorValue(reader,out long?t1,out errorMessage)||t1==null){errorMessage=errorMessage??"Date constructor has no arguments.";return false;}if(!TryGetDateConstructorValue(reader,out long?t2,out errorMessage)){return false;}else if(t2!=null){List<long>dateArgs=new List<long>{t1.Value,t2.Value};while(true){if(!TryGetDateConstructorValue(reader,out long?integer,out errorMessage)){return false;}else if(integer!=null){dateArgs.Add(integer.Value);}else{break;}}if(dateArgs.Count>7){errorMessage="Unexpected number of arguments when reading date constructor.";return false;}while(dateArgs.Count<7){dateArgs.Add(0);}dateTime=new DateTime((int)dateArgs[0],(int)dateArgs[1]+1,dateArgs[2]==0?1:(int)dateArgs[2],(int)dateArgs[3],(int)dateArgs[4],(int)dateArgs[5],(int)dateArgs[6]);}else{dateTime=DateTimeUtils.ConvertJavaScriptTicksToDateTime(t1.Value);}return true;}private static bool TryGetDateConstructorValue(JsonReader reader,out long?integer,[NotNullWhen(false)]out string?errorMessage){integer=null;errorMessage=null;if(!reader.Read()){errorMessage="Unexpected end when reading date constructor.";return false;}if(reader.TokenType==JsonToken.EndConstructor){return true;}if(reader.TokenType!=JsonToken.Integer){errorMessage="Unexpected token when reading date constructor. Expected Integer, got "+reader.TokenType;return false;}integer=(long)reader.Value!;return true;}}}
#if HAVE_ASYNC
namespace Newtonsoft.Json.Linq{public partial class JConstructor{public override async Task WriteToAsync(JsonWriter writer,CancellationToken cancellationToken,params JsonConverter[]converters){await writer.WriteStartConstructorAsync(_name??string.Empty,cancellationToken).ConfigureAwait(false);for(int i=0;i<_values.Count;i++){await _values[i].WriteToAsync(writer,cancellationToken,converters).ConfigureAwait(false);}await writer.WriteEndConstructorAsync(cancellationToken).ConfigureAwait(false);}public new static Task<JConstructor>LoadAsync(JsonReader reader,CancellationToken cancellationToken=default){return LoadAsync(reader,null,cancellationToken);}public new static async Task<JConstructor>LoadAsync(JsonReader reader,JsonLoadSettings?settings,CancellationToken cancellationToken=default){if(reader.TokenType==JsonToken.None){if(!await reader.ReadAsync(cancellationToken).ConfigureAwait(false)){throw JsonReaderException.Create(reader,"Error reading JConstructor from JsonReader.");}}await reader.MoveToContentAsync(cancellationToken).ConfigureAwait(false);if(reader.TokenType!=JsonToken.StartConstructor){throw JsonReaderException.Create(reader,"Error reading JConstructor from JsonReader. Current JsonReader item is not a constructor: {0}".FormatWith(CultureInfo.InvariantCulture,reader.TokenType));}JConstructor c=new JConstructor((string)reader.Value!);c.SetLineInfo(reader as IJsonLineInfo,settings);await c.ReadTokenFromAsync(reader,settings,cancellationToken).ConfigureAwait(false);return c;}}}
#endif
namespace Newtonsoft.Json.Linq{public partial class JConstructor:JContainer{private string?_name;private readonly List<JToken>_values=new List<JToken>();protected override IList<JToken>ChildrenTokens=>_values;internal override int IndexOfItem(JToken?item){if(item==null){return-1;}return _values.IndexOfReference(item);}internal override void MergeItem(object content,JsonMergeSettings?settings){if(!(content is JConstructor c)){return;}if(c.Name!=null){Name=c.Name;}MergeEnumerableContent(this,c,settings);}public string?Name{get=>_name;set=>_name=value;}public override JTokenType Type=>JTokenType.Constructor;public JConstructor(){}public JConstructor(JConstructor other):base(other){_name=other.Name;}public JConstructor(string name,params object[]content):this(name,(object)content){}public JConstructor(string name,object content):this(name){Add(content);}public JConstructor(string name){if(name==null){throw new ArgumentNullException(nameof(name));}if(name.Length==0){throw new ArgumentException("Constructor name cannot be empty.",nameof(name));}_name=name;}internal override bool DeepEquals(JToken node){return(node is JConstructor c&&_name==c.Name&&ContentsEqual(c));}internal override JToken CloneToken(){return new JConstructor(this);}public override void WriteTo(JsonWriter writer,params JsonConverter[]converters){writer.WriteStartConstructor(_name!);int count=_values.Count;for(int i=0;i<count;i++){_values[i].WriteTo(writer,converters);}writer.WriteEndConstructor();}public override JToken?this[object key]{get{ValidationUtils.ArgumentNotNull(key,nameof(key));if(!(key is int i)){throw new ArgumentException("Accessed JConstructor values with invalid key value: {0}. Argument position index expected.".FormatWith(CultureInfo.InvariantCulture,MiscellaneousUtils.ToString(key)));}return GetItem(i);}set{ValidationUtils.ArgumentNotNull(key,nameof(key));if(!(key is int i)){throw new ArgumentException("Set JConstructor values with invalid key value: {0}. Argument position index expected.".FormatWith(CultureInfo.InvariantCulture,MiscellaneousUtils.ToString(key)));}SetItem(i,value);}}internal override int GetDeepHashCode(){return(_name?.GetHashCode()??0)^ContentsHashCode();}public new static JConstructor Load(JsonReader reader){return Load(reader,null);}public new static JConstructor Load(JsonReader reader,JsonLoadSettings?settings){if(reader.TokenType==JsonToken.None){if(!reader.Read()){throw JsonReaderException.Create(reader,"Error reading JConstructor from JsonReader.");}}reader.MoveToContent();if(reader.TokenType!=JsonToken.StartConstructor){throw JsonReaderException.Create(reader,"Error reading JConstructor from JsonReader. Current JsonReader item is not a constructor: {0}".FormatWith(CultureInfo.InvariantCulture,reader.TokenType));}JConstructor c=new JConstructor((string)reader.Value!);c.SetLineInfo(reader as IJsonLineInfo,settings);c.ReadTokenFrom(reader,settings);return c;}}}
#if HAVE_ASYNC
namespace Newtonsoft.Json.Linq{public abstract partial class JContainer{internal async Task ReadTokenFromAsync(JsonReader reader,JsonLoadSettings?options,CancellationToken cancellationToken=default){ValidationUtils.ArgumentNotNull(reader,nameof(reader));int startDepth=reader.Depth;if(!await reader.ReadAsync(cancellationToken).ConfigureAwait(false)){throw JsonReaderException.Create(reader,"Error reading {0} from JsonReader.".FormatWith(CultureInfo.InvariantCulture,GetType().Name));}await ReadContentFromAsync(reader,options,cancellationToken).ConfigureAwait(false);if(reader.Depth>startDepth){throw JsonReaderException.Create(reader,"Unexpected end of content while loading {0}.".FormatWith(CultureInfo.InvariantCulture,GetType().Name));}}private async Task ReadContentFromAsync(JsonReader reader,JsonLoadSettings?settings,CancellationToken cancellationToken=default){IJsonLineInfo?lineInfo=reader as IJsonLineInfo;JContainer?parent=this;do{if(parent is JProperty p&&p.Value!=null){if(parent==this){return;}parent=parent.Parent;}MiscellaneousUtils.Assert(parent!=null);switch(reader.TokenType){case JsonToken.None:break;case JsonToken.StartArray:JArray a=new JArray();a.SetLineInfo(lineInfo,settings);parent.Add(a);parent=a;break;case JsonToken.EndArray:if(parent==this){return;}parent=parent.Parent;break;case JsonToken.StartObject:JObject o=new JObject();o.SetLineInfo(lineInfo,settings);parent.Add(o);parent=o;break;case JsonToken.EndObject:if(parent==this){return;}parent=parent.Parent;break;case JsonToken.StartConstructor:JConstructor constructor=new JConstructor(reader.Value!.ToString());constructor.SetLineInfo(lineInfo,settings);parent.Add(constructor);parent=constructor;break;case JsonToken.EndConstructor:if(parent==this){return;}parent=parent.Parent;break;case JsonToken.String:case JsonToken.Integer:case JsonToken.Float:case JsonToken.Date:case JsonToken.Boolean:case JsonToken.Bytes:JValue v=new JValue(reader.Value);v.SetLineInfo(lineInfo,settings);parent.Add(v);break;case JsonToken.Comment:if(settings!=null&&settings.CommentHandling==CommentHandling.Load){v=JValue.CreateComment(reader.Value!.ToString());v.SetLineInfo(lineInfo,settings);parent.Add(v);}break;case JsonToken.Null:v=JValue.CreateNull();v.SetLineInfo(lineInfo,settings);parent.Add(v);break;case JsonToken.Undefined:v=JValue.CreateUndefined();v.SetLineInfo(lineInfo,settings);parent.Add(v);break;case JsonToken.PropertyName:JProperty?property=ReadProperty(reader,settings,lineInfo,parent);if(property!=null){parent=property;}else{await reader.SkipAsync().ConfigureAwait(false);}break;default:throw new InvalidOperationException("The JsonReader should not be on a token of type {0}.".FormatWith(CultureInfo.InvariantCulture,reader.TokenType));}}while(await reader.ReadAsync(cancellationToken).ConfigureAwait(false));}}}
#endif
namespace Newtonsoft.Json.Linq{public abstract partial class JContainer:JToken,IList<JToken>
#if HAVE_COMPONENT_MODEL
,ITypedList,IBindingList
#endif
,IList
#if HAVE_INOTIFY_COLLECTION_CHANGED
,INotifyCollectionChanged
#endif
{
#if HAVE_COMPONENT_MODEL
internal ListChangedEventHandler?_listChanged;internal AddingNewEventHandler?_addingNew;public event ListChangedEventHandler ListChanged{add=>_listChanged+=value;remove=>_listChanged-=value;}public event AddingNewEventHandler AddingNew{add=>_addingNew+=value;remove=>_addingNew-=value;}
#endif
#if HAVE_INOTIFY_COLLECTION_CHANGED
internal NotifyCollectionChangedEventHandler?_collectionChanged;public event NotifyCollectionChangedEventHandler CollectionChanged{add{_collectionChanged+=value;}remove{_collectionChanged-=value;}}
#endif
protected abstract IList<JToken>ChildrenTokens{get;}private object?_syncRoot;
#if (HAVE_COMPONENT_MODEL || HAVE_INOTIFY_COLLECTION_CHANGED)
private bool _busy;
#endif
internal JContainer(){}internal JContainer(JContainer other):this(){ValidationUtils.ArgumentNotNull(other,nameof(other));int i=0;foreach(JToken child in other){TryAddInternal(i,child,false);i++;}CopyAnnotations(this,other);}internal void CheckReentrancy(){
#if (HAVE_COMPONENT_MODEL || HAVE_INOTIFY_COLLECTION_CHANGED)
if(_busy){throw new InvalidOperationException("Cannot change {0} during a collection change event.".FormatWith(CultureInfo.InvariantCulture,GetType()));}
#endif
}internal virtual IList<JToken>CreateChildrenCollection(){return new List<JToken>();}
#if HAVE_COMPONENT_MODEL
protected virtual void OnAddingNew(AddingNewEventArgs e){_addingNew?.Invoke(this,e);}protected virtual void OnListChanged(ListChangedEventArgs e){ListChangedEventHandler?handler=_listChanged;if(handler!=null){_busy=true;try{handler(this,e);}finally{_busy=false;}}}
#endif
#if HAVE_INOTIFY_COLLECTION_CHANGED
protected virtual void OnCollectionChanged(NotifyCollectionChangedEventArgs e){NotifyCollectionChangedEventHandler?handler=_collectionChanged;if(handler!=null){_busy=true;try{handler(this,e);}finally{_busy=false;}}}
#endif
public override bool HasValues=>ChildrenTokens.Count>0;internal bool ContentsEqual(JContainer container){if(container==this){return true;}IList<JToken>t1=ChildrenTokens;IList<JToken>t2=container.ChildrenTokens;if(t1.Count!=t2.Count){return false;}for(int i=0;i<t1.Count;i++){if(!t1[i].DeepEquals(t2[i])){return false;}}return true;}public override JToken?First{get{IList<JToken>children=ChildrenTokens;return(children.Count>0)?children[0]:null;}}public override JToken?Last{get{IList<JToken>children=ChildrenTokens;int count=children.Count;return(count>0)?children[count-1]:null;}}public override JEnumerable<JToken>Children(){return new JEnumerable<JToken>(ChildrenTokens);}public override IEnumerable<T?>Values<T>()where T:default{return ChildrenTokens.Convert<JToken,T>();}public IEnumerable<JToken>Descendants(){return GetDescendants(false);}public IEnumerable<JToken>DescendantsAndSelf(){return GetDescendants(true);}internal IEnumerable<JToken>GetDescendants(bool self){if(self){yield return this;}foreach(JToken o in ChildrenTokens){yield return o;if(o is JContainer c){foreach(JToken d in c.Descendants()){yield return d;}}}}internal bool IsMultiContent([NotNullWhen(true)]object?content){return(content is IEnumerable&&!(content is string)&&!(content is JToken)&&!(content is byte[]));}internal JToken EnsureParentToken(JToken?item,bool skipParentCheck){if(item==null){return JValue.CreateNull();}if(skipParentCheck){return item;}if(item.Parent!=null||item==this||(item.HasValues&&Root==item)){item=item.CloneToken();}return item;}internal abstract int IndexOfItem(JToken?item);internal virtual bool InsertItem(int index,JToken?item,bool skipParentCheck){IList<JToken>children=ChildrenTokens;if(index>children.Count){throw new ArgumentOutOfRangeException(nameof(index),"Index must be within the bounds of the List.");}CheckReentrancy();item=EnsureParentToken(item,skipParentCheck);JToken?previous=(index==0)?null:children[index-1];JToken?next=(index==children.Count)?null:children[index];ValidateToken(item,null);item.Parent=this;item.Previous=previous;if(previous!=null){previous.Next=item;}item.Next=next;if(next!=null){next.Previous=item;}children.Insert(index,item);
#if HAVE_COMPONENT_MODEL
if(_listChanged!=null){OnListChanged(new ListChangedEventArgs(ListChangedType.ItemAdded,index));}
#endif
#if HAVE_INOTIFY_COLLECTION_CHANGED
if(_collectionChanged!=null){OnCollectionChanged(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Add,item,index));}
#endif
return true;}internal virtual void RemoveItemAt(int index){IList<JToken>children=ChildrenTokens;if(index<0){throw new ArgumentOutOfRangeException(nameof(index),"Index is less than 0.");}if(index>=children.Count){throw new ArgumentOutOfRangeException(nameof(index),"Index is equal to or greater than Count.");}CheckReentrancy();JToken item=children[index];JToken?previous=(index==0)?null:children[index-1];JToken?next=(index==children.Count-1)?null:children[index+1];if(previous!=null){previous.Next=next;}if(next!=null){next.Previous=previous;}item.Parent=null;item.Previous=null;item.Next=null;children.RemoveAt(index);
#if HAVE_COMPONENT_MODEL
if(_listChanged!=null){OnListChanged(new ListChangedEventArgs(ListChangedType.ItemDeleted,index));}
#endif
#if HAVE_INOTIFY_COLLECTION_CHANGED
if(_collectionChanged!=null){OnCollectionChanged(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Remove,item,index));}
#endif
}internal virtual bool RemoveItem(JToken?item){if(item!=null){int index=IndexOfItem(item);if(index>=0){RemoveItemAt(index);return true;}}return false;}internal virtual JToken GetItem(int index){return ChildrenTokens[index];}internal virtual void SetItem(int index,JToken?item){IList<JToken>children=ChildrenTokens;if(index<0){throw new ArgumentOutOfRangeException(nameof(index),"Index is less than 0.");}if(index>=children.Count){throw new ArgumentOutOfRangeException(nameof(index),"Index is equal to or greater than Count.");}JToken existing=children[index];if(IsTokenUnchanged(existing,item)){return;}CheckReentrancy();item=EnsureParentToken(item,false);ValidateToken(item,existing);JToken?previous=(index==0)?null:children[index-1];JToken?next=(index==children.Count-1)?null:children[index+1];item.Parent=this;item.Previous=previous;if(previous!=null){previous.Next=item;}item.Next=next;if(next!=null){next.Previous=item;}children[index]=item;existing.Parent=null;existing.Previous=null;existing.Next=null;
#if HAVE_COMPONENT_MODEL
if(_listChanged!=null){OnListChanged(new ListChangedEventArgs(ListChangedType.ItemChanged,index));}
#endif
#if HAVE_INOTIFY_COLLECTION_CHANGED
if(_collectionChanged!=null){OnCollectionChanged(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Replace,item,existing,index));}
#endif
}internal virtual void ClearItems(){CheckReentrancy();IList<JToken>children=ChildrenTokens;foreach(JToken item in children){item.Parent=null;item.Previous=null;item.Next=null;}children.Clear();
#if HAVE_COMPONENT_MODEL
if(_listChanged!=null){OnListChanged(new ListChangedEventArgs(ListChangedType.Reset,-1));}
#endif
#if HAVE_INOTIFY_COLLECTION_CHANGED
if(_collectionChanged!=null){OnCollectionChanged(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Reset));}
#endif
}internal virtual void ReplaceItem(JToken existing,JToken replacement){if(existing==null||existing.Parent!=this){return;}int index=IndexOfItem(existing);SetItem(index,replacement);}internal virtual bool ContainsItem(JToken?item){return(IndexOfItem(item)!=-1);}internal virtual void CopyItemsTo(Array array,int arrayIndex){if(array==null){throw new ArgumentNullException(nameof(array));}if(arrayIndex<0){throw new ArgumentOutOfRangeException(nameof(arrayIndex),"arrayIndex is less than 0.");}if(arrayIndex>=array.Length&&arrayIndex!=0){throw new ArgumentException("arrayIndex is equal to or greater than the length of array.");}if(Count>array.Length-arrayIndex){throw new ArgumentException("The number of elements in the source JObject is greater than the available space from arrayIndex to the end of the destination array.");}int index=0;foreach(JToken token in ChildrenTokens){array.SetValue(token,arrayIndex+index);index++;}}internal static bool IsTokenUnchanged(JToken currentValue,JToken?newValue){if(currentValue is JValue v1){if(newValue==null){return v1.Type==JTokenType.Null;}return v1.Equals(newValue);}return false;}internal virtual void ValidateToken(JToken o,JToken?existing){ValidationUtils.ArgumentNotNull(o,nameof(o));if(o.Type==JTokenType.Property){throw new ArgumentException("Can not add {0} to {1}.".FormatWith(CultureInfo.InvariantCulture,o.GetType(),GetType()));}}public virtual void Add(object?content){TryAddInternal(ChildrenTokens.Count,content,false);}internal bool TryAdd(object?content){return TryAddInternal(ChildrenTokens.Count,content,false);}internal void AddAndSkipParentCheck(JToken token){TryAddInternal(ChildrenTokens.Count,token,true);}public void AddFirst(object?content){TryAddInternal(0,content,false);}internal bool TryAddInternal(int index,object?content,bool skipParentCheck){if(IsMultiContent(content)){IEnumerable enumerable=(IEnumerable)content;int multiIndex=index;foreach(object c in enumerable){TryAddInternal(multiIndex,c,skipParentCheck);multiIndex++;}return true;}else{JToken item=CreateFromContent(content);return InsertItem(index,item,skipParentCheck);}}internal static JToken CreateFromContent(object?content){if(content is JToken token){return token;}return new JValue(content);}public JsonWriter CreateWriter(){return new JTokenWriter(this);}public void ReplaceAll(object content){ClearItems();Add(content);}public void RemoveAll(){ClearItems();}internal abstract void MergeItem(object content,JsonMergeSettings?settings);public void Merge(object?content){if(content==null){return;}ValidateContent(content);MergeItem(content,null);}public void Merge(object?content,JsonMergeSettings?settings){if(content==null){return;}ValidateContent(content);MergeItem(content,settings);}private void ValidateContent(object content){if(content.GetType().IsSubclassOf(typeof(JToken))){return;}if(IsMultiContent(content)){return;}throw new ArgumentException("Could not determine JSON object type for type {0}.".FormatWith(CultureInfo.InvariantCulture,content.GetType()),nameof(content));}internal void ReadTokenFrom(JsonReader reader,JsonLoadSettings?options){int startDepth=reader.Depth;if(!reader.Read()){throw JsonReaderException.Create(reader,"Error reading {0} from JsonReader.".FormatWith(CultureInfo.InvariantCulture,GetType().Name));}ReadContentFrom(reader,options);int endDepth=reader.Depth;if(endDepth>startDepth){throw JsonReaderException.Create(reader,"Unexpected end of content while loading {0}.".FormatWith(CultureInfo.InvariantCulture,GetType().Name));}}internal void ReadContentFrom(JsonReader r,JsonLoadSettings?settings){ValidationUtils.ArgumentNotNull(r,nameof(r));IJsonLineInfo?lineInfo=r as IJsonLineInfo;JContainer?parent=this;do{if(parent is JProperty p&&p.Value!=null){if(parent==this){return;}parent=parent.Parent;}MiscellaneousUtils.Assert(parent!=null);switch(r.TokenType){case JsonToken.None:break;case JsonToken.StartArray:JArray a=new JArray();a.SetLineInfo(lineInfo,settings);parent.Add(a);parent=a;break;case JsonToken.EndArray:if(parent==this){return;}parent=parent.Parent;break;case JsonToken.StartObject:JObject o=new JObject();o.SetLineInfo(lineInfo,settings);parent.Add(o);parent=o;break;case JsonToken.EndObject:if(parent==this){return;}parent=parent.Parent;break;case JsonToken.StartConstructor:JConstructor constructor=new JConstructor(r.Value!.ToString());constructor.SetLineInfo(lineInfo,settings);parent.Add(constructor);parent=constructor;break;case JsonToken.EndConstructor:if(parent==this){return;}parent=parent.Parent;break;case JsonToken.String:case JsonToken.Integer:case JsonToken.Float:case JsonToken.Date:case JsonToken.Boolean:case JsonToken.Bytes:JValue v=new JValue(r.Value);v.SetLineInfo(lineInfo,settings);parent.Add(v);break;case JsonToken.Comment:if(settings!=null&&settings.CommentHandling==CommentHandling.Load){v=JValue.CreateComment(r.Value!.ToString());v.SetLineInfo(lineInfo,settings);parent.Add(v);}break;case JsonToken.Null:v=JValue.CreateNull();v.SetLineInfo(lineInfo,settings);parent.Add(v);break;case JsonToken.Undefined:v=JValue.CreateUndefined();v.SetLineInfo(lineInfo,settings);parent.Add(v);break;case JsonToken.PropertyName:JProperty?property=ReadProperty(r,settings,lineInfo,parent);if(property!=null){parent=property;}else{r.Skip();}break;default:throw new InvalidOperationException("The JsonReader should not be on a token of type {0}.".FormatWith(CultureInfo.InvariantCulture,r.TokenType));}}while(r.Read());}private static JProperty?ReadProperty(JsonReader r,JsonLoadSettings?settings,IJsonLineInfo?lineInfo,JContainer parent){DuplicatePropertyNameHandling duplicatePropertyNameHandling=settings?.DuplicatePropertyNameHandling??DuplicatePropertyNameHandling.Replace;JObject parentObject=(JObject)parent;string propertyName=r.Value!.ToString();JProperty?existingPropertyWithName=parentObject.Property(propertyName,StringComparison.Ordinal);if(existingPropertyWithName!=null){if(duplicatePropertyNameHandling==DuplicatePropertyNameHandling.Ignore){return null;}else if(duplicatePropertyNameHandling==DuplicatePropertyNameHandling.Error){throw JsonReaderException.Create(r,"Property with the name '{0}' already exists in the current JSON object.".FormatWith(CultureInfo.InvariantCulture,propertyName));}}JProperty property=new JProperty(propertyName);property.SetLineInfo(lineInfo,settings);if(existingPropertyWithName==null){parent.Add(property);}else{existingPropertyWithName.Replace(property);}return property;}internal int ContentsHashCode(){int hashCode=0;foreach(JToken item in ChildrenTokens){hashCode^=item.GetDeepHashCode();}return hashCode;}
#if HAVE_COMPONENT_MODEL
string ITypedList.GetListName(PropertyDescriptor[]listAccessors){return string.Empty;}PropertyDescriptorCollection?ITypedList.GetItemProperties(PropertyDescriptor[]listAccessors){ICustomTypeDescriptor?d=First as ICustomTypeDescriptor;return d?.GetProperties();}
#endif
int IList<JToken>.IndexOf(JToken item){return IndexOfItem(item);}void IList<JToken>.Insert(int index,JToken item){InsertItem(index,item,false);}void IList<JToken>.RemoveAt(int index){RemoveItemAt(index);}JToken IList<JToken>.this[int index]{get=>GetItem(index);set=>SetItem(index,value);}void ICollection<JToken>.Add(JToken item){Add(item);}void ICollection<JToken>.Clear(){ClearItems();}bool ICollection<JToken>.Contains(JToken item){return ContainsItem(item);}void ICollection<JToken>.CopyTo(JToken[]array,int arrayIndex){CopyItemsTo(array,arrayIndex);}bool ICollection<JToken>.IsReadOnly=>false;bool ICollection<JToken>.Remove(JToken item){return RemoveItem(item);}private JToken?EnsureValue(object value){if(value==null){return null;}if(value is JToken token){return token;}throw new ArgumentException("Argument is not a JToken.");}int IList.Add(object value){Add(EnsureValue(value));return Count-1;}void IList.Clear(){ClearItems();}bool IList.Contains(object value){return ContainsItem(EnsureValue(value));}int IList.IndexOf(object value){return IndexOfItem(EnsureValue(value));}void IList.Insert(int index,object value){InsertItem(index,EnsureValue(value),false);}bool IList.IsFixedSize=>false;bool IList.IsReadOnly=>false;void IList.Remove(object value){RemoveItem(EnsureValue(value));}void IList.RemoveAt(int index){RemoveItemAt(index);}object IList.this[int index]{get=>GetItem(index);set=>SetItem(index,EnsureValue(value));}void ICollection.CopyTo(Array array,int index){CopyItemsTo(array,index);}public int Count=>ChildrenTokens.Count;bool ICollection.IsSynchronized=>false;object ICollection.SyncRoot{get{if(_syncRoot==null){Interlocked.CompareExchange(ref _syncRoot,new object(),null);}return _syncRoot;}}
#if HAVE_COMPONENT_MODEL
void IBindingList.AddIndex(PropertyDescriptor property){}object IBindingList.AddNew(){AddingNewEventArgs args=new AddingNewEventArgs();OnAddingNew(args);if(args.NewObject==null){throw new JsonException("Could not determine new value to add to '{0}'.".FormatWith(CultureInfo.InvariantCulture,GetType()));}if(!(args.NewObject is JToken newItem)){throw new JsonException("New item to be added to collection must be compatible with {0}.".FormatWith(CultureInfo.InvariantCulture,typeof(JToken)));}Add(newItem);return newItem;}bool IBindingList.AllowEdit=>true;bool IBindingList.AllowNew=>true;bool IBindingList.AllowRemove=>true;void IBindingList.ApplySort(PropertyDescriptor property,ListSortDirection direction){throw new NotSupportedException();}int IBindingList.Find(PropertyDescriptor property,object key){throw new NotSupportedException();}bool IBindingList.IsSorted=>false;void IBindingList.RemoveIndex(PropertyDescriptor property){}void IBindingList.RemoveSort(){throw new NotSupportedException();}ListSortDirection IBindingList.SortDirection=>ListSortDirection.Ascending;PropertyDescriptor?IBindingList.SortProperty=>null;bool IBindingList.SupportsChangeNotification=>true;bool IBindingList.SupportsSearching=>false;bool IBindingList.SupportsSorting=>false;
#endif
internal static void MergeEnumerableContent(JContainer target,IEnumerable content,JsonMergeSettings?settings){switch(settings?.MergeArrayHandling??MergeArrayHandling.Concat){case MergeArrayHandling.Concat:foreach(object item in content){target.Add(CreateFromContent(item));}break;case MergeArrayHandling.Union:
#if HAVE_HASH_SET
HashSet<JToken>items=new HashSet<JToken>(target,EqualityComparer);foreach(object item in content){JToken contentItem=CreateFromContent(item);if(items.Add(contentItem)){target.Add(contentItem);}}
#else
Dictionary<JToken,bool>items=new Dictionary<JToken,bool>(EqualityComparer);foreach(JToken t in target){items[t]=true;}foreach(object item in content){JToken contentItem=CreateFromContent(item);if(!items.ContainsKey(contentItem)){items[contentItem]=true;target.Add(contentItem);}}
#endif
break;case MergeArrayHandling.Replace:if(target==content){break;}target.ClearItems();foreach(object item in content){target.Add(CreateFromContent(item));}break;case MergeArrayHandling.Merge:int i=0;foreach(object targetItem in content){if(i<target.Count){JToken?sourceItem=target[i];if(sourceItem is JContainer existingContainer){existingContainer.Merge(targetItem,settings);}else{if(targetItem!=null){JToken contentValue=CreateFromContent(targetItem);if(contentValue.Type!=JTokenType.Null){target[i]=contentValue;}}}}else{target.Add(CreateFromContent(targetItem));}i++;}break;default:throw new ArgumentOutOfRangeException(nameof(settings),"Unexpected merge array handling when merging JSON.");}}}}
#if !HAVE_LINQ
#else
#endif
namespace Newtonsoft.Json.Linq{public readonly struct JEnumerable<T>:IJEnumerable<T>,IEquatable<JEnumerable<T>>where T:JToken{public static readonly JEnumerable<T>Empty=new JEnumerable<T>(Enumerable.Empty<T>());private readonly IEnumerable<T>_enumerable;public JEnumerable(IEnumerable<T>enumerable){ValidationUtils.ArgumentNotNull(enumerable,nameof(enumerable));_enumerable=enumerable;}public IEnumerator<T>GetEnumerator(){return(_enumerable??Empty).GetEnumerator();}IEnumerator IEnumerable.GetEnumerator(){return GetEnumerator();}public IJEnumerable<JToken>this[object key]{get{if(_enumerable==null){return JEnumerable<JToken>.Empty;}return new JEnumerable<JToken>(_enumerable.Values<T,JToken>(key)!);}}public bool Equals(JEnumerable<T>other){return Equals(_enumerable,other._enumerable);}public override bool Equals(object obj){if(obj is JEnumerable<T>enumerable){return Equals(enumerable);}return false;}public override int GetHashCode(){if(_enumerable==null){return 0;}return _enumerable.GetHashCode();}}}
#if HAVE_ASYNC
namespace Newtonsoft.Json.Linq{public partial class JObject{public override Task WriteToAsync(JsonWriter writer,CancellationToken cancellationToken,params JsonConverter[]converters){Task t=writer.WriteStartObjectAsync(cancellationToken);if(!t.IsCompletedSucessfully()){return AwaitProperties(t,0,writer,cancellationToken,converters);}for(int i=0;i<_properties.Count;i++){t=_properties[i].WriteToAsync(writer,cancellationToken,converters);if(!t.IsCompletedSucessfully()){return AwaitProperties(t,i+1,writer,cancellationToken,converters);}}return writer.WriteEndObjectAsync(cancellationToken);async Task AwaitProperties(Task task,int i,JsonWriter Writer,CancellationToken CancellationToken,JsonConverter[]Converters){await task.ConfigureAwait(false);for(;i<_properties.Count;i++){await _properties[i].WriteToAsync(Writer,CancellationToken,Converters).ConfigureAwait(false);}await Writer.WriteEndObjectAsync(CancellationToken).ConfigureAwait(false);}}public new static Task<JObject>LoadAsync(JsonReader reader,CancellationToken cancellationToken=default){return LoadAsync(reader,null,cancellationToken);}public new static async Task<JObject>LoadAsync(JsonReader reader,JsonLoadSettings?settings,CancellationToken cancellationToken=default){ValidationUtils.ArgumentNotNull(reader,nameof(reader));if(reader.TokenType==JsonToken.None){if(!await reader.ReadAsync(cancellationToken).ConfigureAwait(false)){throw JsonReaderException.Create(reader,"Error reading JObject from JsonReader.");}}await reader.MoveToContentAsync(cancellationToken).ConfigureAwait(false);if(reader.TokenType!=JsonToken.StartObject){throw JsonReaderException.Create(reader,"Error reading JObject from JsonReader. Current JsonReader item is not an object: {0}".FormatWith(CultureInfo.InvariantCulture,reader.TokenType));}JObject o=new JObject();o.SetLineInfo(reader as IJsonLineInfo,settings);await o.ReadTokenFromAsync(reader,settings,cancellationToken).ConfigureAwait(false);return o;}}}
#endif
namespace Newtonsoft.Json.Linq{public partial class JObject:JContainer,IDictionary<string,JToken?>,INotifyPropertyChanged
#if HAVE_COMPONENT_MODEL
,ICustomTypeDescriptor
#endif
#if HAVE_INOTIFY_PROPERTY_CHANGING
,INotifyPropertyChanging
#endif
{private readonly JPropertyKeyedCollection _properties=new JPropertyKeyedCollection();protected override IList<JToken>ChildrenTokens=>_properties;public event PropertyChangedEventHandler?PropertyChanged;
#if HAVE_INOTIFY_PROPERTY_CHANGING
public event PropertyChangingEventHandler?PropertyChanging;
#endif
public JObject(){}public JObject(JObject other):base(other){}public JObject(params object[]content):this((object)content){}public JObject(object content){Add(content);}internal override bool DeepEquals(JToken node){if(!(node is JObject t)){return false;}return _properties.Compare(t._properties);}internal override int IndexOfItem(JToken?item){if(item==null){return-1;}return _properties.IndexOfReference(item);}internal override bool InsertItem(int index,JToken?item,bool skipParentCheck){if(item!=null&&item.Type==JTokenType.Comment){return false;}return base.InsertItem(index,item,skipParentCheck);}internal override void ValidateToken(JToken o,JToken?existing){ValidationUtils.ArgumentNotNull(o,nameof(o));if(o.Type!=JTokenType.Property){throw new ArgumentException("Can not add {0} to {1}.".FormatWith(CultureInfo.InvariantCulture,o.GetType(),GetType()));}JProperty newProperty=(JProperty)o;if(existing!=null){JProperty existingProperty=(JProperty)existing;if(newProperty.Name==existingProperty.Name){return;}}if(_properties.TryGetValue(newProperty.Name,out existing)){throw new ArgumentException("Can not add property {0} to {1}. Property with the same name already exists on object.".FormatWith(CultureInfo.InvariantCulture,newProperty.Name,GetType()));}}internal override void MergeItem(object content,JsonMergeSettings?settings){if(!(content is JObject o)){return;}foreach(KeyValuePair<string,JToken?>contentItem in o){JProperty?existingProperty=Property(contentItem.Key,settings?.PropertyNameComparison??StringComparison.Ordinal);if(existingProperty==null){Add(contentItem.Key,contentItem.Value);}else if(contentItem.Value!=null){if(!(existingProperty.Value is JContainer existingContainer)||existingContainer.Type!=contentItem.Value.Type){if(!IsNull(contentItem.Value)||settings?.MergeNullValueHandling==MergeNullValueHandling.Merge){existingProperty.Value=contentItem.Value;}}else{existingContainer.Merge(contentItem.Value,settings);}}}}private static bool IsNull(JToken token){if(token.Type==JTokenType.Null){return true;}if(token is JValue v&&v.Value==null){return true;}return false;}internal void InternalPropertyChanged(JProperty childProperty){OnPropertyChanged(childProperty.Name);
#if HAVE_COMPONENT_MODEL
if(_listChanged!=null){OnListChanged(new ListChangedEventArgs(ListChangedType.ItemChanged,IndexOfItem(childProperty)));}
#endif
#if HAVE_INOTIFY_COLLECTION_CHANGED
if(_collectionChanged!=null){OnCollectionChanged(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Replace,childProperty,childProperty,IndexOfItem(childProperty)));}
#endif
}internal void InternalPropertyChanging(JProperty childProperty){
#if HAVE_INOTIFY_PROPERTY_CHANGING
OnPropertyChanging(childProperty.Name);
#endif
}internal override JToken CloneToken(){return new JObject(this);}public override JTokenType Type=>JTokenType.Object;public IEnumerable<JProperty>Properties(){return _properties.Cast<JProperty>();}public JProperty?Property(string name){return Property(name,StringComparison.Ordinal);}public JProperty?Property(string name,StringComparison comparison){if(name==null){return null;}if(_properties.TryGetValue(name,out JToken?property)){return(JProperty)property;}if(comparison!=StringComparison.Ordinal){for(int i=0;i<_properties.Count;i++){JProperty p=(JProperty)_properties[i];if(string.Equals(p.Name,name,comparison)){return p;}}}return null;}public JEnumerable<JToken>PropertyValues(){return new JEnumerable<JToken>(Properties().Select(p=>p.Value));}public override JToken?this[object key]{get{ValidationUtils.ArgumentNotNull(key,nameof(key));if(!(key is string propertyName)){throw new ArgumentException("Accessed JObject values with invalid key value: {0}. Object property name expected.".FormatWith(CultureInfo.InvariantCulture,MiscellaneousUtils.ToString(key)));}return this[propertyName];}set{ValidationUtils.ArgumentNotNull(key,nameof(key));if(!(key is string propertyName)){throw new ArgumentException("Set JObject values with invalid key value: {0}. Object property name expected.".FormatWith(CultureInfo.InvariantCulture,MiscellaneousUtils.ToString(key)));}this[propertyName]=value;}}public JToken?this[string propertyName]{get{ValidationUtils.ArgumentNotNull(propertyName,nameof(propertyName));JProperty?property=Property(propertyName,StringComparison.Ordinal);return property?.Value;}set{JProperty?property=Property(propertyName,StringComparison.Ordinal);if(property!=null){property.Value=value!;}else{
#if HAVE_INOTIFY_PROPERTY_CHANGING
OnPropertyChanging(propertyName);
#endif
Add(propertyName,value);OnPropertyChanged(propertyName);}}}public new static JObject Load(JsonReader reader){return Load(reader,null);}public new static JObject Load(JsonReader reader,JsonLoadSettings?settings){ValidationUtils.ArgumentNotNull(reader,nameof(reader));if(reader.TokenType==JsonToken.None){if(!reader.Read()){throw JsonReaderException.Create(reader,"Error reading JObject from JsonReader.");}}reader.MoveToContent();if(reader.TokenType!=JsonToken.StartObject){throw JsonReaderException.Create(reader,"Error reading JObject from JsonReader. Current JsonReader item is not an object: {0}".FormatWith(CultureInfo.InvariantCulture,reader.TokenType));}JObject o=new JObject();o.SetLineInfo(reader as IJsonLineInfo,settings);o.ReadTokenFrom(reader,settings);return o;}public new static JObject Parse(string json){return Parse(json,null);}public new static JObject Parse(string json,JsonLoadSettings?settings){using(JsonReader reader=new JsonTextReader(new StringReader(json))){JObject o=Load(reader,settings);while(reader.Read()){}return o;}}public new static JObject FromObject(object o){return FromObject(o,JsonSerializer.CreateDefault());}public new static JObject FromObject(object o,JsonSerializer jsonSD){JToken token=FromObjectInternal(o,jsonSD);if(token.Type!=JTokenType.Object){throw new ArgumentException("Object serialized to {0}. JObject instance expected.".FormatWith(CultureInfo.InvariantCulture,token.Type));}return(JObject)token;}public override void WriteTo(JsonWriter writer,params JsonConverter[]converters){writer.WriteStartObject();for(int i=0;i<_properties.Count;i++){_properties[i].WriteTo(writer,converters);}writer.WriteEndObject();}public JToken?GetValue(string?propertyName){return GetValue(propertyName,StringComparison.Ordinal);}public JToken?GetValue(string?propertyName,StringComparison comparison){if(propertyName==null){return null;}var property=Property(propertyName,comparison);return property?.Value;}public bool TryGetValue(string propertyName,StringComparison comparison,[NotNullWhen(true)]out JToken?value){value=GetValue(propertyName,comparison);return(value!=null);}public void Add(string propertyName,JToken?value){Add(new JProperty(propertyName,value));}public bool ContainsKey(string propertyName){ValidationUtils.ArgumentNotNull(propertyName,nameof(propertyName));return _properties.Contains(propertyName);}ICollection<string>IDictionary<string,JToken?>.Keys=>_properties.Keys;public bool Remove(string propertyName){JProperty?property=Property(propertyName,StringComparison.Ordinal);if(property==null){return false;}property.Remove();return true;}public bool TryGetValue(string propertyName,[NotNullWhen(true)]out JToken?value){JProperty?property=Property(propertyName,StringComparison.Ordinal);if(property==null){value=null;return false;}value=property.Value;return true;}ICollection<JToken?>IDictionary<string,JToken?>.Values=>throw new NotImplementedException();void ICollection<KeyValuePair<string,JToken?>>.Add(KeyValuePair<string,JToken?>item){Add(new JProperty(item.Key,item.Value));}void ICollection<KeyValuePair<string,JToken?>>.Clear(){RemoveAll();}bool ICollection<KeyValuePair<string,JToken?>>.Contains(KeyValuePair<string,JToken?>item){JProperty?property=Property(item.Key,StringComparison.Ordinal);if(property==null){return false;}return(property.Value==item.Value);}void ICollection<KeyValuePair<string,JToken?>>.CopyTo(KeyValuePair<string,JToken?>[]array,int arrayIndex){if(array==null){throw new ArgumentNullException(nameof(array));}if(arrayIndex<0){throw new ArgumentOutOfRangeException(nameof(arrayIndex),"arrayIndex is less than 0.");}if(arrayIndex>=array.Length&&arrayIndex!=0){throw new ArgumentException("arrayIndex is equal to or greater than the length of array.");}if(Count>array.Length-arrayIndex){throw new ArgumentException("The number of elements in the source JObject is greater than the available space from arrayIndex to the end of the destination array.");}int index=0;foreach(JProperty property in _properties){array[arrayIndex+index]=new KeyValuePair<string,JToken?>(property.Name,property.Value);index++;}}bool ICollection<KeyValuePair<string,JToken?>>.IsReadOnly=>false;bool ICollection<KeyValuePair<string,JToken?>>.Remove(KeyValuePair<string,JToken?>item){if(!((ICollection<KeyValuePair<string,JToken?>>)this).Contains(item)){return false;}((IDictionary<string,JToken>)this).Remove(item.Key);return true;}internal override int GetDeepHashCode(){return ContentsHashCode();}public IEnumerator<KeyValuePair<string,JToken?>>GetEnumerator(){foreach(JProperty property in _properties){yield return new KeyValuePair<string,JToken?>(property.Name,property.Value);}}protected virtual void OnPropertyChanged(string propertyName){PropertyChanged?.Invoke(this,new PropertyChangedEventArgs(propertyName));}
#if HAVE_INOTIFY_PROPERTY_CHANGING
protected virtual void OnPropertyChanging(string propertyName){PropertyChanging?.Invoke(this,new PropertyChangingEventArgs(propertyName));}
#endif
#if HAVE_COMPONENT_MODEL
PropertyDescriptorCollection ICustomTypeDescriptor.GetProperties(){return((ICustomTypeDescriptor)this).GetProperties(null);}PropertyDescriptorCollection ICustomTypeDescriptor.GetProperties(Attribute[]attributes){PropertyDescriptor[]propertiesArray=new PropertyDescriptor[Count];int i=0;foreach(KeyValuePair<string,JToken?>propertyValue in this){propertiesArray[i]=new JPropertyDescriptor(propertyValue.Key);i++;}return new PropertyDescriptorCollection(propertiesArray);}AttributeCollection ICustomTypeDescriptor.GetAttributes(){return AttributeCollection.Empty;}string?ICustomTypeDescriptor.GetClassName(){return null;}string?ICustomTypeDescriptor.GetComponentName(){return null;}TypeConverter ICustomTypeDescriptor.GetConverter(){return new TypeConverter();}EventDescriptor?ICustomTypeDescriptor.GetDefaultEvent(){return null;}PropertyDescriptor?ICustomTypeDescriptor.GetDefaultProperty(){return null;}object?ICustomTypeDescriptor.GetEditor(Type editorBaseType){return null;}EventDescriptorCollection ICustomTypeDescriptor.GetEvents(Attribute[]attributes){return EventDescriptorCollection.Empty;}EventDescriptorCollection ICustomTypeDescriptor.GetEvents(){return EventDescriptorCollection.Empty;}object?ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd){if(pd is JPropertyDescriptor){return this;}return null;}
#endif
#if HAVE_DYNAMIC
protected override DynamicMetaObject GetMetaObject(Expression parameter){return new DynamicProxyMetaObject<JObject>(parameter,this,new JObjectDynamicProxy());}private class JObjectDynamicProxy:DynamicProxy<JObject>{public override bool TryGetMember(JObject instance,GetMemberBinder binder,out object?result){result=instance[binder.Name];return true;}public override bool TrySetMember(JObject instance,SetMemberBinder binder,object value){if(!(value is JToken v)){v=new JValue(value);}instance[binder.Name]=v;return true;}public override IEnumerable<string>GetDynamicMemberNames(JObject instance){return instance.Properties().Select(p=>p.Name);}}
#endif
}}namespace Newtonsoft.Json.Linq.JsonPath{internal class JPath{private static readonly char[]FloatCharacters=new[]{'.','E','e'};private readonly string _expression;public List<PathFilter>Filters{get;}private int _currentIndex;public JPath(string expression){ValidationUtils.ArgumentNotNull(expression,nameof(expression));_expression=expression;Filters=new List<PathFilter>();ParseMain();}private void ParseMain(){int currentPartStartIndex=_currentIndex;EatWhitespace();if(_expression.Length==_currentIndex){return;}if(_expression[_currentIndex]=='$'){if(_expression.Length==1){return;}char c=_expression[_currentIndex+1];if(c=='.'||c=='['){_currentIndex++;currentPartStartIndex=_currentIndex;}}if(!ParsePath(Filters,currentPartStartIndex,false)){int lastCharacterIndex=_currentIndex;EatWhitespace();if(_currentIndex<_expression.Length){throw new JsonException("Unexpected character while parsing path: "+_expression[lastCharacterIndex]);}}}private bool ParsePath(List<PathFilter>filters,int currentPartStartIndex,bool query){bool scan=false;bool followingIndexer=false;bool followingDot=false;bool ended=false;while(_currentIndex<_expression.Length&&!ended){char currentChar=_expression[_currentIndex];switch(currentChar){case'[':case'(':if(_currentIndex>currentPartStartIndex){string?member=_expression.Substring(currentPartStartIndex,_currentIndex-currentPartStartIndex);if(member=="*"){member=null;}filters.Add(CreatePathFilter(member,scan));scan=false;}filters.Add(ParseIndexer(currentChar,scan));scan=false;_currentIndex++;currentPartStartIndex=_currentIndex;followingIndexer=true;followingDot=false;break;case']':case')':ended=true;break;case' ':if(_currentIndex<_expression.Length){ended=true;}break;case'.':if(_currentIndex>currentPartStartIndex){string?member=_expression.Substring(currentPartStartIndex,_currentIndex-currentPartStartIndex);if(member=="*"){member=null;}filters.Add(CreatePathFilter(member,scan));scan=false;}if(_currentIndex+1<_expression.Length&&_expression[_currentIndex+1]=='.'){scan=true;_currentIndex++;}_currentIndex++;currentPartStartIndex=_currentIndex;followingIndexer=false;followingDot=true;break;default:if(query&&(currentChar=='='||currentChar=='<'||currentChar=='!'||currentChar=='>'||currentChar=='|'||currentChar=='&')){ended=true;}else{if(followingIndexer){throw new JsonException("Unexpected character following indexer: "+currentChar);}_currentIndex++;}break;}}bool atPathEnd=(_currentIndex==_expression.Length);if(_currentIndex>currentPartStartIndex){string?member=_expression.Substring(currentPartStartIndex,_currentIndex-currentPartStartIndex).TrimEnd();if(member=="*"){member=null;}filters.Add(CreatePathFilter(member,scan));}else{if(followingDot&&(atPathEnd||query)){throw new JsonException("Unexpected end while parsing path.");}}return atPathEnd;}private static PathFilter CreatePathFilter(string?member,bool scan){PathFilter filter=(scan)?(PathFilter)new ScanFilter(member):new FieldFilter(member);return filter;}private PathFilter ParseIndexer(char indexerOpenChar,bool scan){_currentIndex++;char indexerCloseChar=(indexerOpenChar=='[')?']':')';EnsureLength("Path ended with open indexer.");EatWhitespace();if(_expression[_currentIndex]=='\''){return ParseQuotedField(indexerCloseChar,scan);}else if(_expression[_currentIndex]=='?'){return ParseQuery(indexerCloseChar,scan);}else{return ParseArrayIndexer(indexerCloseChar);}}private PathFilter ParseArrayIndexer(char indexerCloseChar){int start=_currentIndex;int?end=null;List<int>?indexes=null;int colonCount=0;int?startIndex=null;int?endIndex=null;int?step=null;while(_currentIndex<_expression.Length){char currentCharacter=_expression[_currentIndex];if(currentCharacter==' '){end=_currentIndex;EatWhitespace();continue;}if(currentCharacter==indexerCloseChar){int length=(end??_currentIndex)-start;if(indexes!=null){if(length==0){throw new JsonException("Array index expected.");}string indexer=_expression.Substring(start,length);int index=Convert.ToInt32(indexer,CultureInfo.InvariantCulture);indexes.Add(index);return new ArrayMultipleIndexFilter(indexes);}else if(colonCount>0){if(length>0){string indexer=_expression.Substring(start,length);int index=Convert.ToInt32(indexer,CultureInfo.InvariantCulture);if(colonCount==1){endIndex=index;}else{step=index;}}return new ArraySliceFilter{Start=startIndex,End=endIndex,Step=step};}else{if(length==0){throw new JsonException("Array index expected.");}string indexer=_expression.Substring(start,length);int index=Convert.ToInt32(indexer,CultureInfo.InvariantCulture);return new ArrayIndexFilter{Index=index};}}else if(currentCharacter==','){int length=(end??_currentIndex)-start;if(length==0){throw new JsonException("Array index expected.");}if(indexes==null){indexes=new List<int>();}string indexer=_expression.Substring(start,length);indexes.Add(Convert.ToInt32(indexer,CultureInfo.InvariantCulture));_currentIndex++;EatWhitespace();start=_currentIndex;end=null;}else if(currentCharacter=='*'){_currentIndex++;EnsureLength("Path ended with open indexer.");EatWhitespace();if(_expression[_currentIndex]!=indexerCloseChar){throw new JsonException("Unexpected character while parsing path indexer: "+currentCharacter);}return new ArrayIndexFilter();}else if(currentCharacter==':'){int length=(end??_currentIndex)-start;if(length>0){string indexer=_expression.Substring(start,length);int index=Convert.ToInt32(indexer,CultureInfo.InvariantCulture);if(colonCount==0){startIndex=index;}else if(colonCount==1){endIndex=index;}else{step=index;}}colonCount++;_currentIndex++;EatWhitespace();start=_currentIndex;end=null;}else if(!char.IsDigit(currentCharacter)&&currentCharacter!='-'){throw new JsonException("Unexpected character while parsing path indexer: "+currentCharacter);}else{if(end!=null){throw new JsonException("Unexpected character while parsing path indexer: "+currentCharacter);}_currentIndex++;}}throw new JsonException("Path ended with open indexer.");}private void EatWhitespace(){while(_currentIndex<_expression.Length){if(_expression[_currentIndex]!=' '){break;}_currentIndex++;}}private PathFilter ParseQuery(char indexerCloseChar,bool scan){_currentIndex++;EnsureLength("Path ended with open indexer.");if(_expression[_currentIndex]!='('){throw new JsonException("Unexpected character while parsing path indexer: "+_expression[_currentIndex]);}_currentIndex++;QueryExpression expression=ParseExpression();_currentIndex++;EnsureLength("Path ended with open indexer.");EatWhitespace();if(_expression[_currentIndex]!=indexerCloseChar){throw new JsonException("Unexpected character while parsing path indexer: "+_expression[_currentIndex]);}if(!scan){return new QueryFilter(expression);}else{return new QueryScanFilter(expression);}}private bool TryParseExpression(out List<PathFilter>?expressionPath){if(_expression[_currentIndex]=='$'){expressionPath=new List<PathFilter>{RootFilter.Instance};}else if(_expression[_currentIndex]=='@'){expressionPath=new List<PathFilter>();}else{expressionPath=null;return false;}_currentIndex++;if(ParsePath(expressionPath!,_currentIndex,true)){throw new JsonException("Path ended with open query.");}return true;}private JsonException CreateUnexpectedCharacterException(){return new JsonException("Unexpected character while parsing path query: "+_expression[_currentIndex]);}private object ParseSide(){EatWhitespace();if(TryParseExpression(out List<PathFilter>?expressionPath)){EatWhitespace();EnsureLength("Path ended with open query.");return expressionPath!;}if(TryParseValue(out var value)){EatWhitespace();EnsureLength("Path ended with open query.");return new JValue(value);}throw CreateUnexpectedCharacterException();}private QueryExpression ParseExpression(){QueryExpression?rootExpression=null;CompositeExpression?parentExpression=null;while(_currentIndex<_expression.Length){object left=ParseSide();object?right=null;QueryOperator op;if(_expression[_currentIndex]==')'||_expression[_currentIndex]=='|'||_expression[_currentIndex]=='&'){op=QueryOperator.Exists;}else{op=ParseOperator();right=ParseSide();}BooleanQueryExpression booleanExpression=new BooleanQueryExpression(op,left,right);if(_expression[_currentIndex]==')'){if(parentExpression!=null){parentExpression.Expressions.Add(booleanExpression);return rootExpression!;}return booleanExpression;}if(_expression[_currentIndex]=='&'){if(!Match("&&")){throw CreateUnexpectedCharacterException();}if(parentExpression==null||parentExpression.Operator!=QueryOperator.And){CompositeExpression andExpression=new CompositeExpression(QueryOperator.And);parentExpression?.Expressions.Add(andExpression);parentExpression=andExpression;if(rootExpression==null){rootExpression=parentExpression;}}parentExpression.Expressions.Add(booleanExpression);}if(_expression[_currentIndex]=='|'){if(!Match("||")){throw CreateUnexpectedCharacterException();}if(parentExpression==null||parentExpression.Operator!=QueryOperator.Or){CompositeExpression orExpression=new CompositeExpression(QueryOperator.Or);parentExpression?.Expressions.Add(orExpression);parentExpression=orExpression;if(rootExpression==null){rootExpression=parentExpression;}}parentExpression.Expressions.Add(booleanExpression);}}throw new JsonException("Path ended with open query.");}private bool TryParseValue(out object?value){char currentChar=_expression[_currentIndex];if(currentChar=='\''){value=ReadQuotedString();return true;}else if(char.IsDigit(currentChar)||currentChar=='-'){StringBuilder sb=new StringBuilder();sb.Append(currentChar);_currentIndex++;while(_currentIndex<_expression.Length){currentChar=_expression[_currentIndex];if(currentChar==' '||currentChar==')'){string numberText=sb.ToString();if(numberText.IndexOfAny(FloatCharacters)!=-1){bool result=double.TryParse(numberText,NumberStyles.Float|NumberStyles.AllowThousands,CultureInfo.InvariantCulture,out var d);value=d;return result;}else{bool result=long.TryParse(numberText,NumberStyles.Integer,CultureInfo.InvariantCulture,out var l);value=l;return result;}}else{sb.Append(currentChar);_currentIndex++;}}}else if(currentChar=='t'){if(Match("true")){value=true;return true;}}else if(currentChar=='f'){if(Match("false")){value=false;return true;}}else if(currentChar=='n'){if(Match("null")){value=null;return true;}}else if(currentChar=='/'){value=ReadRegexString();return true;}value=null;return false;}private string ReadQuotedString(){StringBuilder sb=new StringBuilder();_currentIndex++;while(_currentIndex<_expression.Length){char currentChar=_expression[_currentIndex];if(currentChar=='\\'&&_currentIndex+1<_expression.Length){_currentIndex++;currentChar=_expression[_currentIndex];char resolvedChar;switch(currentChar){case'b':resolvedChar='\b';break;case't':resolvedChar='\t';break;case'n':resolvedChar='\n';break;case'f':resolvedChar='\f';break;case'r':resolvedChar='\r';break;case'\\':case'"':case'\'':case'/':resolvedChar=currentChar;break;default:throw new JsonException(@"Unknown escape character: \"+currentChar);}sb.Append(resolvedChar);_currentIndex++;}else if(currentChar=='\''){_currentIndex++;return sb.ToString();}else{_currentIndex++;sb.Append(currentChar);}}throw new JsonException("Path ended with an open string.");}private string ReadRegexString(){int startIndex=_currentIndex;_currentIndex++;while(_currentIndex<_expression.Length){char currentChar=_expression[_currentIndex];if(currentChar=='\\'&&_currentIndex+1<_expression.Length){_currentIndex+=2;}else if(currentChar=='/'){_currentIndex++;while(_currentIndex<_expression.Length){currentChar=_expression[_currentIndex];if(char.IsLetter(currentChar)){_currentIndex++;}else{break;}}return _expression.Substring(startIndex,_currentIndex-startIndex);}else{_currentIndex++;}}throw new JsonException("Path ended with an open regex.");}private bool Match(string s){int currentPosition=_currentIndex;for(int i=0;i<s.Length;i++){if(currentPosition<_expression.Length&&_expression[currentPosition]==s[i]){currentPosition++;}else{return false;}}_currentIndex=currentPosition;return true;}private QueryOperator ParseOperator(){if(_currentIndex+1>=_expression.Length){throw new JsonException("Path ended with open query.");}if(Match("===")){return QueryOperator.StrictEquals;}if(Match("==")){return QueryOperator.Equals;}if(Match("=~")){return QueryOperator.RegexEquals;}if(Match("!==")){return QueryOperator.StrictNotEquals;}if(Match("!=")||Match("<>")){return QueryOperator.NotEquals;}if(Match("<=")){return QueryOperator.LessThanOrEquals;}if(Match("<")){return QueryOperator.LessThan;}if(Match(">=")){return QueryOperator.GreaterThanOrEquals;}if(Match(">")){return QueryOperator.GreaterThan;}throw new JsonException("Could not read query operator.");}private PathFilter ParseQuotedField(char indexerCloseChar,bool scan){List<string>?fields=null;while(_currentIndex<_expression.Length){string field=ReadQuotedString();EatWhitespace();EnsureLength("Path ended with open indexer.");if(_expression[_currentIndex]==indexerCloseChar){if(fields!=null){fields.Add(field);return(scan)?(PathFilter)new ScanMultipleFilter(fields):(PathFilter)new FieldMultipleFilter(fields);}else{return CreatePathFilter(field,scan);}}else if(_expression[_currentIndex]==','){_currentIndex++;EatWhitespace();if(fields==null){fields=new List<string>();}fields.Add(field);}else{throw new JsonException("Unexpected character while parsing path indexer: "+_expression[_currentIndex]);}}throw new JsonException("Path ended with open indexer.");}private void EnsureLength(string message){if(_currentIndex>=_expression.Length){throw new JsonException(message);}}internal IEnumerable<JToken>Evaluate(JToken root,JToken t,JsonSelectSettings?settings){return Evaluate(Filters,root,t,settings);}internal static IEnumerable<JToken>Evaluate(List<PathFilter>filters,JToken root,JToken t,JsonSelectSettings?settings){IEnumerable<JToken>current=new[]{t};foreach(PathFilter filter in filters){current=filter.ExecuteFilter(root,current,settings);}return current;}}}
#if HAVE_ASYNC
namespace Newtonsoft.Json.Linq{public partial class JProperty{public override Task WriteToAsync(JsonWriter writer,CancellationToken cancellationToken,params JsonConverter[]converters){Task task=writer.WritePropertyNameAsync(_name,cancellationToken);if(task.IsCompletedSucessfully()){return WriteValueAsync(writer,cancellationToken,converters);}return WriteToAsync(task,writer,cancellationToken,converters);}private async Task WriteToAsync(Task task,JsonWriter writer,CancellationToken cancellationToken,params JsonConverter[]converters){await task.ConfigureAwait(false);await WriteValueAsync(writer,cancellationToken,converters).ConfigureAwait(false);}private Task WriteValueAsync(JsonWriter writer,CancellationToken cancellationToken,JsonConverter[]converters){JToken value=Value;return value!=null?value.WriteToAsync(writer,cancellationToken,converters):writer.WriteNullAsync(cancellationToken);}public new static Task<JProperty>LoadAsync(JsonReader reader,CancellationToken cancellationToken=default){return LoadAsync(reader,null,cancellationToken);}public new static async Task<JProperty>LoadAsync(JsonReader reader,JsonLoadSettings?settings,CancellationToken cancellationToken=default){if(reader.TokenType==JsonToken.None){if(!await reader.ReadAsync(cancellationToken).ConfigureAwait(false)){throw JsonReaderException.Create(reader,"Error reading JProperty from JsonReader.");}}await reader.MoveToContentAsync(cancellationToken).ConfigureAwait(false);if(reader.TokenType!=JsonToken.PropertyName){throw JsonReaderException.Create(reader,"Error reading JProperty from JsonReader. Current JsonReader item is not a property: {0}".FormatWith(CultureInfo.InvariantCulture,reader.TokenType));}JProperty p=new JProperty((string)reader.Value!);p.SetLineInfo(reader as IJsonLineInfo,settings);await p.ReadTokenFromAsync(reader,settings,cancellationToken).ConfigureAwait(false);return p;}}}
#endif
namespace Newtonsoft.Json.Linq{public partial class JProperty:JContainer{private class JPropertyList:IList<JToken>{internal JToken?_token;public IEnumerator<JToken>GetEnumerator(){if(_token!=null){yield return _token;}}IEnumerator IEnumerable.GetEnumerator(){return GetEnumerator();}public void Add(JToken item){_token=item;}public void Clear(){_token=null;}public bool Contains(JToken item){return(_token==item);}public void CopyTo(JToken[]array,int arrayIndex){if(_token!=null){array[arrayIndex]=_token;}}public bool Remove(JToken item){if(_token==item){_token=null;return true;}return false;}public int Count=>(_token!=null)?1:0;public bool IsReadOnly=>false;public int IndexOf(JToken item){return(_token==item)?0:-1;}public void Insert(int index,JToken item){if(index==0){_token=item;}}public void RemoveAt(int index){if(index==0){_token=null;}}public JToken this[int index]{get{if(index!=0){throw new IndexOutOfRangeException();}MiscellaneousUtils.Assert(_token!=null);return _token;}set{if(index!=0){throw new IndexOutOfRangeException();}_token=value;}}}private readonly JPropertyList _content=new JPropertyList();private readonly string _name;protected override IList<JToken>ChildrenTokens=>_content;public string Name{[DebuggerStepThrough]get{return _name;}}public JToken Value{[DebuggerStepThrough]get{return _content._token!;}set{CheckReentrancy();JToken newValue=value??JValue.CreateNull();if(_content._token==null){InsertItem(0,newValue,false);}else{SetItem(0,newValue);}}}public JProperty(JProperty other):base(other){_name=other.Name;}internal override JToken GetItem(int index){if(index!=0){throw new ArgumentOutOfRangeException();}return Value;}internal override void SetItem(int index,JToken?item){if(index!=0){throw new ArgumentOutOfRangeException();}if(IsTokenUnchanged(Value,item)){return;}((JObject?)Parent)?.InternalPropertyChanging(this);base.SetItem(0,item);((JObject?)Parent)?.InternalPropertyChanged(this);}internal override bool RemoveItem(JToken?item){throw new JsonException("Cannot add or remove items from {0}.".FormatWith(CultureInfo.InvariantCulture,typeof(JProperty)));}internal override void RemoveItemAt(int index){throw new JsonException("Cannot add or remove items from {0}.".FormatWith(CultureInfo.InvariantCulture,typeof(JProperty)));}internal override int IndexOfItem(JToken?item){if(item==null){return-1;}return _content.IndexOf(item);}internal override bool InsertItem(int index,JToken?item,bool skipParentCheck){if(item!=null&&item.Type==JTokenType.Comment){return false;}if(Value!=null){throw new JsonException("{0} cannot have multiple values.".FormatWith(CultureInfo.InvariantCulture,typeof(JProperty)));}return base.InsertItem(0,item,false);}internal override bool ContainsItem(JToken?item){return(Value==item);}internal override void MergeItem(object content,JsonMergeSettings?settings){JToken?value=(content as JProperty)?.Value;if(value!=null&&value.Type!=JTokenType.Null){Value=value;}}internal override void ClearItems(){throw new JsonException("Cannot add or remove items from {0}.".FormatWith(CultureInfo.InvariantCulture,typeof(JProperty)));}internal override bool DeepEquals(JToken node){return(node is JProperty t&&_name==t.Name&&ContentsEqual(t));}internal override JToken CloneToken(){return new JProperty(this);}public override JTokenType Type{[DebuggerStepThrough]get{return JTokenType.Property;}}internal JProperty(string name){ValidationUtils.ArgumentNotNull(name,nameof(name));_name=name;}public JProperty(string name,params object[]content):this(name,(object)content){}public JProperty(string name,object?content){ValidationUtils.ArgumentNotNull(name,nameof(name));_name=name;Value=IsMultiContent(content)?new JArray(content):CreateFromContent(content);}public override void WriteTo(JsonWriter writer,params JsonConverter[]converters){writer.WritePropertyName(_name);JToken value=Value;if(value!=null){value.WriteTo(writer,converters);}else{writer.WriteNull();}}internal override int GetDeepHashCode(){return _name.GetHashCode()^(Value?.GetDeepHashCode()??0);}public new static JProperty Load(JsonReader reader){return Load(reader,null);}public new static JProperty Load(JsonReader reader,JsonLoadSettings?settings){if(reader.TokenType==JsonToken.None){if(!reader.Read()){throw JsonReaderException.Create(reader,"Error reading JProperty from JsonReader.");}}reader.MoveToContent();if(reader.TokenType!=JsonToken.PropertyName){throw JsonReaderException.Create(reader,"Error reading JProperty from JsonReader. Current JsonReader item is not a property: {0}".FormatWith(CultureInfo.InvariantCulture,reader.TokenType));}JProperty p=new JProperty((string)reader.Value!);p.SetLineInfo(reader as IJsonLineInfo,settings);p.ReadTokenFrom(reader,settings);return p;}}}
#if HAVE_COMPONENT_MODEL
namespace Newtonsoft.Json.Linq{public class JPropertyDescriptor:PropertyDescriptor{public JPropertyDescriptor(string name):base(name,null){}private static JObject CastInstance(object instance){return(JObject)instance;}public override bool CanResetValue(object component){return false;}public override object?GetValue(object component){return(component as JObject)?[Name];}public override void ResetValue(object component){}public override void SetValue(object component,object value){if(component is JObject o){JToken token=value as JToken??new JValue(value);o[Name]=token;}}public override bool ShouldSerializeValue(object component){return false;}public override Type ComponentType=>typeof(JObject);public override bool IsReadOnly=>false;public override Type PropertyType=>typeof(object);protected override int NameHashCode{get{int nameHashCode=base.NameHashCode;return nameHashCode;}}}}
#endif
namespace Newtonsoft.Json.Linq{internal class JPropertyKeyedCollection:Collection<JToken>{private static readonly IEqualityComparer<string>Comparer=StringComparer.Ordinal;private Dictionary<string,JToken>?_dictionary;public JPropertyKeyedCollection():base(new List<JToken>()){}private void AddKey(string key,JToken item){EnsureDictionary();_dictionary![key]=item;}protected void ChangeItemKey(JToken item,string newKey){if(!ContainsItem(item)){throw new ArgumentException("The specified item does not exist in this KeyedCollection.");}string keyForItem=GetKeyForItem(item);if(!Comparer.Equals(keyForItem,newKey)){if(newKey!=null){AddKey(newKey,item);}if(keyForItem!=null){RemoveKey(keyForItem);}}}protected override void ClearItems(){base.ClearItems();_dictionary?.Clear();}public bool Contains(string key){if(key==null){throw new ArgumentNullException(nameof(key));}if(_dictionary!=null){return _dictionary.ContainsKey(key);}return false;}private bool ContainsItem(JToken item){if(_dictionary==null){return false;}string key=GetKeyForItem(item);return _dictionary.TryGetValue(key,out _);}private void EnsureDictionary(){if(_dictionary==null){_dictionary=new Dictionary<string,JToken>(Comparer);}}private string GetKeyForItem(JToken item){return((JProperty)item).Name;}protected override void InsertItem(int index,JToken item){AddKey(GetKeyForItem(item),item);base.InsertItem(index,item);}public bool Remove(string key){if(key==null){throw new ArgumentNullException(nameof(key));}if(_dictionary!=null){return _dictionary.TryGetValue(key,out JToken value)&&Remove(value);}return false;}protected override void RemoveItem(int index){string keyForItem=GetKeyForItem(Items[index]);RemoveKey(keyForItem);base.RemoveItem(index);}private void RemoveKey(string key){_dictionary?.Remove(key);}protected override void SetItem(int index,JToken item){string keyForItem=GetKeyForItem(item);string keyAtIndex=GetKeyForItem(Items[index]);if(Comparer.Equals(keyAtIndex,keyForItem)){if(_dictionary!=null){_dictionary[keyForItem]=item;}}else{AddKey(keyForItem,item);if(keyAtIndex!=null){RemoveKey(keyAtIndex);}}base.SetItem(index,item);}public JToken this[string key]{get{if(key==null){throw new ArgumentNullException(nameof(key));}if(_dictionary!=null){return _dictionary[key];}throw new KeyNotFoundException();}}public bool TryGetValue(string key,[NotNullWhen(true)]out JToken?value){if(_dictionary==null){value=null;return false;}return _dictionary.TryGetValue(key,out value);}public ICollection<string>Keys{get{EnsureDictionary();return _dictionary!.Keys;}}public ICollection<JToken>Values{get{EnsureDictionary();return _dictionary!.Values;}}public int IndexOfReference(JToken t){return((List<JToken>)Items).IndexOfReference(t);}public bool Compare(JPropertyKeyedCollection other){if(this==other){return true;}Dictionary<string,JToken>?d1=_dictionary;Dictionary<string,JToken>?d2=other._dictionary;if(d1==null&&d2==null){return true;}if(d1==null){return(d2!.Count==0);}if(d2==null){return(d1.Count==0);}if(d1.Count!=d2.Count){return false;}foreach(KeyValuePair<string,JToken>keyAndProperty in d1){if(!d2.TryGetValue(keyAndProperty.Key,out JToken secondValue)){return false;}JProperty p1=(JProperty)keyAndProperty.Value;JProperty p2=(JProperty)secondValue;if(p1.Value==null){return(p2.Value==null);}if(!p1.Value.DeepEquals(p2.Value)){return false;}}return true;}}}
#if HAVE_ASYNC
namespace Newtonsoft.Json.Linq{public partial class JRaw{public static async Task<JRaw>CreateAsync(JsonReader reader,CancellationToken cancellationToken=default){using(StringWriter sw=new StringWriter(CultureInfo.InvariantCulture))using(JsonTextWriter jsonWriter=new JsonTextWriter(sw)){await jsonWriter.WriteTokenSyncReadingAsync(reader,cancellationToken).ConfigureAwait(false);return new JRaw(sw.ToString());}}}}
#endif
namespace Newtonsoft.Json.Linq{public partial class JRaw:JValue{public JRaw(JRaw other):base(other){}public JRaw(object?rawJson):base(rawJson,JTokenType.Raw){}public static JRaw Create(JsonReader reader){using(StringWriter sw=new StringWriter(CultureInfo.InvariantCulture))using(JsonTextWriter jsonWriter=new JsonTextWriter(sw)){jsonWriter.WriteToken(reader);return new JRaw(sw.ToString());}}internal override JToken CloneToken(){return new JRaw(this);}}}namespace Newtonsoft.Json{[AttributeUsage(AttributeTargets.Class|AttributeTargets.Interface,AllowMultiple=false)]public sealed class JsonArrayAttribute:JsonContainerAttribute{private bool _allowNullItems;public bool AllowNullItems{get=>_allowNullItems;set=>_allowNullItems=value;}public JsonArrayAttribute(){}public JsonArrayAttribute(bool allowNullItems){_allowNullItems=allowNullItems;}public JsonArrayAttribute(string id):base(id){}}}
namespace Newtonsoft.Json.Serialization{public class JsonArrayContract:JsonContainerContract{public Type?CollectionItemType{get;}public bool IsMultidimensionalArray{get;}private readonly Type?_genericCollectionDefinitionType;private Type?_genericWrapperType;private ObjectConstructor<object>?_genericWrapperCreator;private Func<object>?_genericTemporaryCollectionCreator;internal bool IsArray{get;}internal bool ShouldCreateWrapper{get;}internal bool CanDeserialize{get;private set;}private readonly ConstructorInfo?_parameterizedConstructor;private ObjectConstructor<object>?_parameterizedCreator;private ObjectConstructor<object>?_overrideCreator;internal ObjectConstructor<object>?ParameterizedCreator{get{if(_parameterizedCreator==null&&_parameterizedConstructor!=null){_parameterizedCreator=JsonTypeReflector.ReflectionDelegateFactory.CreateParameterizedConstructor(_parameterizedConstructor);}return _parameterizedCreator;}}public ObjectConstructor<object>?OverrideCreator{get=>_overrideCreator;set{_overrideCreator=value;CanDeserialize=true;}}public bool HasParameterizedCreator{get;set;}internal bool HasParameterizedCreatorInternal=>(HasParameterizedCreator||_parameterizedCreator!=null||_parameterizedConstructor!=null);public JsonArrayContract(Type underlyingType):base(underlyingType){ContractType=JsonContractType.Array;IsArray=CreatedType.IsArray||(NonNullableUnderlyingType.IsGenericType()&&NonNullableUnderlyingType.GetGenericTypeDefinition().FullName=="System.Linq.EmptyPartition`1");bool canDeserialize;Type?tempCollectionType;if(IsArray){CollectionItemType=ReflectionUtils.GetCollectionItemType(UnderlyingType);IsReadOnlyOrFixedSize=true;_genericCollectionDefinitionType=typeof(List<>).MakeGenericType(CollectionItemType);canDeserialize=true;IsMultidimensionalArray=(CreatedType.IsArray&&UnderlyingType.GetArrayRank()>1);}else if(typeof(IList).IsAssignableFrom(NonNullableUnderlyingType)){if(ReflectionUtils.ImplementsGenericDefinition(NonNullableUnderlyingType,typeof(ICollection<>),out _genericCollectionDefinitionType)){CollectionItemType=_genericCollectionDefinitionType.GetGenericArguments()[0];}else{CollectionItemType=ReflectionUtils.GetCollectionItemType(NonNullableUnderlyingType);}if(NonNullableUnderlyingType==typeof(IList)){CreatedType=typeof(List<object>);}if(CollectionItemType!=null){_parameterizedConstructor=CollectionUtils.ResolveEnumerableCollectionConstructor(NonNullableUnderlyingType,CollectionItemType);}IsReadOnlyOrFixedSize=ReflectionUtils.InheritsGenericDefinition(NonNullableUnderlyingType,typeof(ReadOnlyCollection<>));canDeserialize=true;}else if(ReflectionUtils.ImplementsGenericDefinition(NonNullableUnderlyingType,typeof(ICollection<>),out _genericCollectionDefinitionType)){CollectionItemType=_genericCollectionDefinitionType.GetGenericArguments()[0];if(ReflectionUtils.IsGenericDefinition(NonNullableUnderlyingType,typeof(ICollection<>))||ReflectionUtils.IsGenericDefinition(NonNullableUnderlyingType,typeof(IList<>))){CreatedType=typeof(List<>).MakeGenericType(CollectionItemType);}
#if HAVE_ISET
if(ReflectionUtils.IsGenericDefinition(NonNullableUnderlyingType,typeof(ISet<>))){CreatedType=typeof(HashSet<>).MakeGenericType(CollectionItemType);}
#endif
_parameterizedConstructor=CollectionUtils.ResolveEnumerableCollectionConstructor(NonNullableUnderlyingType,CollectionItemType);canDeserialize=true;ShouldCreateWrapper=true;}
#if HAVE_READ_ONLY_COLLECTIONS
else if(ReflectionUtils.ImplementsGenericDefinition(NonNullableUnderlyingType,typeof(IReadOnlyCollection<>),out tempCollectionType)){CollectionItemType=tempCollectionType.GetGenericArguments()[0];if(ReflectionUtils.IsGenericDefinition(NonNullableUnderlyingType,typeof(IReadOnlyCollection<>))||ReflectionUtils.IsGenericDefinition(NonNullableUnderlyingType,typeof(IReadOnlyList<>))){CreatedType=typeof(ReadOnlyCollection<>).MakeGenericType(CollectionItemType);}_genericCollectionDefinitionType=typeof(List<>).MakeGenericType(CollectionItemType);_parameterizedConstructor=CollectionUtils.ResolveEnumerableCollectionConstructor(CreatedType,CollectionItemType);
#if HAVE_FSHARP_TYPES
StoreFSharpListCreatorIfNecessary(NonNullableUnderlyingType);
#endif
IsReadOnlyOrFixedSize=true;canDeserialize=HasParameterizedCreatorInternal;}
#endif
else if(ReflectionUtils.ImplementsGenericDefinition(NonNullableUnderlyingType,typeof(IEnumerable<>),out tempCollectionType)){CollectionItemType=tempCollectionType.GetGenericArguments()[0];if(ReflectionUtils.IsGenericDefinition(UnderlyingType,typeof(IEnumerable<>))){CreatedType=typeof(List<>).MakeGenericType(CollectionItemType);}_parameterizedConstructor=CollectionUtils.ResolveEnumerableCollectionConstructor(NonNullableUnderlyingType,CollectionItemType);
#if HAVE_FSHARP_TYPES
StoreFSharpListCreatorIfNecessary(NonNullableUnderlyingType);
#endif
if(NonNullableUnderlyingType.IsGenericType()&&NonNullableUnderlyingType.GetGenericTypeDefinition()==typeof(IEnumerable<>)){_genericCollectionDefinitionType=tempCollectionType;IsReadOnlyOrFixedSize=false;ShouldCreateWrapper=false;canDeserialize=true;}else{_genericCollectionDefinitionType=typeof(List<>).MakeGenericType(CollectionItemType);IsReadOnlyOrFixedSize=true;ShouldCreateWrapper=true;canDeserialize=HasParameterizedCreatorInternal;}}else{canDeserialize=false;ShouldCreateWrapper=true;}CanDeserialize=canDeserialize;
#if (NET20 || NET35)
if(CollectionItemType!=null&&ReflectionUtils.IsNullableType(CollectionItemType)){if(ReflectionUtils.InheritsGenericDefinition(CreatedType,typeof(List<>),out tempCollectionType)||(IsArray&&!IsMultidimensionalArray)){ShouldCreateWrapper=true;}}
#endif
if(CollectionItemType!=null&&ImmutableCollectionsUtils.TryBuildImmutableForArrayContract(NonNullableUnderlyingType,CollectionItemType,out Type?immutableCreatedType,out ObjectConstructor<object>?immutableParameterizedCreator)){CreatedType=immutableCreatedType;_parameterizedCreator=immutableParameterizedCreator;IsReadOnlyOrFixedSize=true;CanDeserialize=true;}}internal IWrappedCollection CreateWrapper(object list){if(_genericWrapperCreator==null){MiscellaneousUtils.Assert(_genericCollectionDefinitionType!=null);_genericWrapperType=typeof(CollectionWrapper<>).MakeGenericType(CollectionItemType);Type constructorArgument;if(ReflectionUtils.InheritsGenericDefinition(_genericCollectionDefinitionType,typeof(List<>))||_genericCollectionDefinitionType.GetGenericTypeDefinition()==typeof(IEnumerable<>)){constructorArgument=typeof(ICollection<>).MakeGenericType(CollectionItemType);}else{constructorArgument=_genericCollectionDefinitionType;}ConstructorInfo genericWrapperConstructor=_genericWrapperType.GetConstructor(new[]{constructorArgument});_genericWrapperCreator=JsonTypeReflector.ReflectionDelegateFactory.CreateParameterizedConstructor(genericWrapperConstructor);}return(IWrappedCollection)_genericWrapperCreator(list);}internal IList CreateTemporaryCollection(){if(_genericTemporaryCollectionCreator==null){Type collectionItemType=(IsMultidimensionalArray||CollectionItemType==null)?typeof(object):CollectionItemType;Type temporaryListType=typeof(List<>).MakeGenericType(collectionItemType);_genericTemporaryCollectionCreator=JsonTypeReflector.ReflectionDelegateFactory.CreateDefaultConstructor<object>(temporaryListType);}return(IList)_genericTemporaryCollectionCreator();}
#if HAVE_FSHARP_TYPES
private void StoreFSharpListCreatorIfNecessary(Type underlyingType){if(!HasParameterizedCreatorInternal&&underlyingType.Name==FSharpUtils.FSharpListTypeName){FSharpUtils.EnsureInitialized(underlyingType.Assembly());_parameterizedCreator=FSharpUtils.Instance.CreateSeq(CollectionItemType!);}}
#endif
}}namespace Newtonsoft.Json{[AttributeUsage(AttributeTargets.Constructor,AllowMultiple=false)]public sealed class JsonConstructorAttribute:Attribute{}}namespace Newtonsoft.Json{[AttributeUsage(AttributeTargets.Class|AttributeTargets.Interface,AllowMultiple=false)]public abstract class JsonContainerAttribute:Attribute{public string?Id{get;set;}public string?Title{get;set;}public string?Description{get;set;}public Type?ItemConverterType{get;set;}public object[]?ItemConverterParameters{get;set;}public Type?NamingStrategyType{get=>_namingStrategyType;set{_namingStrategyType=value;NamingStrategyInstance=null;}}public object[]?NamingStrategyParameters{get=>_namingStrategyParameters;set{_namingStrategyParameters=value;NamingStrategyInstance=null;}}internal NamingStrategy?NamingStrategyInstance{get;set;}internal bool?_isReference;internal bool?_itemIsReference;internal ReferenceLoopHandling?_itemReferenceLoopHandling;internal TypeNameHandling?_itemTypeNameHandling;private Type?_namingStrategyType;private object[]?_namingStrategyParameters;public bool IsReference{get=>_isReference??default;set=>_isReference=value;}public bool ItemIsReference{get=>_itemIsReference??default;set=>_itemIsReference=value;}public ReferenceLoopHandling ItemReferenceLoopHandling{get=>_itemReferenceLoopHandling??default;set=>_itemReferenceLoopHandling=value;}public TypeNameHandling ItemTypeNameHandling{get=>_itemTypeNameHandling??default;set=>_itemTypeNameHandling=value;}protected JsonContainerAttribute(){}protected JsonContainerAttribute(string id){Id=id;}}}
namespace Newtonsoft.Json.Serialization{public class JsonContainerContract:JsonContract{private JsonContract?_itemContract;private JsonContract?_finalItemContract;internal JsonContract?ItemContract{get=>_itemContract;set{_itemContract=value;if(_itemContract!=null){_finalItemContract=(_itemContract.UnderlyingType.IsSealed())?_itemContract:null;}else{_finalItemContract=null;}}}internal JsonContract?FinalItemContract=>_finalItemContract;public JsonConverter?ItemConverter{get;set;}public bool?ItemIsReference{get;set;}public ReferenceLoopHandling?ItemReferenceLoopHandling{get;set;}public TypeNameHandling?ItemTypeNameHandling{get;set;}internal JsonContainerContract(Type underlyingType):base(underlyingType){JsonContainerAttribute?jsonContainerAttribute=JsonTypeReflector.GetCachedAttribute<JsonContainerAttribute>(underlyingType);if(jsonContainerAttribute!=null){if(jsonContainerAttribute.ItemConverterType!=null){ItemConverter=JsonTypeReflector.CreateJsonConverterInstance(jsonContainerAttribute.ItemConverterType,jsonContainerAttribute.ItemConverterParameters);}ItemIsReference=jsonContainerAttribute._itemIsReference;ItemReferenceLoopHandling=jsonContainerAttribute._itemReferenceLoopHandling;ItemTypeNameHandling=jsonContainerAttribute._itemTypeNameHandling;}}}}namespace Newtonsoft.Json.Serialization{internal enum JsonContractType{None=0,Object=1,Array=2,Primitive=3,String=4,Dictionary=5,Dynamic=6,Serializable=7,Linq=8}public delegate void SerializationCallback(object o,StreamingContext context);public delegate void SerializationErrorCallback(object o,StreamingContext context,ErrorContext errorContext);public delegate void ExtensionDataSetter(object o,string key,object?value);public delegate IEnumerable<KeyValuePair<object,object>>?ExtensionDataGetter(object o);public abstract class JsonContract{internal bool IsNullable;internal bool IsConvertable;internal bool IsEnum;internal Type NonNullableUnderlyingType;internal ReadType InternalReadType;internal JsonContractType ContractType;internal bool IsReadOnlyOrFixedSize;internal bool IsSealed;internal bool IsInstantiable;private List<SerializationCallback>?_onDeserializedCallbacks;private List<SerializationCallback>?_onDeserializingCallbacks;private List<SerializationCallback>?_onSerializedCallbacks;private List<SerializationCallback>?_onSerializingCallbacks;private List<SerializationErrorCallback>?_onErrorCallbacks;private Type _createdType;public Type UnderlyingType{get;}public Type CreatedType{get=>_createdType;set{ValidationUtils.ArgumentNotNull(value,nameof(value));_createdType=value;IsSealed=_createdType.IsSealed();IsInstantiable=!(_createdType.IsInterface()||_createdType.IsAbstract());}}public bool?IsReference{get;set;}public JsonConverter?Converter{get;set;}public JsonConverter?InternalConverter{get;internal set;}public IList<SerializationCallback>OnDeserializedCallbacks{get{if(_onDeserializedCallbacks==null){_onDeserializedCallbacks=new List<SerializationCallback>();}return _onDeserializedCallbacks;}}public IList<SerializationCallback>OnDeserializingCallbacks{get{if(_onDeserializingCallbacks==null){_onDeserializingCallbacks=new List<SerializationCallback>();}return _onDeserializingCallbacks;}}public IList<SerializationCallback>OnSerializedCallbacks{get{if(_onSerializedCallbacks==null){_onSerializedCallbacks=new List<SerializationCallback>();}return _onSerializedCallbacks;}}public IList<SerializationCallback>OnSerializingCallbacks{get{if(_onSerializingCallbacks==null){_onSerializingCallbacks=new List<SerializationCallback>();}return _onSerializingCallbacks;}}public IList<SerializationErrorCallback>OnErrorCallbacks{get{if(_onErrorCallbacks==null){_onErrorCallbacks=new List<SerializationErrorCallback>();}return _onErrorCallbacks;}}public Func<object>?DefaultCreator{get;set;}public bool DefaultCreatorNonPublic{get;set;}internal JsonContract(Type underlyingType){ValidationUtils.ArgumentNotNull(underlyingType,nameof(underlyingType));UnderlyingType=underlyingType;underlyingType=ReflectionUtils.EnsureNotByRefType(underlyingType);IsNullable=ReflectionUtils.IsNullable(underlyingType);NonNullableUnderlyingType=(IsNullable&&ReflectionUtils.IsNullableType(underlyingType))?Nullable.GetUnderlyingType(underlyingType):underlyingType;_createdType=CreatedType=NonNullableUnderlyingType;IsConvertable=ConvertUtils.IsConvertible(NonNullableUnderlyingType);IsEnum=NonNullableUnderlyingType.IsEnum();InternalReadType=ReadType.Read;}internal void InvokeOnSerializing(object o,StreamingContext context){if(_onSerializingCallbacks!=null){foreach(SerializationCallback callback in _onSerializingCallbacks){callback(o,context);}}}internal void InvokeOnSerialized(object o,StreamingContext context){if(_onSerializedCallbacks!=null){foreach(SerializationCallback callback in _onSerializedCallbacks){callback(o,context);}}}internal void InvokeOnDeserializing(object o,StreamingContext context){if(_onDeserializingCallbacks!=null){foreach(SerializationCallback callback in _onDeserializingCallbacks){callback(o,context);}}}internal void InvokeOnDeserialized(object o,StreamingContext context){if(_onDeserializedCallbacks!=null){foreach(SerializationCallback callback in _onDeserializedCallbacks){callback(o,context);}}}internal void InvokeOnError(object o,StreamingContext context,ErrorContext errorContext){if(_onErrorCallbacks!=null){foreach(SerializationErrorCallback callback in _onErrorCallbacks){callback(o,context,errorContext);}}}internal static SerializationCallback CreateSerializationCallback(MethodInfo callbackMethodInfo){return(o,context)=>callbackMethodInfo.Invoke(o,new object[]{context});}internal static SerializationErrorCallback CreateSerializationErrorCallback(MethodInfo callbackMethodInfo){return(o,context,econtext)=>callbackMethodInfo.Invoke(o,new object[]{context,econtext});}}}
namespace Newtonsoft.Json{public static class JsonConvert{public static Serialization.Func<JsonSerializerSettings>?DefaultSettings{get;set;}public static readonly string True="true";public static readonly string False="false";public static readonly string Null="null";public static readonly string Undefined="undefined";public static readonly string PositiveInfinity="Infinity";public static readonly string NegativeInfinity="-Infinity";public static readonly string NaN="NaN";public static string ToString(DateTime value){return ToString(value,DateFormatHandling.IsoDateFormat,DateTimeZoneHandling.RoundtripKind);}public static string ToString(DateTime value,DateFormatHandling format,DateTimeZoneHandling timeZoneHandling){DateTime updatedDateTime=DateTimeUtils.EnsureDateTime(value,timeZoneHandling);using(StringWriter writer=StringUtils.CreateStringWriter(64)){writer.Write('"');DateTimeUtils.WriteDateTimeString(writer,updatedDateTime,format,null,CultureInfo.InvariantCulture);writer.Write('"');return writer.ToString();}}
#if HAVE_DATE_TIME_OFFSET
public static string ToString(DateTimeOffset value){return ToString(value,DateFormatHandling.IsoDateFormat);}public static string ToString(DateTimeOffset value,DateFormatHandling format){using(StringWriter writer=StringUtils.CreateStringWriter(64)){writer.Write('"');DateTimeUtils.WriteDateTimeOffsetString(writer,value,format,null,CultureInfo.InvariantCulture);writer.Write('"');return writer.ToString();}}
#endif
public static string ToString(bool value){return(value)?True:False;}public static string ToString(char value){return ToString(char.ToString(value));}public static string ToString(Enum value){return value.ToString("D");}public static string ToString(int value){return value.ToString(null,CultureInfo.InvariantCulture);}public static string ToString(short value){return value.ToString(null,CultureInfo.InvariantCulture);}[CLSCompliant(false)]public static string ToString(ushort value){return value.ToString(null,CultureInfo.InvariantCulture);}[CLSCompliant(false)]public static string ToString(uint value){return value.ToString(null,CultureInfo.InvariantCulture);}public static string ToString(long value){return value.ToString(null,CultureInfo.InvariantCulture);}
#if HAVE_BIG_INTEGER
private static string ToStringInternal(BigInteger value){return value.ToString(null,CultureInfo.InvariantCulture);}
#endif
[CLSCompliant(false)]public static string ToString(ulong value){return value.ToString(null,CultureInfo.InvariantCulture);}public static string ToString(float value){return EnsureDecimalPlace(value,value.ToString("R",CultureInfo.InvariantCulture));}internal static string ToString(float value,FloatFormatHandling floatFormatHandling,char quoteChar,bool nullable){return EnsureFloatFormat(value,EnsureDecimalPlace(value,value.ToString("R",CultureInfo.InvariantCulture)),floatFormatHandling,quoteChar,nullable);}private static string EnsureFloatFormat(double value,string text,FloatFormatHandling floatFormatHandling,char quoteChar,bool nullable){if(floatFormatHandling==FloatFormatHandling.Symbol||!(double.IsInfinity(value)||double.IsNaN(value))){return text;}if(floatFormatHandling==FloatFormatHandling.DefaultValue){return(!nullable)?"0.0":Null;}return quoteChar+text+quoteChar;}public static string ToString(double value){return EnsureDecimalPlace(value,value.ToString("R",CultureInfo.InvariantCulture));}internal static string ToString(double value,FloatFormatHandling floatFormatHandling,char quoteChar,bool nullable){return EnsureFloatFormat(value,EnsureDecimalPlace(value,value.ToString("R",CultureInfo.InvariantCulture)),floatFormatHandling,quoteChar,nullable);}private static string EnsureDecimalPlace(double value,string text){if(double.IsNaN(value)||double.IsInfinity(value)||text.IndexOf('.')!=-1||text.IndexOf('E')!=-1||text.IndexOf('e')!=-1){return text;}return text+".0";}private static string EnsureDecimalPlace(string text){if(text.IndexOf('.')!=-1){return text;}return text+".0";}public static string ToString(byte value){return value.ToString(null,CultureInfo.InvariantCulture);}[CLSCompliant(false)]public static string ToString(sbyte value){return value.ToString(null,CultureInfo.InvariantCulture);}public static string ToString(decimal value){return EnsureDecimalPlace(value.ToString(null,CultureInfo.InvariantCulture));}public static string ToString(Guid value){return ToString(value,'"');}internal static string ToString(Guid value,char quoteChar){string text;string qc;
#if HAVE_CHAR_TO_STRING_WITH_CULTURE
text=value.ToString("D",CultureInfo.InvariantCulture);qc=quoteChar.ToString(CultureInfo.InvariantCulture);
#else
text=value.ToString("D");qc=quoteChar.ToString();
#endif
return qc+text+qc;}public static string ToString(TimeSpan value){return ToString(value,'"');}internal static string ToString(TimeSpan value,char quoteChar){return ToString(value.ToString(),quoteChar);}public static string ToString(Uri?value){if(value==null){return Null;}return ToString(value,'"');}internal static string ToString(Uri value,char quoteChar){return ToString(value.OriginalString,quoteChar);}public static string ToString(string?value){return ToString(value,'"');}public static string ToString(string?value,char delimiter){return ToString(value,delimiter,StringEscapeHandling.Default);}public static string ToString(string?value,char delimiter,StringEscapeHandling stringEscapeHandling){if(delimiter!='"'&&delimiter!='\''){throw new ArgumentException("Delimiter must be a single or double quote.",nameof(delimiter));}return JavaScriptUtils.ToEscapedJavaScriptString(value,delimiter,true,stringEscapeHandling);}public static string ToString(object?value){if(value==null){return Null;}PrimitiveTypeCode typeCode=ConvertUtils.GetTypeCode(value.GetType());switch(typeCode){case PrimitiveTypeCode.String:return ToString((string)value);case PrimitiveTypeCode.Char:return ToString((char)value);case PrimitiveTypeCode.Boolean:return ToString((bool)value);case PrimitiveTypeCode.SByte:return ToString((sbyte)value);case PrimitiveTypeCode.Int16:return ToString((short)value);case PrimitiveTypeCode.UInt16:return ToString((ushort)value);case PrimitiveTypeCode.Int32:return ToString((int)value);case PrimitiveTypeCode.Byte:return ToString((byte)value);case PrimitiveTypeCode.UInt32:return ToString((uint)value);case PrimitiveTypeCode.Int64:return ToString((long)value);case PrimitiveTypeCode.UInt64:return ToString((ulong)value);case PrimitiveTypeCode.Single:return ToString((float)value);case PrimitiveTypeCode.Double:return ToString((double)value);case PrimitiveTypeCode.DateTime:return ToString((DateTime)value);case PrimitiveTypeCode.Decimal:return ToString((decimal)value);
#if HAVE_DB_NULL_TYPE_CODE
case PrimitiveTypeCode.DBNull:return Null;
#endif
#if HAVE_DATE_TIME_OFFSET
case PrimitiveTypeCode.DateTimeOffset:return ToString((DateTimeOffset)value);
#endif
case PrimitiveTypeCode.Guid:return ToString((Guid)value);case PrimitiveTypeCode.Uri:return ToString((Uri)value);case PrimitiveTypeCode.TimeSpan:return ToString((TimeSpan)value);
#if HAVE_BIG_INTEGER
case PrimitiveTypeCode.BigInteger:return ToStringInternal((BigInteger)value);
#endif
}throw new ArgumentException("Unsupported type: {0}. Use the JsonSerializer class to get the object's JSON representation.".FormatWith(CultureInfo.InvariantCulture,value.GetType()));}[DebuggerStepThrough]public static string SerializeObject(object?value){return SerializeObject(value,null,(JsonSerializerSettings?)null);}[DebuggerStepThrough]public static string SerializeObject(object?value,Formatting formatting){return SerializeObject(value,formatting,(JsonSerializerSettings?)null);}[DebuggerStepThrough]public static string SerializeObject(object?value,params JsonConverter[]converters){JsonSerializerSettings?settings=(converters!=null&&converters.Length>0)?new JsonSerializerSettings{Converters=converters}:null;return SerializeObject(value,null,settings);}[DebuggerStepThrough]public static string SerializeObject(object?value,Formatting formatting,params JsonConverter[]converters){JsonSerializerSettings?settings=(converters!=null&&converters.Length>0)?new JsonSerializerSettings{Converters=converters}:null;return SerializeObject(value,null,formatting,settings);}[DebuggerStepThrough]public static string SerializeObject(object?value,JsonSerializerSettings?settings){return SerializeObject(value,null,settings);}[DebuggerStepThrough]public static string SerializeObject(object?value,Type?type,JsonSerializerSettings?settings){JsonSerializer jsonSD=JsonSerializer.CreateDefault(settings);return SerializeObjectInternal(value,type,jsonSD);}[DebuggerStepThrough]public static string SerializeObject(object?value,Formatting formatting,JsonSerializerSettings?settings){return SerializeObject(value,null,formatting,settings);}[DebuggerStepThrough]public static string SerializeObject(object?value,Type?type,Formatting formatting,JsonSerializerSettings?settings){JsonSerializer jsonSD=JsonSerializer.CreateDefault(settings);jsonSD.Formatting=formatting;return SerializeObjectInternal(value,type,jsonSD);}private static string SerializeObjectInternal(object?value,Type?type,JsonSerializer jsonSD){StringBuilder sb=new StringBuilder(256);StringWriter sw=new StringWriter(sb,CultureInfo.InvariantCulture);using(JsonTextWriter jsonWriter=new JsonTextWriter(sw)){jsonWriter.Formatting=jsonSD.Formatting;jsonSD.Serialize(jsonWriter,value,type);}return sw.ToString();}[DebuggerStepThrough]public static object?DeserializeObject(string value){return DeserializeObject(value,null,(JsonSerializerSettings?)null);}[DebuggerStepThrough]public static object?DeserializeObject(string value,JsonSerializerSettings settings){return DeserializeObject(value,null,settings);}[DebuggerStepThrough]public static object?DeserializeObject(string value,Type type){return DeserializeObject(value,type,(JsonSerializerSettings?)null);}[DebuggerStepThrough]public static T?DeserializeObject<T>(string value){return DeserializeObject<T>(value,(JsonSerializerSettings?)null);}[DebuggerStepThrough]public static T?DeserializeAnonymousType<T>(string value,T anonymousTypeObject){return DeserializeObject<T>(value);}[DebuggerStepThrough]public static T?DeserializeAnonymousType<T>(string value,T anonymousTypeObject,JsonSerializerSettings settings){return DeserializeObject<T>(value,settings);}[DebuggerStepThrough]public static T?DeserializeObject<T>(string value,params JsonConverter[]converters){return(T?)DeserializeObject(value,typeof(T),converters);}[DebuggerStepThrough]public static T?DeserializeObject<T>(string value,JsonSerializerSettings?settings){return(T?)DeserializeObject(value,typeof(T),settings);}[DebuggerStepThrough]public static object?DeserializeObject(string value,Type type,params JsonConverter[]converters){JsonSerializerSettings?settings=(converters!=null&&converters.Length>0)?new JsonSerializerSettings{Converters=converters}:null;return DeserializeObject(value,type,settings);}public static object?DeserializeObject(string value,Type?type,JsonSerializerSettings?settings){ValidationUtils.ArgumentNotNull(value,nameof(value));JsonSerializer jsonSD=JsonSerializer.CreateDefault(settings);if(!jsonSD.IsCheckAdditionalContentSet()){jsonSD.CheckAdditionalContent=true;}using(JsonTextReader reader=new JsonTextReader(new StringReader(value))){return jsonSD.Deserialize(reader,type);}}[DebuggerStepThrough]public static void PopulateObject(string value,object target){PopulateObject(value,target,null);}public static void PopulateObject(string value,object target,JsonSerializerSettings?settings){JsonSerializer jsonSD=JsonSerializer.CreateDefault(settings);using(JsonReader jsonReader=new JsonTextReader(new StringReader(value))){jsonSD.Populate(jsonReader,target);if(settings!=null&&settings.CheckAdditionalContent){while(jsonReader.Read()){if(jsonReader.TokenType!=JsonToken.Comment){throw JsonSerializationException.Create(jsonReader,"Additional text found in JSON string after finishing deserializing object.");}}}}}
#if HAVE_XML_DOCUMENT
public static string SerializeXmlNode(XmlNode?node){return SerializeXmlNode(node,Formatting.None);}public static string SerializeXmlNode(XmlNode?node,Formatting formatting){XmlNodeConverter converter=new XmlNodeConverter();return SerializeObject(node,formatting,converter);}public static string SerializeXmlNode(XmlNode?node,Formatting formatting,bool omitRootObject){XmlNodeConverter converter=new XmlNodeConverter{OmitRootObject=omitRootObject};return SerializeObject(node,formatting,converter);}public static XmlDocument?DeserializeXmlNode(string value){return DeserializeXmlNode(value,null);}public static XmlDocument?DeserializeXmlNode(string value,string?deserializeRootElementName){return DeserializeXmlNode(value,deserializeRootElementName,false);}public static XmlDocument?DeserializeXmlNode(string value,string?deserializeRootElementName,bool writeArrayAttribute){return DeserializeXmlNode(value,deserializeRootElementName,writeArrayAttribute,false);}public static XmlDocument?DeserializeXmlNode(string value,string?deserializeRootElementName,bool writeArrayAttribute,bool encodeSpecialCharacters){XmlNodeConverter converter=new XmlNodeConverter();converter.DeserializeRootElementName=deserializeRootElementName;converter.WriteArrayAttribute=writeArrayAttribute;converter.EncodeSpecialCharacters=encodeSpecialCharacters;return(XmlDocument?)DeserializeObject(value,typeof(XmlDocument),converter);}
#endif
#if HAVE_XLINQ
public static string SerializeXNode(XObject?node){return SerializeXNode(node,Formatting.None);}public static string SerializeXNode(XObject?node,Formatting formatting){return SerializeXNode(node,formatting,false);}public static string SerializeXNode(XObject?node,Formatting formatting,bool omitRootObject){XmlNodeConverter converter=new XmlNodeConverter{OmitRootObject=omitRootObject};return SerializeObject(node,formatting,converter);}public static XDocument?DeserializeXNode(string value){return DeserializeXNode(value,null);}public static XDocument?DeserializeXNode(string value,string?deserializeRootElementName){return DeserializeXNode(value,deserializeRootElementName,false);}public static XDocument?DeserializeXNode(string value,string?deserializeRootElementName,bool writeArrayAttribute){return DeserializeXNode(value,deserializeRootElementName,writeArrayAttribute,false);}public static XDocument?DeserializeXNode(string value,string?deserializeRootElementName,bool writeArrayAttribute,bool encodeSpecialCharacters){XmlNodeConverter converter=new XmlNodeConverter();converter.DeserializeRootElementName=deserializeRootElementName;converter.WriteArrayAttribute=writeArrayAttribute;converter.EncodeSpecialCharacters=encodeSpecialCharacters;return(XDocument?)DeserializeObject(value,typeof(XDocument),converter);}
#endif
}}namespace Newtonsoft.Json{public abstract class JsonConverter{public abstract void WriteJson(JsonWriter writer,object?value,JsonSerializer serializer);public abstract object?ReadJson(JsonReader reader,Type objectType,object?existingValue,JsonSerializer serializer);public abstract bool CanConvert(Type objectType);public virtual bool CanRead=>true;public virtual bool CanWrite=>true;}public abstract class JsonConverter<T>:JsonConverter{public sealed override void WriteJson(JsonWriter writer,object?value,JsonSerializer serializer){if(!(value!=null?value is T:ReflectionUtils.IsNullable(typeof(T)))){throw new JsonSerializationException("Converter cannot write specified value to JSON. {0} is required.".FormatWith(CultureInfo.InvariantCulture,typeof(T)));}WriteJson(writer,(T?)value,serializer);}public abstract void WriteJson(JsonWriter writer,T?value,JsonSerializer serializer);public sealed override object?ReadJson(JsonReader reader,Type objectType,object?existingValue,JsonSerializer serializer){bool existingIsNull=existingValue==null;if(!(existingIsNull||existingValue is T)){throw new JsonSerializationException("Converter cannot read JSON with the specified existing value. {0} is required.".FormatWith(CultureInfo.InvariantCulture,typeof(T)));}return ReadJson(reader,objectType,existingIsNull?default:(T?)existingValue,!existingIsNull,serializer);}public abstract T?ReadJson(JsonReader reader,Type objectType,T?existingValue,bool hasExistingValue,JsonSerializer serializer);public sealed override bool CanConvert(Type objectType){return typeof(T).IsAssignableFrom(objectType);}}}namespace Newtonsoft.Json{[AttributeUsage(AttributeTargets.Field|AttributeTargets.Property|AttributeTargets.Class|AttributeTargets.Struct|AttributeTargets.Interface|AttributeTargets.Enum|AttributeTargets.Parameter,AllowMultiple=false)]public sealed class JsonConverterAttribute:Attribute{private readonly Type _converterType;public Type ConverterType=>_converterType;public object[]?ConverterParameters{get;}public JsonConverterAttribute(Type converterType){if(converterType==null){throw new ArgumentNullException(nameof(converterType));}_converterType=converterType;}public JsonConverterAttribute(Type converterType,params object[]converterParameters):this(converterType){ConverterParameters=converterParameters;}}}namespace Newtonsoft.Json{public class JsonConverterCollection:Collection<JsonConverter>{}}namespace Newtonsoft.Json{[AttributeUsage(AttributeTargets.Class|AttributeTargets.Interface,AllowMultiple=false)]public sealed class JsonDictionaryAttribute:JsonContainerAttribute{public JsonDictionaryAttribute(){}public JsonDictionaryAttribute(string id):base(id){}}}
#if !HAVE_LINQ
#endif
namespace Newtonsoft.Json.Serialization{public class JsonDictionaryContract:JsonContainerContract{public Func<string,string>?DictionaryKeyResolver{get;set;}public Type?DictionaryKeyType{get;}public Type?DictionaryValueType{get;}internal JsonContract?KeyContract{get;set;}private readonly Type?_genericCollectionDefinitionType;private Type?_genericWrapperType;private ObjectConstructor<object>?_genericWrapperCreator;private Func<object>?_genericTemporaryDictionaryCreator;internal bool ShouldCreateWrapper{get;}private readonly ConstructorInfo?_parameterizedConstructor;private ObjectConstructor<object>?_overrideCreator;private ObjectConstructor<object>?_parameterizedCreator;internal ObjectConstructor<object>?ParameterizedCreator{get{if(_parameterizedCreator==null&&_parameterizedConstructor!=null){_parameterizedCreator=JsonTypeReflector.ReflectionDelegateFactory.CreateParameterizedConstructor(_parameterizedConstructor);}return _parameterizedCreator;}}public ObjectConstructor<object>?OverrideCreator{get=>_overrideCreator;set=>_overrideCreator=value;}public bool HasParameterizedCreator{get;set;}internal bool HasParameterizedCreatorInternal=>(HasParameterizedCreator||_parameterizedCreator!=null||_parameterizedConstructor!=null);public JsonDictionaryContract(Type underlyingType):base(underlyingType){ContractType=JsonContractType.Dictionary;Type?keyType;Type?valueType;if(ReflectionUtils.ImplementsGenericDefinition(NonNullableUnderlyingType,typeof(IDictionary<,>),out _genericCollectionDefinitionType)){keyType=_genericCollectionDefinitionType.GetGenericArguments()[0];valueType=_genericCollectionDefinitionType.GetGenericArguments()[1];if(ReflectionUtils.IsGenericDefinition(NonNullableUnderlyingType,typeof(IDictionary<,>))){CreatedType=typeof(Dictionary<,>).MakeGenericType(keyType,valueType);}else if(NonNullableUnderlyingType.IsGenericType()){Type typeDefinition=NonNullableUnderlyingType.GetGenericTypeDefinition();if(typeDefinition.FullName==JsonTypeReflector.ConcurrentDictionaryTypeName){ShouldCreateWrapper=true;}}
#if HAVE_READ_ONLY_COLLECTIONS
IsReadOnlyOrFixedSize=ReflectionUtils.InheritsGenericDefinition(NonNullableUnderlyingType,typeof(ReadOnlyDictionary<,>));
#endif
}
#if HAVE_READ_ONLY_COLLECTIONS
else if(ReflectionUtils.ImplementsGenericDefinition(NonNullableUnderlyingType,typeof(IReadOnlyDictionary<,>),out _genericCollectionDefinitionType)){keyType=_genericCollectionDefinitionType.GetGenericArguments()[0];valueType=_genericCollectionDefinitionType.GetGenericArguments()[1];if(ReflectionUtils.IsGenericDefinition(NonNullableUnderlyingType,typeof(IReadOnlyDictionary<,>))){CreatedType=typeof(ReadOnlyDictionary<,>).MakeGenericType(keyType,valueType);}IsReadOnlyOrFixedSize=true;}
#endif
else{ReflectionUtils.GetDictionaryKeyValueTypes(NonNullableUnderlyingType,out keyType,out valueType);if(NonNullableUnderlyingType==typeof(IDictionary)){CreatedType=typeof(Dictionary<object,object>);}}if(keyType!=null&&valueType!=null){_parameterizedConstructor=CollectionUtils.ResolveEnumerableCollectionConstructor(CreatedType,typeof(KeyValuePair<,>).MakeGenericType(keyType,valueType),typeof(IDictionary<,>).MakeGenericType(keyType,valueType));
#if HAVE_FSHARP_TYPES
if(!HasParameterizedCreatorInternal&&NonNullableUnderlyingType.Name==FSharpUtils.FSharpMapTypeName){FSharpUtils.EnsureInitialized(NonNullableUnderlyingType.Assembly());_parameterizedCreator=FSharpUtils.Instance.CreateMap(keyType,valueType);}
#endif
}if(!typeof(IDictionary).IsAssignableFrom(CreatedType)){ShouldCreateWrapper=true;}DictionaryKeyType=keyType;DictionaryValueType=valueType;
#if (NET20 || NET35)
if(DictionaryValueType!=null&&ReflectionUtils.IsNullableType(DictionaryValueType)){if(ReflectionUtils.InheritsGenericDefinition(CreatedType,typeof(Dictionary<,>),out _)){ShouldCreateWrapper=true;}}
#endif
if(DictionaryKeyType!=null&&DictionaryValueType!=null&&ImmutableCollectionsUtils.TryBuildImmutableForDictionaryContract(NonNullableUnderlyingType,DictionaryKeyType,DictionaryValueType,out Type?immutableCreatedType,out ObjectConstructor<object>?immutableParameterizedCreator)){CreatedType=immutableCreatedType;_parameterizedCreator=immutableParameterizedCreator;IsReadOnlyOrFixedSize=true;}}internal IWrappedDictionary CreateWrapper(object dictionary){if(_genericWrapperCreator==null){_genericWrapperType=typeof(DictionaryWrapper<,>).MakeGenericType(DictionaryKeyType,DictionaryValueType);ConstructorInfo genericWrapperConstructor=_genericWrapperType.GetConstructor(new[]{_genericCollectionDefinitionType!});_genericWrapperCreator=JsonTypeReflector.ReflectionDelegateFactory.CreateParameterizedConstructor(genericWrapperConstructor);}return(IWrappedDictionary)_genericWrapperCreator(dictionary);}internal IDictionary CreateTemporaryDictionary(){if(_genericTemporaryDictionaryCreator==null){Type temporaryDictionaryType=typeof(Dictionary<,>).MakeGenericType(DictionaryKeyType??typeof(object),DictionaryValueType??typeof(object));_genericTemporaryDictionaryCreator=JsonTypeReflector.ReflectionDelegateFactory.CreateDefaultConstructor<object>(temporaryDictionaryType);}return(IDictionary)_genericTemporaryDictionaryCreator();}}}
#if HAVE_DYNAMIC
namespace Newtonsoft.Json.Serialization{public class JsonDynamicContract:JsonContainerContract{public JsonPropertyCollection Properties{get;}public Func<string,string>?PropertyNameResolver{get;set;}private readonly ThreadSafeStore<string,CallSite<Func<CallSite,object,object>>>_callSiteGetters=new ThreadSafeStore<string,CallSite<Func<CallSite,object,object>>>(CreateCallSiteGetter);private readonly ThreadSafeStore<string,CallSite<Func<CallSite,object,object?,object>>>_callSiteSetters=new ThreadSafeStore<string,CallSite<Func<CallSite,object,object?,object>>>(CreateCallSiteSetter);private static CallSite<Func<CallSite,object,object>>CreateCallSiteGetter(string name){GetMemberBinder getMemberBinder=(GetMemberBinder)DynamicUtils.BinderWrapper.GetMember(name,typeof(DynamicUtils));return CallSite<Func<CallSite,object,object>>.Create(new NoThrowGetBinderMember(getMemberBinder));}private static CallSite<Func<CallSite,object,object?,object>>CreateCallSiteSetter(string name){SetMemberBinder binder=(SetMemberBinder)DynamicUtils.BinderWrapper.SetMember(name,typeof(DynamicUtils));return CallSite<Func<CallSite,object,object?,object>>.Create(new NoThrowSetBinderMember(binder));}public JsonDynamicContract(Type underlyingType):base(underlyingType){ContractType=JsonContractType.Dynamic;Properties=new JsonPropertyCollection(UnderlyingType);}internal bool TryGetMember(IDynamicMetaObjectProvider dynamicProvider,string name,out object?value){ValidationUtils.ArgumentNotNull(dynamicProvider,nameof(dynamicProvider));CallSite<Func<CallSite,object,object>>callSite=_callSiteGetters.Get(name);object result=callSite.Target(callSite,dynamicProvider);if(!ReferenceEquals(result,NoThrowExpressionVisitor.ErrorResult)){value=result;return true;}else{value=null;return false;}}internal bool TrySetMember(IDynamicMetaObjectProvider dynamicProvider,string name,object?value){ValidationUtils.ArgumentNotNull(dynamicProvider,nameof(dynamicProvider));CallSite<Func<CallSite,object,object?,object>>callSite=_callSiteSetters.Get(name);object result=callSite.Target(callSite,dynamicProvider,value);return!ReferenceEquals(result,NoThrowExpressionVisitor.ErrorResult);}}}
#endif
namespace Newtonsoft.Json{
#if HAVE_BINARY_EXCEPTION_SERIALIZATION
[Serializable]
#endif
public class JsonException:Exception{public JsonException(){}public JsonException(string message):base(message){}public JsonException(string message,Exception?innerException):base(message,innerException){}
#if HAVE_BINARY_EXCEPTION_SERIALIZATION
public JsonException(SerializationInfo info,StreamingContext context):base(info,context){}
#endif
internal static JsonException Create(IJsonLineInfo lineInfo,string path,string message){message=JsonPosition.FormatMessage(lineInfo,path,message);return new JsonException(message);}}}namespace Newtonsoft.Json{[AttributeUsage(AttributeTargets.Field|AttributeTargets.Property,AllowMultiple=false)]public class JsonExtensionDataAttribute:Attribute{public bool WriteData{get;set;}public bool ReadData{get;set;}public JsonExtensionDataAttribute(){WriteData=true;ReadData=true;}}}
#if HAVE_BINARY_SERIALIZATION
namespace Newtonsoft.Json.Serialization{internal class JsonFormatterConverter:IFormatterConverter{private readonly JsonSerializerInternalReader _reader;private readonly JsonISerializableContract _contract;private readonly JsonProperty?_member;public JsonFormatterConverter(JsonSerializerInternalReader reader,JsonISerializableContract contract,JsonProperty?member){ValidationUtils.ArgumentNotNull(reader,nameof(reader));ValidationUtils.ArgumentNotNull(contract,nameof(contract));_reader=reader;_contract=contract;_member=member;}private T GetTokenValue<T>(object value){ValidationUtils.ArgumentNotNull(value,nameof(value));JValue v=(JValue)value;return(T)System.Convert.ChangeType(v.Value,typeof(T),CultureInfo.InvariantCulture);}public object?Convert(object value,Type type){ValidationUtils.ArgumentNotNull(value,nameof(value));if(!(value is JToken token)){throw new ArgumentException("Value is not a JToken.",nameof(value));}return _reader.CreateISerializableItem(token,type,_contract,_member);}public object Convert(object value,TypeCode typeCode){ValidationUtils.ArgumentNotNull(value,nameof(value));object?resolvedValue=(value is JValue v)?v.Value:value;return System.Convert.ChangeType(resolvedValue,typeCode,CultureInfo.InvariantCulture);}public bool ToBoolean(object value){return GetTokenValue<bool>(value);}public byte ToByte(object value){return GetTokenValue<byte>(value);}public char ToChar(object value){return GetTokenValue<char>(value);}public DateTime ToDateTime(object value){return GetTokenValue<DateTime>(value);}public decimal ToDecimal(object value){return GetTokenValue<decimal>(value);}public double ToDouble(object value){return GetTokenValue<double>(value);}public short ToInt16(object value){return GetTokenValue<short>(value);}public int ToInt32(object value){return GetTokenValue<int>(value);}public long ToInt64(object value){return GetTokenValue<long>(value);}public sbyte ToSByte(object value){return GetTokenValue<sbyte>(value);}public float ToSingle(object value){return GetTokenValue<float>(value);}public string ToString(object value){return GetTokenValue<string>(value);}public ushort ToUInt16(object value){return GetTokenValue<ushort>(value);}public uint ToUInt32(object value){return GetTokenValue<uint>(value);}public ulong ToUInt64(object value){return GetTokenValue<ulong>(value);}}}
#endif
namespace Newtonsoft.Json{[AttributeUsage(AttributeTargets.Field|AttributeTargets.Property,AllowMultiple=false)]public sealed class JsonIgnoreAttribute:Attribute{}}
#if HAVE_BINARY_SERIALIZATION
namespace Newtonsoft.Json.Serialization{public class JsonISerializableContract:JsonContainerContract{public ObjectConstructor<object>?ISerializableCreator{get;set;}public JsonISerializableContract(Type underlyingType):base(underlyingType){ContractType=JsonContractType.Serializable;}}}
#endif
namespace Newtonsoft.Json.Serialization{public class JsonLinqContract:JsonContract{public JsonLinqContract(Type underlyingType):base(underlyingType){ContractType=JsonContractType.Linq;}}}namespace Newtonsoft.Json.Linq{public class JsonLoadSettings{private CommentHandling _commentHandling;private LineInfoHandling _lineInfoHandling;private DuplicatePropertyNameHandling _duplicatePropertyNameHandling;public JsonLoadSettings(){_lineInfoHandling=LineInfoHandling.Load;_commentHandling=CommentHandling.Ignore;_duplicatePropertyNameHandling=DuplicatePropertyNameHandling.Replace;}public CommentHandling CommentHandling{get=>_commentHandling;set{if(value<CommentHandling.Ignore||value>CommentHandling.Load){throw new ArgumentOutOfRangeException(nameof(value));}_commentHandling=value;}}public LineInfoHandling LineInfoHandling{get=>_lineInfoHandling;set{if(value<LineInfoHandling.Ignore||value>LineInfoHandling.Load){throw new ArgumentOutOfRangeException(nameof(value));}_lineInfoHandling=value;}}public DuplicatePropertyNameHandling DuplicatePropertyNameHandling{get=>_duplicatePropertyNameHandling;set{if(value<DuplicatePropertyNameHandling.Replace||value>DuplicatePropertyNameHandling.Error){throw new ArgumentOutOfRangeException(nameof(value));}_duplicatePropertyNameHandling=value;}}}}namespace Newtonsoft.Json.Linq{public class JsonMergeSettings{private MergeArrayHandling _mergeArrayHandling;private MergeNullValueHandling _mergeNullValueHandling;private StringComparison _propertyNameComparison;public JsonMergeSettings(){_propertyNameComparison=StringComparison.Ordinal;}public MergeArrayHandling MergeArrayHandling{get=>_mergeArrayHandling;set{if(value<MergeArrayHandling.Concat||value>MergeArrayHandling.Merge){throw new ArgumentOutOfRangeException(nameof(value));}_mergeArrayHandling=value;}}public MergeNullValueHandling MergeNullValueHandling{get=>_mergeNullValueHandling;set{if(value<MergeNullValueHandling.Ignore||value>MergeNullValueHandling.Merge){throw new ArgumentOutOfRangeException(nameof(value));}_mergeNullValueHandling=value;}}public StringComparison PropertyNameComparison{get=>_propertyNameComparison;set{if(value<StringComparison.CurrentCulture||value>StringComparison.OrdinalIgnoreCase){throw new ArgumentOutOfRangeException(nameof(value));}_propertyNameComparison=value;}}}}namespace Newtonsoft.Json{public abstract class JsonNameTable{public abstract string?Get(char[]key,int start,int length);}}namespace Newtonsoft.Json{[AttributeUsage(AttributeTargets.Class|AttributeTargets.Struct|AttributeTargets.Interface,AllowMultiple=false)]public sealed class JsonObjectAttribute:JsonContainerAttribute{private MemberSerialization _memberSerialization=MemberSerialization.OptOut;internal MissingMemberHandling?_missingMemberHandling;internal Required?_itemRequired;internal NullValueHandling?_itemNullValueHandling;public MemberSerialization MemberSerialization{get=>_memberSerialization;set=>_memberSerialization=value;}public MissingMemberHandling MissingMemberHandling{get=>_missingMemberHandling??default;set=>_missingMemberHandling=value;}public NullValueHandling ItemNullValueHandling{get=>_itemNullValueHandling??default;set=>_itemNullValueHandling=value;}public Required ItemRequired{get=>_itemRequired??default;set=>_itemRequired=value;}public JsonObjectAttribute(){}public JsonObjectAttribute(MemberSerialization memberSerialization){MemberSerialization=memberSerialization;}public JsonObjectAttribute(string id):base(id){}}}namespace Newtonsoft.Json.Serialization{public class JsonObjectContract:JsonContainerContract{public MemberSerialization MemberSerialization{get;set;}public MissingMemberHandling?MissingMemberHandling{get;set;}public Required?ItemRequired{get;set;}public NullValueHandling?ItemNullValueHandling{get;set;}public JsonPropertyCollection Properties{get;}public JsonPropertyCollection CreatorParameters{get{if(_creatorParameters==null){_creatorParameters=new JsonPropertyCollection(UnderlyingType);}return _creatorParameters;}}public ObjectConstructor<object>?OverrideCreator{get=>_overrideCreator;set=>_overrideCreator=value;}internal ObjectConstructor<object>?ParameterizedCreator{get=>_parameterizedCreator;set=>_parameterizedCreator=value;}public ExtensionDataSetter?ExtensionDataSetter{get;set;}public ExtensionDataGetter?ExtensionDataGetter{get;set;}public Type?ExtensionDataValueType{get=>_extensionDataValueType;set{_extensionDataValueType=value;ExtensionDataIsJToken=(value!=null&&typeof(JToken).IsAssignableFrom(value));}}public Func<string,string>?ExtensionDataNameResolver{get;set;}internal bool ExtensionDataIsJToken;private bool?_hasRequiredOrDefaultValueProperties;private ObjectConstructor<object>?_overrideCreator;private ObjectConstructor<object>?_parameterizedCreator;private JsonPropertyCollection?_creatorParameters;private Type?_extensionDataValueType;internal bool HasRequiredOrDefaultValueProperties{get{if(_hasRequiredOrDefaultValueProperties==null){_hasRequiredOrDefaultValueProperties=false;if(ItemRequired.GetValueOrDefault(Required.Default)!=Required.Default){_hasRequiredOrDefaultValueProperties=true;}else{foreach(JsonProperty property in Properties){if(property.Required!=Required.Default||(property.DefaultValueHandling&DefaultValueHandling.Populate)==DefaultValueHandling.Populate){_hasRequiredOrDefaultValueProperties=true;break;}}}}return _hasRequiredOrDefaultValueProperties.GetValueOrDefault();}}public JsonObjectContract(Type underlyingType):base(underlyingType){ContractType=JsonContractType.Object;Properties=new JsonPropertyCollection(UnderlyingType);}
#if HAVE_BINARY_FORMATTER
#if HAVE_SECURITY_SAFE_CRITICAL_ATTRIBUTE
[SecuritySafeCritical]
#endif
internal object GetUninitializedObject(){if(!JsonTypeReflector.FullyTrusted){throw new JsonException("Insufficient permissions. Creating an uninitialized '{0}' type requires full trust.".FormatWith(CultureInfo.InvariantCulture,NonNullableUnderlyingType));}return FormatterServices.GetUninitializedObject(NonNullableUnderlyingType);}
#endif
}}namespace Newtonsoft.Json{internal enum JsonContainerType{None=0,Object=1,Array=2,Constructor=3}internal struct JsonPosition{private static readonly char[]SpecialCharacters={'.',' ','\'','/','"','[',']','(',')','\t','\n','\r','\f','\b','\\','\u0085','\u2028','\u2029'};internal JsonContainerType Type;internal int Position;internal string?PropertyName;internal bool HasIndex;public JsonPosition(JsonContainerType type){Type=type;HasIndex=TypeHasIndex(type);Position=-1;PropertyName=null;}internal int CalculateLength(){switch(Type){case JsonContainerType.Object:return PropertyName!.Length+5;case JsonContainerType.Array:case JsonContainerType.Constructor:return MathUtils.IntLength((ulong)Position)+2;default:throw new ArgumentOutOfRangeException(nameof(Type));}}internal void WriteTo(StringBuilder sb,ref StringWriter?writer,ref char[]?buffer){switch(Type){case JsonContainerType.Object:string propertyName=PropertyName!;if(propertyName.IndexOfAny(SpecialCharacters)!=-1){sb.Append(@"['");if(writer==null){writer=new StringWriter(sb);}JavaScriptUtils.WriteEscapedJavaScriptString(writer,propertyName,'\'',false,JavaScriptUtils.SingleQuoteCharEscapeFlags,StringEscapeHandling.Default,null,ref buffer);sb.Append(@"']");}else{if(sb.Length>0){sb.Append('.');}sb.Append(propertyName);}break;case JsonContainerType.Array:case JsonContainerType.Constructor:sb.Append('[');sb.Append(Position);sb.Append(']');break;}}internal static bool TypeHasIndex(JsonContainerType type){return(type==JsonContainerType.Array||type==JsonContainerType.Constructor);}internal static string BuildPath(List<JsonPosition>positions,JsonPosition?currentPosition){int capacity=0;if(positions!=null){for(int i=0;i<positions.Count;i++){capacity+=positions[i].CalculateLength();}}if(currentPosition!=null){capacity+=currentPosition.GetValueOrDefault().CalculateLength();}StringBuilder sb=new StringBuilder(capacity);StringWriter?writer=null;char[]?buffer=null;if(positions!=null){foreach(JsonPosition state in positions){state.WriteTo(sb,ref writer,ref buffer);}}if(currentPosition!=null){currentPosition.GetValueOrDefault().WriteTo(sb,ref writer,ref buffer);}return sb.ToString();}internal static string FormatMessage(IJsonLineInfo?lineInfo,string path,string message){if(!message.EndsWith(Environment.NewLine,StringComparison.Ordinal)){message=message.Trim();if(!message.EndsWith('.')){message+=".";}message+=" ";}message+="Path '{0}'".FormatWith(CultureInfo.InvariantCulture,path);if(lineInfo!=null&&lineInfo.HasLineInfo()){message+=", line {0}, position {1}".FormatWith(CultureInfo.InvariantCulture,lineInfo.LineNumber,lineInfo.LinePosition);}message+=".";return message;}}}namespace Newtonsoft.Json.Serialization{public class JsonPrimitiveContract:JsonContract{internal PrimitiveTypeCode TypeCode{get;set;}public JsonPrimitiveContract(Type underlyingType):base(underlyingType){ContractType=JsonContractType.Primitive;TypeCode=ConvertUtils.GetTypeCode(underlyingType);IsReadOnlyOrFixedSize=true;if(ReadTypeMap.TryGetValue(NonNullableUnderlyingType,out ReadType readType)){InternalReadType=readType;}}private static readonly Dictionary<Type,ReadType>ReadTypeMap=new Dictionary<Type,ReadType>{[typeof(byte[])]=ReadType.ReadAsBytes,[typeof(byte)]=ReadType.ReadAsInt32,[typeof(short)]=ReadType.ReadAsInt32,[typeof(int)]=ReadType.ReadAsInt32,[typeof(decimal)]=ReadType.ReadAsDecimal,[typeof(bool)]=ReadType.ReadAsBoolean,[typeof(string)]=ReadType.ReadAsString,[typeof(DateTime)]=ReadType.ReadAsDateTime,
#if HAVE_DATE_TIME_OFFSET
[typeof(DateTimeOffset)]=ReadType.ReadAsDateTimeOffset,
#endif
[typeof(float)]=ReadType.ReadAsDouble,[typeof(double)]=ReadType.ReadAsDouble,[typeof(long)]=ReadType.ReadAsInt64};}}
#if !HAVE_LINQ
#endif
namespace Newtonsoft.Json.Serialization{public class JsonProperty{internal Required?_required;internal bool _hasExplicitDefaultValue;private object?_defaultValue;private bool _hasGeneratedDefaultValue;private string?_propertyName;internal bool _skipPropertyNameEscape;private Type?_propertyType;internal JsonContract?PropertyContract{get;set;}public string?PropertyName{get=>_propertyName;set{_propertyName=value;_skipPropertyNameEscape=!JavaScriptUtils.ShouldEscapeJavaScriptString(_propertyName,JavaScriptUtils.HtmlCharEscapeFlags);}}public Type?DeclaringType{get;set;}public int?Order{get;set;}public string?UnderlyingName{get;set;}public IValueProvider?ValueProvider{get;set;}public IAttributeProvider?AttributeProvider{get;set;}public Type?PropertyType{get=>_propertyType;set{if(_propertyType!=value){_propertyType=value;_hasGeneratedDefaultValue=false;}}}public JsonConverter?Converter{get;set;}[Obsolete("MemberConverter is obsolete. Use Converter instead.")]public JsonConverter?MemberConverter{get=>Converter;set=>Converter=value;}public bool Ignored{get;set;}public bool Readable{get;set;}public bool Writable{get;set;}public bool HasMemberAttribute{get;set;}public object?DefaultValue{get{if(!_hasExplicitDefaultValue){return null;}return _defaultValue;}set{_hasExplicitDefaultValue=true;_defaultValue=value;}}internal object?GetResolvedDefaultValue(){if(_propertyType==null){return null;}if(!_hasExplicitDefaultValue&&!_hasGeneratedDefaultValue){_defaultValue=ReflectionUtils.GetDefaultValue(_propertyType);_hasGeneratedDefaultValue=true;}return _defaultValue;}public Required Required{get=>_required??Required.Default;set=>_required=value;}public bool IsRequiredSpecified=>_required!=null;public bool?IsReference{get;set;}public NullValueHandling?NullValueHandling{get;set;}public DefaultValueHandling?DefaultValueHandling{get;set;}public ReferenceLoopHandling?ReferenceLoopHandling{get;set;}public ObjectCreationHandling?ObjectCreationHandling{get;set;}public TypeNameHandling?TypeNameHandling{get;set;}public Predicate<object>?ShouldSerialize{get;set;}public Predicate<object>?ShouldDeserialize{get;set;}public Predicate<object>?GetIsSpecified{get;set;}public Action<object,object?>?SetIsSpecified{get;set;}public override string ToString(){return PropertyName??string.Empty;}public JsonConverter?ItemConverter{get;set;}public bool?ItemIsReference{get;set;}public TypeNameHandling?ItemTypeNameHandling{get;set;}public ReferenceLoopHandling?ItemReferenceLoopHandling{get;set;}internal void WritePropertyName(JsonWriter writer){string?propertyName=PropertyName;MiscellaneousUtils.Assert(propertyName!=null);if(_skipPropertyNameEscape){writer.WritePropertyName(propertyName,false);}else{writer.WritePropertyName(propertyName);}}}}namespace Newtonsoft.Json{[AttributeUsage(AttributeTargets.Field|AttributeTargets.Property|AttributeTargets.Parameter,AllowMultiple=false)]public sealed class JsonPropertyAttribute:Attribute{internal NullValueHandling?_nullValueHandling;internal DefaultValueHandling?_defaultValueHandling;internal ReferenceLoopHandling?_referenceLoopHandling;internal ObjectCreationHandling?_objectCreationHandling;internal TypeNameHandling?_typeNameHandling;internal bool?_isReference;internal int?_order;internal Required?_required;internal bool?_itemIsReference;internal ReferenceLoopHandling?_itemReferenceLoopHandling;internal TypeNameHandling?_itemTypeNameHandling;public Type?ItemConverterType{get;set;}public object[]?ItemConverterParameters{get;set;}public Type?NamingStrategyType{get;set;}public object[]?NamingStrategyParameters{get;set;}public NullValueHandling NullValueHandling{get=>_nullValueHandling??default;set=>_nullValueHandling=value;}public DefaultValueHandling DefaultValueHandling{get=>_defaultValueHandling??default;set=>_defaultValueHandling=value;}public ReferenceLoopHandling ReferenceLoopHandling{get=>_referenceLoopHandling??default;set=>_referenceLoopHandling=value;}public ObjectCreationHandling ObjectCreationHandling{get=>_objectCreationHandling??default;set=>_objectCreationHandling=value;}public TypeNameHandling TypeNameHandling{get=>_typeNameHandling??default;set=>_typeNameHandling=value;}public bool IsReference{get=>_isReference??default;set=>_isReference=value;}public int Order{get=>_order??default;set=>_order=value;}public Required Required{get=>_required??Required.Default;set=>_required=value;}public string?PropertyName{get;set;}public ReferenceLoopHandling ItemReferenceLoopHandling{get=>_itemReferenceLoopHandling??default;set=>_itemReferenceLoopHandling=value;}public TypeNameHandling ItemTypeNameHandling{get=>_itemTypeNameHandling??default;set=>_itemTypeNameHandling=value;}public bool ItemIsReference{get=>_itemIsReference??default;set=>_itemIsReference=value;}public JsonPropertyAttribute(){}public JsonPropertyAttribute(string propertyName){PropertyName=propertyName;}}}namespace Newtonsoft.Json.Serialization{public class JsonPropertyCollection:KeyedCollection<string,JsonProperty>{private readonly Type _type;private readonly List<JsonProperty>_list;public JsonPropertyCollection(Type type):base(StringComparer.Ordinal){ValidationUtils.ArgumentNotNull(type,"type");_type=type;_list=(List<JsonProperty>)Items;}protected override string GetKeyForItem(JsonProperty item){return item.PropertyName!;}public void AddProperty(JsonProperty property){MiscellaneousUtils.Assert(property.PropertyName!=null);if(Contains(property.PropertyName)){if(property.Ignored){return;}JsonProperty existingProperty=this[property.PropertyName];bool duplicateProperty=true;if(existingProperty.Ignored){Remove(existingProperty);duplicateProperty=false;}else{if(property.DeclaringType!=null&&existingProperty.DeclaringType!=null){if(property.DeclaringType.IsSubclassOf(existingProperty.DeclaringType)||(existingProperty.DeclaringType.IsInterface()&&property.DeclaringType.ImplementInterface(existingProperty.DeclaringType))){Remove(existingProperty);duplicateProperty=false;}if(existingProperty.DeclaringType.IsSubclassOf(property.DeclaringType)||(property.DeclaringType.IsInterface()&&existingProperty.DeclaringType.ImplementInterface(property.DeclaringType))){return;}if(_type.ImplementInterface(existingProperty.DeclaringType)&&_type.ImplementInterface(property.DeclaringType)){return;}}}if(duplicateProperty){throw new JsonSerializationException("A member with the name '{0}' already exists on '{1}'. Use the JsonPropertyAttribute to specify another name.".FormatWith(CultureInfo.InvariantCulture,property.PropertyName,_type));}}Add(property);}public JsonProperty?GetClosestMatchProperty(string propertyName){JsonProperty?property=GetProperty(propertyName,StringComparison.Ordinal);if(property==null){property=GetProperty(propertyName,StringComparison.OrdinalIgnoreCase);}return property;}private bool TryGetValue(string key,[NotNullWhen(true)]out JsonProperty?item){if(Dictionary==null){item=default;return false;}return Dictionary.TryGetValue(key,out item);}public JsonProperty?GetProperty(string propertyName,StringComparison comparisonType){if(comparisonType==StringComparison.Ordinal){if(TryGetValue(propertyName,out JsonProperty?property)){return property;}return null;}for(int i=0;i<_list.Count;i++){JsonProperty property=_list[i];if(string.Equals(propertyName,property.PropertyName,comparisonType)){return property;}}return null;}}}
#if HAVE_ASYNC
namespace Newtonsoft.Json{public abstract partial class JsonReader{public virtual Task<bool>ReadAsync(CancellationToken cancellationToken=default){return cancellationToken.CancelIfRequestedAsync<bool>()??Read().ToAsync();}public async Task SkipAsync(CancellationToken cancellationToken=default){if(TokenType==JsonToken.PropertyName){await ReadAsync(cancellationToken).ConfigureAwait(false);}if(JsonTokenUtils.IsStartToken(TokenType)){int depth=Depth;while(await ReadAsync(cancellationToken).ConfigureAwait(false)&&depth<Depth){}}}internal async Task ReaderReadAndAssertAsync(CancellationToken cancellationToken){if(!await ReadAsync(cancellationToken).ConfigureAwait(false)){throw CreateUnexpectedEndException();}}public virtual Task<bool?>ReadAsBooleanAsync(CancellationToken cancellationToken=default){return cancellationToken.CancelIfRequestedAsync<bool?>()??Task.FromResult(ReadAsBoolean());}public virtual Task<byte[]?>ReadAsBytesAsync(CancellationToken cancellationToken=default){return cancellationToken.CancelIfRequestedAsync<byte[]?>()??Task.FromResult(ReadAsBytes());}internal async Task<byte[]?>ReadArrayIntoByteArrayAsync(CancellationToken cancellationToken){List<byte>buffer=new List<byte>();while(true){if(!await ReadAsync(cancellationToken).ConfigureAwait(false)){SetToken(JsonToken.None);}if(ReadArrayElementIntoByteArrayReportDone(buffer)){byte[]d=buffer.ToArray();SetToken(JsonToken.Bytes,d,false);return d;}}}public virtual Task<DateTime?>ReadAsDateTimeAsync(CancellationToken cancellationToken=default){return cancellationToken.CancelIfRequestedAsync<DateTime?>()??Task.FromResult(ReadAsDateTime());}public virtual Task<DateTimeOffset?>ReadAsDateTimeOffsetAsync(CancellationToken cancellationToken=default){return cancellationToken.CancelIfRequestedAsync<DateTimeOffset?>()??Task.FromResult(ReadAsDateTimeOffset());}public virtual Task<decimal?>ReadAsDecimalAsync(CancellationToken cancellationToken=default){return cancellationToken.CancelIfRequestedAsync<decimal?>()??Task.FromResult(ReadAsDecimal());}public virtual Task<double?>ReadAsDoubleAsync(CancellationToken cancellationToken=default){return Task.FromResult(ReadAsDouble());}public virtual Task<int?>ReadAsInt32Async(CancellationToken cancellationToken=default){return cancellationToken.CancelIfRequestedAsync<int?>()??Task.FromResult(ReadAsInt32());}public virtual Task<string?>ReadAsStringAsync(CancellationToken cancellationToken=default){return cancellationToken.CancelIfRequestedAsync<string?>()??Task.FromResult(ReadAsString());}internal async Task<bool>ReadAndMoveToContentAsync(CancellationToken cancellationToken){return await ReadAsync(cancellationToken).ConfigureAwait(false)&&await MoveToContentAsync(cancellationToken).ConfigureAwait(false);}internal Task<bool>MoveToContentAsync(CancellationToken cancellationToken){switch(TokenType){case JsonToken.None:case JsonToken.Comment:return MoveToContentFromNonContentAsync(cancellationToken);default:return AsyncUtils.True;}}private async Task<bool>MoveToContentFromNonContentAsync(CancellationToken cancellationToken){while(true){if(!await ReadAsync(cancellationToken).ConfigureAwait(false)){return false;}switch(TokenType){case JsonToken.None:case JsonToken.Comment:break;default:return true;}}}}}
#endif
#if HAVE_BIG_INTEGER
#endif
namespace Newtonsoft.Json{public abstract partial class JsonReader:IDisposable{protected internal enum State{Start,Complete,Property,ObjectStart,Object,ArrayStart,Array,Closed,PostValue,ConstructorStart,Constructor,Error,Finished}private JsonToken _tokenType;private object?_value;internal char _quoteChar;internal State _currentState;private JsonPosition _currentPosition;private CultureInfo?_culture;private DateTimeZoneHandling _dateTimeZoneHandling;private int?_maxDepth;private bool _hasExceededMaxDepth;internal DateParseHandling _dateParseHandling;internal FloatParseHandling _floatParseHandling;private string?_dateFormatString;private List<JsonPosition>?_stack;protected State CurrentState=>_currentState;public bool CloseInput{get;set;}public bool SupportMultipleContent{get;set;}public virtual char QuoteChar{get=>_quoteChar;protected internal set=>_quoteChar=value;}public DateTimeZoneHandling DateTimeZoneHandling{get=>_dateTimeZoneHandling;set{if(value<DateTimeZoneHandling.Local||value>DateTimeZoneHandling.RoundtripKind){throw new ArgumentOutOfRangeException(nameof(value));}_dateTimeZoneHandling=value;}}public DateParseHandling DateParseHandling{get=>_dateParseHandling;set{if(value<DateParseHandling.None||
#if HAVE_DATE_TIME_OFFSET
value>DateParseHandling.DateTimeOffset
#else
value>DateParseHandling.DateTime
#endif
){throw new ArgumentOutOfRangeException(nameof(value));}_dateParseHandling=value;}}public FloatParseHandling FloatParseHandling{get=>_floatParseHandling;set{if(value<FloatParseHandling.Double||value>FloatParseHandling.Decimal){throw new ArgumentOutOfRangeException(nameof(value));}_floatParseHandling=value;}}public string?DateFormatString{get=>_dateFormatString;set=>_dateFormatString=value;}public int?MaxDepth{get=>_maxDepth;set{if(value<=0){throw new ArgumentException("Value must be positive.",nameof(value));}_maxDepth=value;}}public virtual JsonToken TokenType=>_tokenType;public virtual object?Value=>_value;public virtual Type?ValueType=>_value?.GetType();public virtual int Depth{get{int depth=_stack?.Count??0;if(JsonTokenUtils.IsStartToken(TokenType)||_currentPosition.Type==JsonContainerType.None){return depth;}else{return depth+1;}}}public virtual string Path{get{if(_currentPosition.Type==JsonContainerType.None){return string.Empty;}bool insideContainer=(_currentState!=State.ArrayStart&&_currentState!=State.ConstructorStart&&_currentState!=State.ObjectStart);JsonPosition?current=insideContainer?(JsonPosition?)_currentPosition:null;return JsonPosition.BuildPath(_stack!,current);}}public CultureInfo Culture{get=>_culture??CultureInfo.InvariantCulture;set=>_culture=value;}internal JsonPosition GetPosition(int depth){if(_stack!=null&&depth<_stack.Count){return _stack[depth];}return _currentPosition;}protected JsonReader(){_currentState=State.Start;_dateTimeZoneHandling=DateTimeZoneHandling.RoundtripKind;_dateParseHandling=DateParseHandling.DateTime;_floatParseHandling=FloatParseHandling.Double;_maxDepth=64;CloseInput=true;}private void Push(JsonContainerType value){UpdateScopeWithFinishedValue();if(_currentPosition.Type==JsonContainerType.None){_currentPosition=new JsonPosition(value);}else{if(_stack==null){_stack=new List<JsonPosition>();}_stack.Add(_currentPosition);_currentPosition=new JsonPosition(value);if(_maxDepth!=null&&Depth+1>_maxDepth&&!_hasExceededMaxDepth){_hasExceededMaxDepth=true;throw JsonReaderException.Create(this,"The reader's MaxDepth of {0} has been exceeded.".FormatWith(CultureInfo.InvariantCulture,_maxDepth));}}}private JsonContainerType Pop(){JsonPosition oldPosition;if(_stack!=null&&_stack.Count>0){oldPosition=_currentPosition;_currentPosition=_stack[_stack.Count-1];_stack.RemoveAt(_stack.Count-1);}else{oldPosition=_currentPosition;_currentPosition=new JsonPosition();}if(_maxDepth!=null&&Depth<=_maxDepth){_hasExceededMaxDepth=false;}return oldPosition.Type;}private JsonContainerType Peek(){return _currentPosition.Type;}public abstract bool Read();public virtual int?ReadAsInt32(){JsonToken t=GetContentToken();switch(t){case JsonToken.None:case JsonToken.Null:case JsonToken.EndArray:return null;case JsonToken.Integer:case JsonToken.Float:object v=Value!;if(v is int i){return i;}
#if HAVE_BIG_INTEGER
if(v is BigInteger value){i=(int)value;}else
#endif
{try{i=Convert.ToInt32(v,CultureInfo.InvariantCulture);}catch(Exception ex){throw JsonReaderException.Create(this,"Could not convert to integer: {0}.".FormatWith(CultureInfo.InvariantCulture,v),ex);}}SetToken(JsonToken.Integer,i,false);return i;case JsonToken.String:string?s=(string?)Value;return ReadInt32String(s);}throw JsonReaderException.Create(this,"Error reading integer. Unexpected token: {0}.".FormatWith(CultureInfo.InvariantCulture,t));}internal int?ReadInt32String(string?s){if(StringUtils.IsNullOrEmpty(s)){SetToken(JsonToken.Null,null,false);return null;}if(int.TryParse(s,NumberStyles.Integer,Culture,out int i)){SetToken(JsonToken.Integer,i,false);return i;}else{SetToken(JsonToken.String,s,false);throw JsonReaderException.Create(this,"Could not convert string to integer: {0}.".FormatWith(CultureInfo.InvariantCulture,s));}}public virtual string?ReadAsString(){JsonToken t=GetContentToken();switch(t){case JsonToken.None:case JsonToken.Null:case JsonToken.EndArray:return null;case JsonToken.String:return(string?)Value;}if(JsonTokenUtils.IsPrimitiveToken(t)){object?v=Value;if(v!=null){string s;if(v is IFormattable formattable){s=formattable.ToString(null,Culture);}else{s=v is Uri uri?uri.OriginalString:v.ToString();}SetToken(JsonToken.String,s,false);return s;}}throw JsonReaderException.Create(this,"Error reading string. Unexpected token: {0}.".FormatWith(CultureInfo.InvariantCulture,t));}public virtual byte[]?ReadAsBytes(){JsonToken t=GetContentToken();switch(t){case JsonToken.StartObject:{ReadIntoWrappedTypeObject();byte[]?data=ReadAsBytes();ReaderReadAndAssert();if(TokenType!=JsonToken.EndObject){throw JsonReaderException.Create(this,"Error reading bytes. Unexpected token: {0}.".FormatWith(CultureInfo.InvariantCulture,TokenType));}SetToken(JsonToken.Bytes,data,false);return data;}case JsonToken.String:{string s=(string)Value!;byte[]data;if(s.Length==0){data=CollectionUtils.ArrayEmpty<byte>();}else if(ConvertUtils.TryConvertGuid(s,out Guid g1)){data=g1.ToByteArray();}else{data=Convert.FromBase64String(s);}SetToken(JsonToken.Bytes,data,false);return data;}case JsonToken.None:case JsonToken.Null:case JsonToken.EndArray:return null;case JsonToken.Bytes:if(Value is Guid g2){byte[]data=g2.ToByteArray();SetToken(JsonToken.Bytes,data,false);return data;}return(byte[]?)Value;case JsonToken.StartArray:return ReadArrayIntoByteArray();}throw JsonReaderException.Create(this,"Error reading bytes. Unexpected token: {0}.".FormatWith(CultureInfo.InvariantCulture,t));}internal byte[]ReadArrayIntoByteArray(){List<byte>buffer=new List<byte>();while(true){if(!Read()){SetToken(JsonToken.None);}if(ReadArrayElementIntoByteArrayReportDone(buffer)){byte[]d=buffer.ToArray();SetToken(JsonToken.Bytes,d,false);return d;}}}private bool ReadArrayElementIntoByteArrayReportDone(List<byte>buffer){switch(TokenType){case JsonToken.None:throw JsonReaderException.Create(this,"Unexpected end when reading bytes.");case JsonToken.Integer:buffer.Add(Convert.ToByte(Value,CultureInfo.InvariantCulture));return false;case JsonToken.EndArray:return true;case JsonToken.Comment:return false;default:throw JsonReaderException.Create(this,"Unexpected token when reading bytes: {0}.".FormatWith(CultureInfo.InvariantCulture,TokenType));}}public virtual double?ReadAsDouble(){JsonToken t=GetContentToken();switch(t){case JsonToken.None:case JsonToken.Null:case JsonToken.EndArray:return null;case JsonToken.Integer:case JsonToken.Float:object v=Value!;if(v is double d){return d;}
#if HAVE_BIG_INTEGER
if(v is BigInteger value){d=(double)value;}else
#endif
{d=Convert.ToDouble(v,CultureInfo.InvariantCulture);}SetToken(JsonToken.Float,d,false);return(double)d;case JsonToken.String:return ReadDoubleString((string?)Value);}throw JsonReaderException.Create(this,"Error reading double. Unexpected token: {0}.".FormatWith(CultureInfo.InvariantCulture,t));}internal double?ReadDoubleString(string?s){if(StringUtils.IsNullOrEmpty(s)){SetToken(JsonToken.Null,null,false);return null;}if(double.TryParse(s,NumberStyles.Float|NumberStyles.AllowThousands,Culture,out double d)){SetToken(JsonToken.Float,d,false);return d;}else{SetToken(JsonToken.String,s,false);throw JsonReaderException.Create(this,"Could not convert string to double: {0}.".FormatWith(CultureInfo.InvariantCulture,s));}}public virtual bool?ReadAsBoolean(){JsonToken t=GetContentToken();switch(t){case JsonToken.None:case JsonToken.Null:case JsonToken.EndArray:return null;case JsonToken.Integer:case JsonToken.Float:bool b;
#if HAVE_BIG_INTEGER
if(Value is BigInteger integer){b=integer!=0;}else
#endif
{b=Convert.ToBoolean(Value,CultureInfo.InvariantCulture);}SetToken(JsonToken.Boolean,b,false);return b;case JsonToken.String:return ReadBooleanString((string?)Value);case JsonToken.Boolean:return(bool)Value!;}throw JsonReaderException.Create(this,"Error reading boolean. Unexpected token: {0}.".FormatWith(CultureInfo.InvariantCulture,t));}internal bool?ReadBooleanString(string?s){if(StringUtils.IsNullOrEmpty(s)){SetToken(JsonToken.Null,null,false);return null;}if(bool.TryParse(s,out bool b)){SetToken(JsonToken.Boolean,b,false);return b;}else{SetToken(JsonToken.String,s,false);throw JsonReaderException.Create(this,"Could not convert string to boolean: {0}.".FormatWith(CultureInfo.InvariantCulture,s));}}public virtual decimal?ReadAsDecimal(){JsonToken t=GetContentToken();switch(t){case JsonToken.None:case JsonToken.Null:case JsonToken.EndArray:return null;case JsonToken.Integer:case JsonToken.Float:object v=Value!;if(v is decimal d){return d;}
#if HAVE_BIG_INTEGER
if(v is BigInteger value){d=(decimal)value;}else
#endif
{try{d=Convert.ToDecimal(v,CultureInfo.InvariantCulture);}catch(Exception ex){throw JsonReaderException.Create(this,"Could not convert to decimal: {0}.".FormatWith(CultureInfo.InvariantCulture,v),ex);}}SetToken(JsonToken.Float,d,false);return d;case JsonToken.String:return ReadDecimalString((string?)Value);}throw JsonReaderException.Create(this,"Error reading decimal. Unexpected token: {0}.".FormatWith(CultureInfo.InvariantCulture,t));}internal decimal?ReadDecimalString(string?s){if(StringUtils.IsNullOrEmpty(s)){SetToken(JsonToken.Null,null,false);return null;}if(decimal.TryParse(s,NumberStyles.Number,Culture,out decimal d)){SetToken(JsonToken.Float,d,false);return d;}else if(ConvertUtils.DecimalTryParse(s.ToCharArray(),0,s.Length,out d)==ParseResult.Success){SetToken(JsonToken.Float,d,false);return d;}else{SetToken(JsonToken.String,s,false);throw JsonReaderException.Create(this,"Could not convert string to decimal: {0}.".FormatWith(CultureInfo.InvariantCulture,s));}}public virtual DateTime?ReadAsDateTime(){switch(GetContentToken()){case JsonToken.None:case JsonToken.Null:case JsonToken.EndArray:return null;case JsonToken.Date:
#if HAVE_DATE_TIME_OFFSET
if(Value is DateTimeOffset offset){SetToken(JsonToken.Date,offset.DateTime,false);}
#endif
return(DateTime)Value!;case JsonToken.String:return ReadDateTimeString((string?)Value);}throw JsonReaderException.Create(this,"Error reading date. Unexpected token: {0}.".FormatWith(CultureInfo.InvariantCulture,TokenType));}internal DateTime?ReadDateTimeString(string?s){if(StringUtils.IsNullOrEmpty(s)){SetToken(JsonToken.Null,null,false);return null;}if(DateTimeUtils.TryParseDateTime(s,DateTimeZoneHandling,_dateFormatString,Culture,out DateTime dt)){dt=DateTimeUtils.EnsureDateTime(dt,DateTimeZoneHandling);SetToken(JsonToken.Date,dt,false);return dt;}if(DateTime.TryParse(s,Culture,DateTimeStyles.RoundtripKind,out dt)){dt=DateTimeUtils.EnsureDateTime(dt,DateTimeZoneHandling);SetToken(JsonToken.Date,dt,false);return dt;}throw JsonReaderException.Create(this,"Could not convert string to DateTime: {0}.".FormatWith(CultureInfo.InvariantCulture,s));}
#if HAVE_DATE_TIME_OFFSET
public virtual DateTimeOffset?ReadAsDateTimeOffset(){JsonToken t=GetContentToken();switch(t){case JsonToken.None:case JsonToken.Null:case JsonToken.EndArray:return null;case JsonToken.Date:if(Value is DateTime time){SetToken(JsonToken.Date,new DateTimeOffset(time),false);}return(DateTimeOffset)Value!;case JsonToken.String:string?s=(string?)Value;return ReadDateTimeOffsetString(s);default:throw JsonReaderException.Create(this,"Error reading date. Unexpected token: {0}.".FormatWith(CultureInfo.InvariantCulture,t));}}internal DateTimeOffset?ReadDateTimeOffsetString(string?s){if(StringUtils.IsNullOrEmpty(s)){SetToken(JsonToken.Null,null,false);return null;}if(DateTimeUtils.TryParseDateTimeOffset(s,_dateFormatString,Culture,out DateTimeOffset dt)){SetToken(JsonToken.Date,dt,false);return dt;}if(DateTimeOffset.TryParse(s,Culture,DateTimeStyles.RoundtripKind,out dt)){SetToken(JsonToken.Date,dt,false);return dt;}SetToken(JsonToken.String,s,false);throw JsonReaderException.Create(this,"Could not convert string to DateTimeOffset: {0}.".FormatWith(CultureInfo.InvariantCulture,s));}
#endif
internal void ReaderReadAndAssert(){if(!Read()){throw CreateUnexpectedEndException();}}internal JsonReaderException CreateUnexpectedEndException(){return JsonReaderException.Create(this,"Unexpected end when reading JSON.");}internal void ReadIntoWrappedTypeObject(){ReaderReadAndAssert();if(Value!=null&&Value.ToString()==JsonTypeReflector.TypePropertyName){ReaderReadAndAssert();if(Value!=null&&Value.ToString().StartsWith("System.Byte[]",StringComparison.Ordinal)){ReaderReadAndAssert();if(Value.ToString()==JsonTypeReflector.ValuePropertyName){return;}}}throw JsonReaderException.Create(this,"Error reading bytes. Unexpected token: {0}.".FormatWith(CultureInfo.InvariantCulture,JsonToken.StartObject));}public void Skip(){if(TokenType==JsonToken.PropertyName){Read();}if(JsonTokenUtils.IsStartToken(TokenType)){int depth=Depth;while(Read()&&(depth<Depth)){}}}protected void SetToken(JsonToken newToken){SetToken(newToken,null,true);}protected void SetToken(JsonToken newToken,object?value){SetToken(newToken,value,true);}protected void SetToken(JsonToken newToken,object?value,bool updateIndex){_tokenType=newToken;_value=value;switch(newToken){case JsonToken.StartObject:_currentState=State.ObjectStart;Push(JsonContainerType.Object);break;case JsonToken.StartArray:_currentState=State.ArrayStart;Push(JsonContainerType.Array);break;case JsonToken.StartConstructor:_currentState=State.ConstructorStart;Push(JsonContainerType.Constructor);break;case JsonToken.EndObject:ValidateEnd(JsonToken.EndObject);break;case JsonToken.EndArray:ValidateEnd(JsonToken.EndArray);break;case JsonToken.EndConstructor:ValidateEnd(JsonToken.EndConstructor);break;case JsonToken.PropertyName:_currentState=State.Property;_currentPosition.PropertyName=(string)value!;break;case JsonToken.Undefined:case JsonToken.Integer:case JsonToken.Float:case JsonToken.Boolean:case JsonToken.Null:case JsonToken.Date:case JsonToken.String:case JsonToken.Raw:case JsonToken.Bytes:SetPostValueState(updateIndex);break;}}internal void SetPostValueState(bool updateIndex){if(Peek()!=JsonContainerType.None||SupportMultipleContent){_currentState=State.PostValue;}else{SetFinished();}if(updateIndex){UpdateScopeWithFinishedValue();}}private void UpdateScopeWithFinishedValue(){if(_currentPosition.HasIndex){_currentPosition.Position++;}}private void ValidateEnd(JsonToken endToken){JsonContainerType currentObject=Pop();if(GetTypeForCloseToken(endToken)!=currentObject){throw JsonReaderException.Create(this,"JsonToken {0} is not valid for closing JsonType {1}.".FormatWith(CultureInfo.InvariantCulture,endToken,currentObject));}if(Peek()!=JsonContainerType.None||SupportMultipleContent){_currentState=State.PostValue;}else{SetFinished();}}protected void SetStateBasedOnCurrent(){JsonContainerType currentObject=Peek();switch(currentObject){case JsonContainerType.Object:_currentState=State.Object;break;case JsonContainerType.Array:_currentState=State.Array;break;case JsonContainerType.Constructor:_currentState=State.Constructor;break;case JsonContainerType.None:SetFinished();break;default:throw JsonReaderException.Create(this,"While setting the reader state back to current object an unexpected JsonType was encountered: {0}".FormatWith(CultureInfo.InvariantCulture,currentObject));}}private void SetFinished(){_currentState=SupportMultipleContent?State.Start:State.Finished;}private JsonContainerType GetTypeForCloseToken(JsonToken token){switch(token){case JsonToken.EndObject:return JsonContainerType.Object;case JsonToken.EndArray:return JsonContainerType.Array;case JsonToken.EndConstructor:return JsonContainerType.Constructor;default:throw JsonReaderException.Create(this,"Not a valid close JsonToken: {0}".FormatWith(CultureInfo.InvariantCulture,token));}}void IDisposable.Dispose(){Dispose(true);GC.SuppressFinalize(this);}protected virtual void Dispose(bool disposing){if(_currentState!=State.Closed&&disposing){Close();}}public virtual void Close(){_currentState=State.Closed;_tokenType=JsonToken.None;_value=null;}internal void ReadAndAssert(){if(!Read()){throw JsonSerializationException.Create(this,"Unexpected end when reading JSON.");}}internal void ReadForTypeAndAssert(JsonContract?contract,bool hasConverter){if(!ReadForType(contract,hasConverter)){throw JsonSerializationException.Create(this,"Unexpected end when reading JSON.");}}internal bool ReadForType(JsonContract?contract,bool hasConverter){if(hasConverter){return Read();}ReadType t=contract?.InternalReadType??ReadType.Read;switch(t){case ReadType.Read:return ReadAndMoveToContent();case ReadType.ReadAsInt32:ReadAsInt32();break;case ReadType.ReadAsInt64:bool result=ReadAndMoveToContent();if(TokenType==JsonToken.Undefined){throw JsonReaderException.Create(this,"An undefined token is not a valid {0}.".FormatWith(CultureInfo.InvariantCulture,contract?.UnderlyingType??typeof(long)));}return result;case ReadType.ReadAsDecimal:ReadAsDecimal();break;case ReadType.ReadAsDouble:ReadAsDouble();break;case ReadType.ReadAsBytes:ReadAsBytes();break;case ReadType.ReadAsBoolean:ReadAsBoolean();break;case ReadType.ReadAsString:ReadAsString();break;case ReadType.ReadAsDateTime:ReadAsDateTime();break;
#if HAVE_DATE_TIME_OFFSET
case ReadType.ReadAsDateTimeOffset:ReadAsDateTimeOffset();break;
#endif
default:throw new ArgumentOutOfRangeException();}return(TokenType!=JsonToken.None);}internal bool ReadAndMoveToContent(){return Read()&&MoveToContent();}internal bool MoveToContent(){JsonToken t=TokenType;while(t==JsonToken.None||t==JsonToken.Comment){if(!Read()){return false;}t=TokenType;}return true;}private JsonToken GetContentToken(){JsonToken t;do{if(!Read()){SetToken(JsonToken.None);return JsonToken.None;}else{t=TokenType;}}while(t==JsonToken.Comment);return t;}}}namespace Newtonsoft.Json{
#if HAVE_BINARY_EXCEPTION_SERIALIZATION
[Serializable]
#endif
public class JsonReaderException:JsonException{public int LineNumber{get;}public int LinePosition{get;}public string?Path{get;}public JsonReaderException(){}public JsonReaderException(string message):base(message){}public JsonReaderException(string message,Exception innerException):base(message,innerException){}
#if HAVE_BINARY_EXCEPTION_SERIALIZATION
public JsonReaderException(SerializationInfo info,StreamingContext context):base(info,context){}
#endif
public JsonReaderException(string message,string path,int lineNumber,int linePosition,Exception?innerException):base(message,innerException){Path=path;LineNumber=lineNumber;LinePosition=linePosition;}internal static JsonReaderException Create(JsonReader reader,string message){return Create(reader,message,null);}internal static JsonReaderException Create(JsonReader reader,string message,Exception?ex){return Create(reader as IJsonLineInfo,reader.Path,message,ex);}internal static JsonReaderException Create(IJsonLineInfo?lineInfo,string path,string message,Exception?ex){message=JsonPosition.FormatMessage(lineInfo,path,message);int lineNumber;int linePosition;if(lineInfo!=null&&lineInfo.HasLineInfo()){lineNumber=lineInfo.LineNumber;linePosition=lineInfo.LinePosition;}else{lineNumber=0;linePosition=0;}return new JsonReaderException(message,path,lineNumber,linePosition,ex);}}}namespace Newtonsoft.Json{[AttributeUsage(AttributeTargets.Field|AttributeTargets.Property,AllowMultiple=false)]public sealed class JsonRequiredAttribute:Attribute{}}
namespace Newtonsoft.Json.Schema{[Obsolete("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]public class JsonSchema{public string Id{get;set;}public string Title{get;set;}public bool?Required{get;set;}public bool?ReadOnly{get;set;}public bool?Hidden{get;set;}public bool?Transient{get;set;}public string Description{get;set;}public JsonSchemaType?Type{get;set;}public string Pattern{get;set;}public int?MinimumLength{get;set;}public int?MaximumLength{get;set;}public double?DivisibleBy{get;set;}public double?Minimum{get;set;}public double?Maximum{get;set;}public bool?ExclusiveMinimum{get;set;}public bool?ExclusiveMaximum{get;set;}public int?MinimumItems{get;set;}public int?MaximumItems{get;set;}public IList<JsonSchema>Items{get;set;}public bool PositionalItemsValidation{get;set;}public JsonSchema AdditionalItems{get;set;}public bool AllowAdditionalItems{get;set;}public bool UniqueItems{get;set;}public IDictionary<string,JsonSchema>Properties{get;set;}public JsonSchema AdditionalProperties{get;set;}public IDictionary<string,JsonSchema>PatternProperties{get;set;}public bool AllowAdditionalProperties{get;set;}public string Requires{get;set;}public IList<JToken>Enum{get;set;}public JsonSchemaType?Disallow{get;set;}public JToken Default{get;set;}public IList<JsonSchema>Extends{get;set;}public string Format{get;set;}internal string Location{get;set;}
private readonly string _internalId=Guid.NewGuid().ToString("N");
internal string InternalId=>_internalId;internal string DeferredReference{get;set;}internal bool ReferencesResolved{get;set;}public JsonSchema(){AllowAdditionalProperties=true;AllowAdditionalItems=true;}public static JsonSchema Read(JsonReader reader){return Read(reader,new JsonSchemaResolver());}public static JsonSchema Read(JsonReader reader,JsonSchemaResolver resolver){ValidationUtils.ArgumentNotNull(reader,nameof(reader));ValidationUtils.ArgumentNotNull(resolver,nameof(resolver));JsonSchemaBuilder builder=new JsonSchemaBuilder(resolver);return builder.Read(reader);}public static JsonSchema Parse(string json){return Parse(json,new JsonSchemaResolver());}public static JsonSchema Parse(string json,JsonSchemaResolver resolver){ValidationUtils.ArgumentNotNull(json,nameof(json));using(JsonReader reader=new JsonTextReader(new StringReader(json))){return Read(reader,resolver);}}public void WriteTo(JsonWriter writer){WriteTo(writer,new JsonSchemaResolver());}public void WriteTo(JsonWriter writer,JsonSchemaResolver resolver){ValidationUtils.ArgumentNotNull(writer,nameof(writer));ValidationUtils.ArgumentNotNull(resolver,nameof(resolver));JsonSchemaWriter schemaWriter=new JsonSchemaWriter(writer,resolver);schemaWriter.WriteSchema(this);}public override string ToString(){StringWriter writer=new StringWriter(CultureInfo.InvariantCulture);JsonTextWriter jsonWriter=new JsonTextWriter(writer);jsonWriter.Formatting=Formatting.Indented;WriteTo(jsonWriter);return writer.ToString();}}}
namespace Newtonsoft.Json.Schema{[Obsolete("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]internal class JsonSchemaBuilder{private readonly IList<JsonSchema>_stack;private readonly JsonSchemaResolver _resolver;private readonly IDictionary<string,JsonSchema>_documentSchemas;private JsonSchema _currentSchema;private JObject _rootSchema;public JsonSchemaBuilder(JsonSchemaResolver resolver){_stack=new List<JsonSchema>();_documentSchemas=new Dictionary<string,JsonSchema>();_resolver=resolver;}private void Push(JsonSchema value){_currentSchema=value;_stack.Add(value);_resolver.LoadedSchemas.Add(value);_documentSchemas.Add(value.Location,value);}private JsonSchema Pop(){JsonSchema poppedSchema=_currentSchema;_stack.RemoveAt(_stack.Count-1);_currentSchema=_stack.LastOrDefault();return poppedSchema;}private JsonSchema CurrentSchema=>_currentSchema;internal JsonSchema Read(JsonReader reader){JToken schemaToken=JToken.ReadFrom(reader);_rootSchema=schemaToken as JObject;JsonSchema schema=BuildSchema(schemaToken);ResolveReferences(schema);return schema;}private string UnescapeReference(string reference){return Uri.UnescapeDataString(reference).Replace("~1","/").Replace("~0","~");}private JsonSchema ResolveReferences(JsonSchema schema){if(schema.DeferredReference!=null){string reference=schema.DeferredReference;bool locationReference=(reference.StartsWith("#",StringComparison.Ordinal));if(locationReference){reference=UnescapeReference(reference);}JsonSchema resolvedSchema=_resolver.GetSchema(reference);if(resolvedSchema==null){if(locationReference){string[]escapedParts=schema.DeferredReference.TrimStart('#').Split(new[]{'/'},StringSplitOptions.RemoveEmptyEntries);JToken currentToken=_rootSchema;foreach(string escapedPart in escapedParts){string part=UnescapeReference(escapedPart);if(currentToken.Type==JTokenType.Object){currentToken=currentToken[part];}else if(currentToken.Type==JTokenType.Array||currentToken.Type==JTokenType.Constructor){if(int.TryParse(part,out int index)&&index>=0&&index<currentToken.Count()){currentToken=currentToken[index];}else{currentToken=null;}}if(currentToken==null){break;}}if(currentToken!=null){resolvedSchema=BuildSchema(currentToken);}}if(resolvedSchema==null){throw new JsonException("Could not resolve schema reference '{0}'.".FormatWith(CultureInfo.InvariantCulture,schema.DeferredReference));}}schema=resolvedSchema;}if(schema.ReferencesResolved){return schema;}schema.ReferencesResolved=true;if(schema.Extends!=null){for(int i=0;i<schema.Extends.Count;i++){schema.Extends[i]=ResolveReferences(schema.Extends[i]);}}if(schema.Items!=null){for(int i=0;i<schema.Items.Count;i++){schema.Items[i]=ResolveReferences(schema.Items[i]);}}if(schema.AdditionalItems!=null){schema.AdditionalItems=ResolveReferences(schema.AdditionalItems);}if(schema.PatternProperties!=null){foreach(KeyValuePair<string,JsonSchema>patternProperty in schema.PatternProperties.ToList()){schema.PatternProperties[patternProperty.Key]=ResolveReferences(patternProperty.Value);}}if(schema.Properties!=null){foreach(KeyValuePair<string,JsonSchema>property in schema.Properties.ToList()){schema.Properties[property.Key]=ResolveReferences(property.Value);}}if(schema.AdditionalProperties!=null){schema.AdditionalProperties=ResolveReferences(schema.AdditionalProperties);}return schema;}private JsonSchema BuildSchema(JToken token){if(!(token is JObject schemaObject)){throw JsonException.Create(token,token.Path,"Expected object while parsing schema object, got {0}.".FormatWith(CultureInfo.InvariantCulture,token.Type));}if(schemaObject.TryGetValue(JsonTypeReflector.RefPropertyName,out JToken referenceToken)){JsonSchema deferredSchema=new JsonSchema();deferredSchema.DeferredReference=(string)referenceToken;return deferredSchema;}string location=token.Path.Replace(".","/").Replace("[","/").Replace("]",string.Empty);if(!StringUtils.IsNullOrEmpty(location)){location="/"+location;}location="#"+location;if(_documentSchemas.TryGetValue(location,out JsonSchema existingSchema)){return existingSchema;}Push(new JsonSchema{Location=location});ProcessSchemaProperties(schemaObject);return Pop();}private void ProcessSchemaProperties(JObject schemaObject){foreach(KeyValuePair<string,JToken>property in schemaObject){switch(property.Key){case JsonSchemaConstants.TypePropertyName:CurrentSchema.Type=ProcessType(property.Value);break;case JsonSchemaConstants.IdPropertyName:CurrentSchema.Id=(string)property.Value;break;case JsonSchemaConstants.TitlePropertyName:CurrentSchema.Title=(string)property.Value;break;case JsonSchemaConstants.DescriptionPropertyName:CurrentSchema.Description=(string)property.Value;break;case JsonSchemaConstants.PropertiesPropertyName:CurrentSchema.Properties=ProcessProperties(property.Value);break;case JsonSchemaConstants.ItemsPropertyName:ProcessItems(property.Value);break;case JsonSchemaConstants.AdditionalPropertiesPropertyName:ProcessAdditionalProperties(property.Value);break;case JsonSchemaConstants.AdditionalItemsPropertyName:ProcessAdditionalItems(property.Value);break;case JsonSchemaConstants.PatternPropertiesPropertyName:CurrentSchema.PatternProperties=ProcessProperties(property.Value);break;case JsonSchemaConstants.RequiredPropertyName:CurrentSchema.Required=(bool)property.Value;break;case JsonSchemaConstants.RequiresPropertyName:CurrentSchema.Requires=(string)property.Value;break;case JsonSchemaConstants.MinimumPropertyName:CurrentSchema.Minimum=(double)property.Value;break;case JsonSchemaConstants.MaximumPropertyName:CurrentSchema.Maximum=(double)property.Value;break;case JsonSchemaConstants.ExclusiveMinimumPropertyName:CurrentSchema.ExclusiveMinimum=(bool)property.Value;break;case JsonSchemaConstants.ExclusiveMaximumPropertyName:CurrentSchema.ExclusiveMaximum=(bool)property.Value;break;case JsonSchemaConstants.MaximumLengthPropertyName:CurrentSchema.MaximumLength=(int)property.Value;break;case JsonSchemaConstants.MinimumLengthPropertyName:CurrentSchema.MinimumLength=(int)property.Value;break;case JsonSchemaConstants.MaximumItemsPropertyName:CurrentSchema.MaximumItems=(int)property.Value;break;case JsonSchemaConstants.MinimumItemsPropertyName:CurrentSchema.MinimumItems=(int)property.Value;break;case JsonSchemaConstants.DivisibleByPropertyName:CurrentSchema.DivisibleBy=(double)property.Value;break;case JsonSchemaConstants.DisallowPropertyName:CurrentSchema.Disallow=ProcessType(property.Value);break;case JsonSchemaConstants.DefaultPropertyName:CurrentSchema.Default=property.Value.DeepClone();break;case JsonSchemaConstants.HiddenPropertyName:CurrentSchema.Hidden=(bool)property.Value;break;case JsonSchemaConstants.ReadOnlyPropertyName:CurrentSchema.ReadOnly=(bool)property.Value;break;case JsonSchemaConstants.FormatPropertyName:CurrentSchema.Format=(string)property.Value;break;case JsonSchemaConstants.PatternPropertyName:CurrentSchema.Pattern=(string)property.Value;break;case JsonSchemaConstants.EnumPropertyName:ProcessEnum(property.Value);break;case JsonSchemaConstants.ExtendsPropertyName:ProcessExtends(property.Value);break;case JsonSchemaConstants.UniqueItemsPropertyName:CurrentSchema.UniqueItems=(bool)property.Value;break;}}}private void ProcessExtends(JToken token){IList<JsonSchema>schemas=new List<JsonSchema>();if(token.Type==JTokenType.Array){foreach(JToken schemaObject in token){schemas.Add(BuildSchema(schemaObject));}}else{JsonSchema schema=BuildSchema(token);if(schema!=null){schemas.Add(schema);}}if(schemas.Count>0){CurrentSchema.Extends=schemas;}}private void ProcessEnum(JToken token){if(token.Type!=JTokenType.Array){throw JsonException.Create(token,token.Path,"Expected Array token while parsing enum values, got {0}.".FormatWith(CultureInfo.InvariantCulture,token.Type));}CurrentSchema.Enum=new List<JToken>();foreach(JToken enumValue in token){CurrentSchema.Enum.Add(enumValue.DeepClone());}}private void ProcessAdditionalProperties(JToken token){if(token.Type==JTokenType.Boolean){CurrentSchema.AllowAdditionalProperties=(bool)token;}else{CurrentSchema.AdditionalProperties=BuildSchema(token);}}private void ProcessAdditionalItems(JToken token){if(token.Type==JTokenType.Boolean){CurrentSchema.AllowAdditionalItems=(bool)token;}else{CurrentSchema.AdditionalItems=BuildSchema(token);}}private IDictionary<string,JsonSchema>ProcessProperties(JToken token){IDictionary<string,JsonSchema>properties=new Dictionary<string,JsonSchema>();if(token.Type!=JTokenType.Object){throw JsonException.Create(token,token.Path,"Expected Object token while parsing schema properties, got {0}.".FormatWith(CultureInfo.InvariantCulture,token.Type));}foreach(JProperty propertyToken in token){if(properties.ContainsKey(propertyToken.Name)){throw new JsonException("Property {0} has already been defined in schema.".FormatWith(CultureInfo.InvariantCulture,propertyToken.Name));}properties.Add(propertyToken.Name,BuildSchema(propertyToken.Value));}return properties;}private void ProcessItems(JToken token){CurrentSchema.Items=new List<JsonSchema>();switch(token.Type){case JTokenType.Object:CurrentSchema.Items.Add(BuildSchema(token));CurrentSchema.PositionalItemsValidation=false;break;case JTokenType.Array:CurrentSchema.PositionalItemsValidation=true;foreach(JToken schemaToken in token){CurrentSchema.Items.Add(BuildSchema(schemaToken));}break;default:throw JsonException.Create(token,token.Path,"Expected array or JSON schema object, got {0}.".FormatWith(CultureInfo.InvariantCulture,token.Type));}}private JsonSchemaType?ProcessType(JToken token){switch(token.Type){case JTokenType.Array:JsonSchemaType?type=JsonSchemaType.None;foreach(JToken typeToken in token){if(typeToken.Type!=JTokenType.String){throw JsonException.Create(typeToken,typeToken.Path,"Expected JSON schema type string token, got {0}.".FormatWith(CultureInfo.InvariantCulture,token.Type));}type=type|MapType((string)typeToken);}return type;case JTokenType.String:return MapType((string)token);default:throw JsonException.Create(token,token.Path,"Expected array or JSON schema type string token, got {0}.".FormatWith(CultureInfo.InvariantCulture,token.Type));}}internal static JsonSchemaType MapType(string type){if(!JsonSchemaConstants.JsonSchemaTypeMapping.TryGetValue(type,out JsonSchemaType mappedType)){throw new JsonException("Invalid JSON schema type: {0}".FormatWith(CultureInfo.InvariantCulture,type));}return mappedType;}internal static string MapType(JsonSchemaType type){return JsonSchemaConstants.JsonSchemaTypeMapping.Single(kv=>kv.Value==type).Key;}}}
namespace Newtonsoft.Json.Schema{[Obsolete("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]internal static class JsonSchemaConstants{public const string TypePropertyName="type";public const string PropertiesPropertyName="properties";public const string ItemsPropertyName="items";public const string AdditionalItemsPropertyName="additionalItems";public const string RequiredPropertyName="required";public const string PatternPropertiesPropertyName="patternProperties";public const string AdditionalPropertiesPropertyName="additionalProperties";public const string RequiresPropertyName="requires";public const string MinimumPropertyName="minimum";public const string MaximumPropertyName="maximum";public const string ExclusiveMinimumPropertyName="exclusiveMinimum";public const string ExclusiveMaximumPropertyName="exclusiveMaximum";public const string MinimumItemsPropertyName="minItems";public const string MaximumItemsPropertyName="maxItems";public const string PatternPropertyName="pattern";public const string MaximumLengthPropertyName="maxLength";public const string MinimumLengthPropertyName="minLength";public const string EnumPropertyName="enum";public const string ReadOnlyPropertyName="readonly";public const string TitlePropertyName="title";public const string DescriptionPropertyName="description";public const string FormatPropertyName="format";public const string DefaultPropertyName="default";public const string TransientPropertyName="transient";public const string DivisibleByPropertyName="divisibleBy";public const string HiddenPropertyName="hidden";public const string DisallowPropertyName="disallow";public const string ExtendsPropertyName="extends";public const string IdPropertyName="id";public const string UniqueItemsPropertyName="uniqueItems";public const string OptionValuePropertyName="value";public const string OptionLabelPropertyName="label";public static readonly IDictionary<string,JsonSchemaType>JsonSchemaTypeMapping=new Dictionary<string,JsonSchemaType>{{"string",JsonSchemaType.String},{"object",JsonSchemaType.Object},{"integer",JsonSchemaType.Integer},{"number",JsonSchemaType.Float},{"null",JsonSchemaType.Null},{"boolean",JsonSchemaType.Boolean},{"array",JsonSchemaType.Array},{"any",JsonSchemaType.Any}};}}
namespace Newtonsoft.Json.Schema{
#if HAVE_BINARY_EXCEPTION_SERIALIZATION
[Serializable]
#endif
[Obsolete("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]public class JsonSchemaException:JsonException{public int LineNumber{get;}public int LinePosition{get;}public string Path{get;}public JsonSchemaException(){}public JsonSchemaException(string message):base(message){}public JsonSchemaException(string message,Exception innerException):base(message,innerException){}
#if HAVE_BINARY_EXCEPTION_SERIALIZATION
public JsonSchemaException(SerializationInfo info,StreamingContext context):base(info,context){}
#endif
internal JsonSchemaException(string message,Exception innerException,string path,int lineNumber,int linePosition):base(message,innerException){Path=path;LineNumber=lineNumber;LinePosition=linePosition;}}}
#if !HAVE_LINQ
#else
#endif
namespace Newtonsoft.Json.Schema{[Obsolete("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]public class JsonSchemaGenerator{public UndefinedSchemaIdHandling UndefinedSchemaIdHandling{get;set;}private IContractResolver _contractResolver;public IContractResolver ContractResolver{get{if(_contractResolver==null){return DefaultContractResolver.Instance;}return _contractResolver;}set=>_contractResolver=value;}private class TypeSchema{public Type Type{get;}public JsonSchema Schema{get;}public TypeSchema(Type type,JsonSchema schema){ValidationUtils.ArgumentNotNull(type,nameof(type));ValidationUtils.ArgumentNotNull(schema,nameof(schema));Type=type;Schema=schema;}}private JsonSchemaResolver _resolver;private readonly IList<TypeSchema>_stack=new List<TypeSchema>();private JsonSchema _currentSchema;private JsonSchema CurrentSchema=>_currentSchema;private void Push(TypeSchema typeSchema){_currentSchema=typeSchema.Schema;_stack.Add(typeSchema);_resolver.LoadedSchemas.Add(typeSchema.Schema);}private TypeSchema Pop(){TypeSchema popped=_stack[_stack.Count-1];_stack.RemoveAt(_stack.Count-1);TypeSchema newValue=_stack.LastOrDefault();if(newValue!=null){_currentSchema=newValue.Schema;}else{_currentSchema=null;}return popped;}public JsonSchema Generate(Type type){return Generate(type,new JsonSchemaResolver(),false);}public JsonSchema Generate(Type type,JsonSchemaResolver resolver){return Generate(type,resolver,false);}public JsonSchema Generate(Type type,bool rootSchemaNullable){return Generate(type,new JsonSchemaResolver(),rootSchemaNullable);}public JsonSchema Generate(Type type,JsonSchemaResolver resolver,bool rootSchemaNullable){ValidationUtils.ArgumentNotNull(type,nameof(type));ValidationUtils.ArgumentNotNull(resolver,nameof(resolver));_resolver=resolver;return GenerateInternal(type,(!rootSchemaNullable)?Required.Always:Required.Default,false);}private string GetTitle(Type type){JsonContainerAttribute containerAttribute=JsonTypeReflector.GetCachedAttribute<JsonContainerAttribute>(type);if(!StringUtils.IsNullOrEmpty(containerAttribute?.Title)){return containerAttribute.Title;}return null;}private string GetDescription(Type type){JsonContainerAttribute containerAttribute=JsonTypeReflector.GetCachedAttribute<JsonContainerAttribute>(type);if(!StringUtils.IsNullOrEmpty(containerAttribute?.Description)){return containerAttribute.Description;}
#if HAVE_ADO_NET
DescriptionAttribute descriptionAttribute=ReflectionUtils.GetAttribute<DescriptionAttribute>(type);return descriptionAttribute?.Description;
#else
return null;
#endif
}private string GetTypeId(Type type,bool explicitOnly){JsonContainerAttribute containerAttribute=JsonTypeReflector.GetCachedAttribute<JsonContainerAttribute>(type);if(!StringUtils.IsNullOrEmpty(containerAttribute?.Id)){return containerAttribute.Id;}if(explicitOnly){return null;}switch(UndefinedSchemaIdHandling){case UndefinedSchemaIdHandling.UseTypeName:return type.FullName;case UndefinedSchemaIdHandling.UseAssemblyQualifiedName:return type.AssemblyQualifiedName;default:return null;}}private JsonSchema GenerateInternal(Type type,Required valueRequired,bool required){ValidationUtils.ArgumentNotNull(type,nameof(type));string resolvedId=GetTypeId(type,false);string explicitId=GetTypeId(type,true);if(!StringUtils.IsNullOrEmpty(resolvedId)){JsonSchema resolvedSchema=_resolver.GetSchema(resolvedId);if(resolvedSchema!=null){if(valueRequired!=Required.Always&&!HasFlag(resolvedSchema.Type,JsonSchemaType.Null)){resolvedSchema.Type|=JsonSchemaType.Null;}if(required&&resolvedSchema.Required!=true){resolvedSchema.Required=true;}return resolvedSchema;}}if(_stack.Any(tc=>tc.Type==type)){throw new JsonException("Unresolved circular reference for type '{0}'. Explicitly define an Id for the type using a JsonObject/JsonArray attribute or automatically generate a type Id using the UndefinedSchemaIdHandling property.".FormatWith(CultureInfo.InvariantCulture,type));}JsonContract contract=ContractResolver.ResolveContract(type);JsonConverter converter=contract.Converter??contract.InternalConverter;Push(new TypeSchema(type,new JsonSchema()));if(explicitId!=null){CurrentSchema.Id=explicitId;}if(required){CurrentSchema.Required=true;}CurrentSchema.Title=GetTitle(type);CurrentSchema.Description=GetDescription(type);if(converter!=null){CurrentSchema.Type=JsonSchemaType.Any;}else{switch(contract.ContractType){case JsonContractType.Object:CurrentSchema.Type=AddNullType(JsonSchemaType.Object,valueRequired);CurrentSchema.Id=GetTypeId(type,false);GenerateObjectSchema(type,(JsonObjectContract)contract);break;case JsonContractType.Array:CurrentSchema.Type=AddNullType(JsonSchemaType.Array,valueRequired);CurrentSchema.Id=GetTypeId(type,false);JsonArrayAttribute arrayAttribute=JsonTypeReflector.GetCachedAttribute<JsonArrayAttribute>(type);bool allowNullItem=(arrayAttribute==null||arrayAttribute.AllowNullItems);Type collectionItemType=ReflectionUtils.GetCollectionItemType(type);if(collectionItemType!=null){CurrentSchema.Items=new List<JsonSchema>();CurrentSchema.Items.Add(GenerateInternal(collectionItemType,(!allowNullItem)?Required.Always:Required.Default,false));}break;case JsonContractType.Primitive:CurrentSchema.Type=GetJsonSchemaType(type,valueRequired);if(CurrentSchema.Type==JsonSchemaType.Integer&&type.IsEnum()&&!type.IsDefined(typeof(FlagsAttribute),true)){CurrentSchema.Enum=new List<JToken>();EnumInfo enumValues=EnumUtils.GetEnumValuesAndNames(type);for(int i=0;i<enumValues.Names.Length;i++){ulong v=enumValues.Values[i];JToken value=JToken.FromObject(Enum.ToObject(type,v));CurrentSchema.Enum.Add(value);}}break;case JsonContractType.String:JsonSchemaType schemaType=(!ReflectionUtils.IsNullable(contract.UnderlyingType))?JsonSchemaType.String:AddNullType(JsonSchemaType.String,valueRequired);CurrentSchema.Type=schemaType;break;case JsonContractType.Dictionary:CurrentSchema.Type=AddNullType(JsonSchemaType.Object,valueRequired);Type keyType;Type valueType;ReflectionUtils.GetDictionaryKeyValueTypes(type,out keyType,out valueType);if(keyType!=null){JsonContract keyContract=ContractResolver.ResolveContract(keyType);if(keyContract.ContractType==JsonContractType.Primitive){CurrentSchema.AdditionalProperties=GenerateInternal(valueType,Required.Default,false);}}break;
#if HAVE_BINARY_SERIALIZATION
case JsonContractType.Serializable:CurrentSchema.Type=AddNullType(JsonSchemaType.Object,valueRequired);CurrentSchema.Id=GetTypeId(type,false);GenerateISerializableContract(type,(JsonISerializableContract)contract);break;
#endif
#if HAVE_DYNAMIC
case JsonContractType.Dynamic:
#endif
case JsonContractType.Linq:CurrentSchema.Type=JsonSchemaType.Any;break;default:throw new JsonException("Unexpected contract type: {0}".FormatWith(CultureInfo.InvariantCulture,contract));}}return Pop().Schema;}private JsonSchemaType AddNullType(JsonSchemaType type,Required valueRequired){if(valueRequired!=Required.Always){return type|JsonSchemaType.Null;}return type;}private bool HasFlag(DefaultValueHandling value,DefaultValueHandling flag){return((value&flag)==flag);}private void GenerateObjectSchema(Type type,JsonObjectContract contract){CurrentSchema.Properties=new Dictionary<string,JsonSchema>();foreach(JsonProperty property in contract.Properties){if(!property.Ignored){bool optional=property.NullValueHandling==NullValueHandling.Ignore||HasFlag(property.DefaultValueHandling.GetValueOrDefault(),DefaultValueHandling.Ignore)||property.ShouldSerialize!=null||property.GetIsSpecified!=null;JsonSchema propertySchema=GenerateInternal(property.PropertyType,property.Required,!optional);if(property.DefaultValue!=null){propertySchema.Default=JToken.FromObject(property.DefaultValue);}CurrentSchema.Properties.Add(property.PropertyName,propertySchema);}}if(type.IsSealed()){CurrentSchema.AllowAdditionalProperties=false;}}
#if HAVE_BINARY_SERIALIZATION
private void GenerateISerializableContract(Type type,JsonISerializableContract contract){CurrentSchema.AllowAdditionalProperties=true;}
#endif
internal static bool HasFlag(JsonSchemaType?value,JsonSchemaType flag){if(value==null){return true;}bool match=((value&flag)==flag);if(match){return true;}if(flag==JsonSchemaType.Integer&&(value&JsonSchemaType.Float)==JsonSchemaType.Float){return true;}return false;}private JsonSchemaType GetJsonSchemaType(Type type,Required valueRequired){JsonSchemaType schemaType=JsonSchemaType.None;if(valueRequired!=Required.Always&&ReflectionUtils.IsNullable(type)){schemaType=JsonSchemaType.Null;if(ReflectionUtils.IsNullableType(type)){type=Nullable.GetUnderlyingType(type);}}PrimitiveTypeCode typeCode=ConvertUtils.GetTypeCode(type);switch(typeCode){case PrimitiveTypeCode.Empty:case PrimitiveTypeCode.Object:return schemaType|JsonSchemaType.String;
#if HAVE_DB_NULL_TYPE_CODE
case PrimitiveTypeCode.DBNull:return schemaType|JsonSchemaType.Null;
#endif
case PrimitiveTypeCode.Boolean:return schemaType|JsonSchemaType.Boolean;case PrimitiveTypeCode.Char:return schemaType|JsonSchemaType.String;case PrimitiveTypeCode.SByte:case PrimitiveTypeCode.Byte:case PrimitiveTypeCode.Int16:case PrimitiveTypeCode.UInt16:case PrimitiveTypeCode.Int32:case PrimitiveTypeCode.UInt32:case PrimitiveTypeCode.Int64:case PrimitiveTypeCode.UInt64:
#if HAVE_BIG_INTEGER
case PrimitiveTypeCode.BigInteger:
#endif
return schemaType|JsonSchemaType.Integer;case PrimitiveTypeCode.Single:case PrimitiveTypeCode.Double:case PrimitiveTypeCode.Decimal:return schemaType|JsonSchemaType.Float;case PrimitiveTypeCode.DateTime:
#if HAVE_DATE_TIME_OFFSET
case PrimitiveTypeCode.DateTimeOffset:
#endif
return schemaType|JsonSchemaType.String;case PrimitiveTypeCode.String:case PrimitiveTypeCode.Uri:case PrimitiveTypeCode.Guid:case PrimitiveTypeCode.TimeSpan:case PrimitiveTypeCode.Bytes:return schemaType|JsonSchemaType.String;default:throw new JsonException("Unexpected type code '{0}' for type '{1}'.".FormatWith(CultureInfo.InvariantCulture,typeCode,type));}}}}
namespace Newtonsoft.Json.Schema{[Obsolete("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]internal class JsonSchemaModel{public bool Required{get;set;}public JsonSchemaType Type{get;set;}public int?MinimumLength{get;set;}public int?MaximumLength{get;set;}public double?DivisibleBy{get;set;}public double?Minimum{get;set;}public double?Maximum{get;set;}public bool ExclusiveMinimum{get;set;}public bool ExclusiveMaximum{get;set;}public int?MinimumItems{get;set;}public int?MaximumItems{get;set;}public IList<string>Patterns{get;set;}public IList<JsonSchemaModel>Items{get;set;}public IDictionary<string,JsonSchemaModel>Properties{get;set;}public IDictionary<string,JsonSchemaModel>PatternProperties{get;set;}public JsonSchemaModel AdditionalProperties{get;set;}public JsonSchemaModel AdditionalItems{get;set;}public bool PositionalItemsValidation{get;set;}public bool AllowAdditionalProperties{get;set;}public bool AllowAdditionalItems{get;set;}public bool UniqueItems{get;set;}public IList<JToken>Enum{get;set;}public JsonSchemaType Disallow{get;set;}public JsonSchemaModel(){Type=JsonSchemaType.Any;AllowAdditionalProperties=true;AllowAdditionalItems=true;Required=false;}public static JsonSchemaModel Create(IList<JsonSchema>schemata){JsonSchemaModel model=new JsonSchemaModel();foreach(JsonSchema schema in schemata){Combine(model,schema);}return model;}private static void Combine(JsonSchemaModel model,JsonSchema schema){model.Required=model.Required||(schema.Required??false);model.Type=model.Type&(schema.Type??JsonSchemaType.Any);model.MinimumLength=MathUtils.Max(model.MinimumLength,schema.MinimumLength);model.MaximumLength=MathUtils.Min(model.MaximumLength,schema.MaximumLength);model.DivisibleBy=MathUtils.Max(model.DivisibleBy,schema.DivisibleBy);model.Minimum=MathUtils.Max(model.Minimum,schema.Minimum);model.Maximum=MathUtils.Max(model.Maximum,schema.Maximum);model.ExclusiveMinimum=model.ExclusiveMinimum||(schema.ExclusiveMinimum??false);model.ExclusiveMaximum=model.ExclusiveMaximum||(schema.ExclusiveMaximum??false);model.MinimumItems=MathUtils.Max(model.MinimumItems,schema.MinimumItems);model.MaximumItems=MathUtils.Min(model.MaximumItems,schema.MaximumItems);model.PositionalItemsValidation=model.PositionalItemsValidation||schema.PositionalItemsValidation;model.AllowAdditionalProperties=model.AllowAdditionalProperties&&schema.AllowAdditionalProperties;model.AllowAdditionalItems=model.AllowAdditionalItems&&schema.AllowAdditionalItems;model.UniqueItems=model.UniqueItems||schema.UniqueItems;if(schema.Enum!=null){if(model.Enum==null){model.Enum=new List<JToken>();}model.Enum.AddRangeDistinct(schema.Enum,JToken.EqualityComparer);}model.Disallow=model.Disallow|(schema.Disallow??JsonSchemaType.None);if(schema.Pattern!=null){if(model.Patterns==null){model.Patterns=new List<string>();}model.Patterns.AddDistinct(schema.Pattern);}}}}
namespace Newtonsoft.Json.Schema{[Obsolete("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]internal class JsonSchemaModelBuilder{private JsonSchemaNodeCollection _nodes=new JsonSchemaNodeCollection();private Dictionary<JsonSchemaNode,JsonSchemaModel>_nodeModels=new Dictionary<JsonSchemaNode,JsonSchemaModel>();private JsonSchemaNode _node;public JsonSchemaModel Build(JsonSchema schema){_nodes=new JsonSchemaNodeCollection();_node=AddSchema(null,schema);_nodeModels=new Dictionary<JsonSchemaNode,JsonSchemaModel>();JsonSchemaModel model=BuildNodeModel(_node);return model;}public JsonSchemaNode AddSchema(JsonSchemaNode existingNode,JsonSchema schema){string newId;if(existingNode!=null){if(existingNode.Schemas.Contains(schema)){return existingNode;}newId=JsonSchemaNode.GetId(existingNode.Schemas.Union(new[]{schema}));}else{newId=JsonSchemaNode.GetId(new[]{schema});}if(_nodes.Contains(newId)){return _nodes[newId];}JsonSchemaNode currentNode=(existingNode!=null)?existingNode.Combine(schema):new JsonSchemaNode(schema);_nodes.Add(currentNode);AddProperties(schema.Properties,currentNode.Properties);AddProperties(schema.PatternProperties,currentNode.PatternProperties);if(schema.Items!=null){for(int i=0;i<schema.Items.Count;i++){AddItem(currentNode,i,schema.Items[i]);}}if(schema.AdditionalItems!=null){AddAdditionalItems(currentNode,schema.AdditionalItems);}if(schema.AdditionalProperties!=null){AddAdditionalProperties(currentNode,schema.AdditionalProperties);}if(schema.Extends!=null){foreach(JsonSchema jsonSchema in schema.Extends){currentNode=AddSchema(currentNode,jsonSchema);}}return currentNode;}public void AddProperties(IDictionary<string,JsonSchema>source,IDictionary<string,JsonSchemaNode>target){if(source!=null){foreach(KeyValuePair<string,JsonSchema>property in source){AddProperty(target,property.Key,property.Value);}}}public void AddProperty(IDictionary<string,JsonSchemaNode>target,string propertyName,JsonSchema schema){target.TryGetValue(propertyName,out JsonSchemaNode propertyNode);target[propertyName]=AddSchema(propertyNode,schema);}public void AddItem(JsonSchemaNode parentNode,int index,JsonSchema schema){JsonSchemaNode existingItemNode=(parentNode.Items.Count>index)?parentNode.Items[index]:null;JsonSchemaNode newItemNode=AddSchema(existingItemNode,schema);if(!(parentNode.Items.Count>index)){parentNode.Items.Add(newItemNode);}else{parentNode.Items[index]=newItemNode;}}public void AddAdditionalProperties(JsonSchemaNode parentNode,JsonSchema schema){parentNode.AdditionalProperties=AddSchema(parentNode.AdditionalProperties,schema);}public void AddAdditionalItems(JsonSchemaNode parentNode,JsonSchema schema){parentNode.AdditionalItems=AddSchema(parentNode.AdditionalItems,schema);}private JsonSchemaModel BuildNodeModel(JsonSchemaNode node){if(_nodeModels.TryGetValue(node,out JsonSchemaModel model)){return model;}model=JsonSchemaModel.Create(node.Schemas);_nodeModels[node]=model;foreach(KeyValuePair<string,JsonSchemaNode>property in node.Properties){if(model.Properties==null){model.Properties=new Dictionary<string,JsonSchemaModel>();}model.Properties[property.Key]=BuildNodeModel(property.Value);}foreach(KeyValuePair<string,JsonSchemaNode>property in node.PatternProperties){if(model.PatternProperties==null){model.PatternProperties=new Dictionary<string,JsonSchemaModel>();}model.PatternProperties[property.Key]=BuildNodeModel(property.Value);}foreach(JsonSchemaNode t in node.Items){if(model.Items==null){model.Items=new List<JsonSchemaModel>();}model.Items.Add(BuildNodeModel(t));}if(node.AdditionalProperties!=null){model.AdditionalProperties=BuildNodeModel(node.AdditionalProperties);}if(node.AdditionalItems!=null){model.AdditionalItems=BuildNodeModel(node.AdditionalItems);}return model;}}}
namespace Newtonsoft.Json.Schema{[Obsolete("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]internal class JsonSchemaNode{public string Id{get;}public ReadOnlyCollection<JsonSchema>Schemas{get;}public Dictionary<string,JsonSchemaNode>Properties{get;}public Dictionary<string,JsonSchemaNode>PatternProperties{get;}public List<JsonSchemaNode>Items{get;}public JsonSchemaNode AdditionalProperties{get;set;}public JsonSchemaNode AdditionalItems{get;set;}public JsonSchemaNode(JsonSchema schema){Schemas=new ReadOnlyCollection<JsonSchema>(new[]{schema});Properties=new Dictionary<string,JsonSchemaNode>();PatternProperties=new Dictionary<string,JsonSchemaNode>();Items=new List<JsonSchemaNode>();Id=GetId(Schemas);}private JsonSchemaNode(JsonSchemaNode source,JsonSchema schema){Schemas=new ReadOnlyCollection<JsonSchema>(source.Schemas.Union(new[]{schema}).ToList());Properties=new Dictionary<string,JsonSchemaNode>(source.Properties);PatternProperties=new Dictionary<string,JsonSchemaNode>(source.PatternProperties);Items=new List<JsonSchemaNode>(source.Items);AdditionalProperties=source.AdditionalProperties;AdditionalItems=source.AdditionalItems;Id=GetId(Schemas);}public JsonSchemaNode Combine(JsonSchema schema){return new JsonSchemaNode(this,schema);}public static string GetId(IEnumerable<JsonSchema>schemata){return string.Join("-",schemata.Select(s=>s.InternalId).OrderBy(id=>id,StringComparer.Ordinal)
#if !HAVE_STRING_JOIN_WITH_ENUMERABLE
.ToArray()
#endif
);}}}
namespace Newtonsoft.Json.Schema{[Obsolete("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]internal class JsonSchemaNodeCollection:KeyedCollection<string,JsonSchemaNode>{protected override string GetKeyForItem(JsonSchemaNode item){return item.Id;}}}
namespace Newtonsoft.Json.Schema{[Obsolete("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]public class JsonSchemaResolver{public IList<JsonSchema>LoadedSchemas{get;protected set;}public JsonSchemaResolver(){LoadedSchemas=new List<JsonSchema>();}public virtual JsonSchema GetSchema(string reference){JsonSchema schema=LoadedSchemas.SingleOrDefault(s=>string.Equals(s.Id,reference,StringComparison.Ordinal));if(schema==null){schema=LoadedSchemas.SingleOrDefault(s=>string.Equals(s.Location,reference,StringComparison.Ordinal));}return schema;}}}
namespace Newtonsoft.Json.Schema{[Flags][Obsolete("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]public enum JsonSchemaType{None=0,String=1,Float=2,Integer=4,Boolean=8,Object=16,Array=32,Null=64,Any=String|Float|Integer|Boolean|Object|Array|Null}}
namespace Newtonsoft.Json.Schema{[Obsolete("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]internal class JsonSchemaWriter{private readonly JsonWriter _writer;private readonly JsonSchemaResolver _resolver;public JsonSchemaWriter(JsonWriter writer,JsonSchemaResolver resolver){ValidationUtils.ArgumentNotNull(writer,nameof(writer));_writer=writer;_resolver=resolver;}private void ReferenceOrWriteSchema(JsonSchema schema){if(schema.Id!=null&&_resolver.GetSchema(schema.Id)!=null){_writer.WriteStartObject();_writer.WritePropertyName(JsonTypeReflector.RefPropertyName);_writer.WriteValue(schema.Id);_writer.WriteEndObject();}else{WriteSchema(schema);}}public void WriteSchema(JsonSchema schema){ValidationUtils.ArgumentNotNull(schema,nameof(schema));if(!_resolver.LoadedSchemas.Contains(schema)){_resolver.LoadedSchemas.Add(schema);}_writer.WriteStartObject();WritePropertyIfNotNull(_writer,JsonSchemaConstants.IdPropertyName,schema.Id);WritePropertyIfNotNull(_writer,JsonSchemaConstants.TitlePropertyName,schema.Title);WritePropertyIfNotNull(_writer,JsonSchemaConstants.DescriptionPropertyName,schema.Description);WritePropertyIfNotNull(_writer,JsonSchemaConstants.RequiredPropertyName,schema.Required);WritePropertyIfNotNull(_writer,JsonSchemaConstants.ReadOnlyPropertyName,schema.ReadOnly);WritePropertyIfNotNull(_writer,JsonSchemaConstants.HiddenPropertyName,schema.Hidden);WritePropertyIfNotNull(_writer,JsonSchemaConstants.TransientPropertyName,schema.Transient);if(schema.Type!=null){WriteType(JsonSchemaConstants.TypePropertyName,_writer,schema.Type.GetValueOrDefault());}if(!schema.AllowAdditionalProperties){_writer.WritePropertyName(JsonSchemaConstants.AdditionalPropertiesPropertyName);_writer.WriteValue(schema.AllowAdditionalProperties);}else{if(schema.AdditionalProperties!=null){_writer.WritePropertyName(JsonSchemaConstants.AdditionalPropertiesPropertyName);ReferenceOrWriteSchema(schema.AdditionalProperties);}}if(!schema.AllowAdditionalItems){_writer.WritePropertyName(JsonSchemaConstants.AdditionalItemsPropertyName);_writer.WriteValue(schema.AllowAdditionalItems);}else{if(schema.AdditionalItems!=null){_writer.WritePropertyName(JsonSchemaConstants.AdditionalItemsPropertyName);ReferenceOrWriteSchema(schema.AdditionalItems);}}WriteSchemaDictionaryIfNotNull(_writer,JsonSchemaConstants.PropertiesPropertyName,schema.Properties);WriteSchemaDictionaryIfNotNull(_writer,JsonSchemaConstants.PatternPropertiesPropertyName,schema.PatternProperties);WriteItems(schema);WritePropertyIfNotNull(_writer,JsonSchemaConstants.MinimumPropertyName,schema.Minimum);WritePropertyIfNotNull(_writer,JsonSchemaConstants.MaximumPropertyName,schema.Maximum);WritePropertyIfNotNull(_writer,JsonSchemaConstants.ExclusiveMinimumPropertyName,schema.ExclusiveMinimum);WritePropertyIfNotNull(_writer,JsonSchemaConstants.ExclusiveMaximumPropertyName,schema.ExclusiveMaximum);WritePropertyIfNotNull(_writer,JsonSchemaConstants.MinimumLengthPropertyName,schema.MinimumLength);WritePropertyIfNotNull(_writer,JsonSchemaConstants.MaximumLengthPropertyName,schema.MaximumLength);WritePropertyIfNotNull(_writer,JsonSchemaConstants.MinimumItemsPropertyName,schema.MinimumItems);WritePropertyIfNotNull(_writer,JsonSchemaConstants.MaximumItemsPropertyName,schema.MaximumItems);WritePropertyIfNotNull(_writer,JsonSchemaConstants.DivisibleByPropertyName,schema.DivisibleBy);WritePropertyIfNotNull(_writer,JsonSchemaConstants.FormatPropertyName,schema.Format);WritePropertyIfNotNull(_writer,JsonSchemaConstants.PatternPropertyName,schema.Pattern);if(schema.Enum!=null){_writer.WritePropertyName(JsonSchemaConstants.EnumPropertyName);_writer.WriteStartArray();foreach(JToken token in schema.Enum){token.WriteTo(_writer);}_writer.WriteEndArray();}if(schema.Default!=null){_writer.WritePropertyName(JsonSchemaConstants.DefaultPropertyName);schema.Default.WriteTo(_writer);}if(schema.Disallow!=null){WriteType(JsonSchemaConstants.DisallowPropertyName,_writer,schema.Disallow.GetValueOrDefault());}if(schema.Extends!=null&&schema.Extends.Count>0){_writer.WritePropertyName(JsonSchemaConstants.ExtendsPropertyName);if(schema.Extends.Count==1){ReferenceOrWriteSchema(schema.Extends[0]);}else{_writer.WriteStartArray();foreach(JsonSchema jsonSchema in schema.Extends){ReferenceOrWriteSchema(jsonSchema);}_writer.WriteEndArray();}}_writer.WriteEndObject();}private void WriteSchemaDictionaryIfNotNull(JsonWriter writer,string propertyName,IDictionary<string,JsonSchema>properties){if(properties!=null){writer.WritePropertyName(propertyName);writer.WriteStartObject();foreach(KeyValuePair<string,JsonSchema>property in properties){writer.WritePropertyName(property.Key);ReferenceOrWriteSchema(property.Value);}writer.WriteEndObject();}}private void WriteItems(JsonSchema schema){if(schema.Items==null&&!schema.PositionalItemsValidation){return;}_writer.WritePropertyName(JsonSchemaConstants.ItemsPropertyName);if(!schema.PositionalItemsValidation){if(schema.Items!=null&&schema.Items.Count>0){ReferenceOrWriteSchema(schema.Items[0]);}else{_writer.WriteStartObject();_writer.WriteEndObject();}return;}_writer.WriteStartArray();if(schema.Items!=null){foreach(JsonSchema itemSchema in schema.Items){ReferenceOrWriteSchema(itemSchema);}}_writer.WriteEndArray();}private void WriteType(string propertyName,JsonWriter writer,JsonSchemaType type){if(Enum.IsDefined(typeof(JsonSchemaType),type)){writer.WritePropertyName(propertyName);writer.WriteValue(JsonSchemaBuilder.MapType(type));}else{IEnumerator<JsonSchemaType>en=EnumUtils.GetFlagsValues(type).Where(v=>v!=JsonSchemaType.None).GetEnumerator();if(en.MoveNext()){writer.WritePropertyName(propertyName);JsonSchemaType first=en.Current;if(en.MoveNext()){writer.WriteStartArray();writer.WriteValue(JsonSchemaBuilder.MapType(first));do{writer.WriteValue(JsonSchemaBuilder.MapType(en.Current));}while(en.MoveNext());writer.WriteEndArray();}else{writer.WriteValue(JsonSchemaBuilder.MapType(first));}}}}private void WritePropertyIfNotNull(JsonWriter writer,string propertyName,object value){if(value!=null){writer.WritePropertyName(propertyName);writer.WriteValue(value);}}}}namespace Newtonsoft.Json.Linq{public class JsonSelectSettings{
#if HAVE_REGEX_TIMEOUTS
public TimeSpan?RegexMatchTimeout{get;set;}
#endif
public bool ErrorWhenNoMatch{get;set;}}}namespace Newtonsoft.Json{
#if HAVE_BINARY_EXCEPTION_SERIALIZATION
[Serializable]
#endif
public class JsonSerializationException:JsonException{public int LineNumber{get;}public int LinePosition{get;}public string?Path{get;}public JsonSerializationException(){}public JsonSerializationException(string message):base(message){}public JsonSerializationException(string message,Exception innerException):base(message,innerException){}
#if HAVE_BINARY_EXCEPTION_SERIALIZATION
public JsonSerializationException(SerializationInfo info,StreamingContext context):base(info,context){}
#endif
public JsonSerializationException(string message,string path,int lineNumber,int linePosition,Exception?innerException):base(message,innerException){Path=path;LineNumber=lineNumber;LinePosition=linePosition;}internal static JsonSerializationException Create(JsonReader reader,string message){return Create(reader,message,null);}internal static JsonSerializationException Create(JsonReader reader,string message,Exception?ex){return Create(reader as IJsonLineInfo,reader.Path,message,ex);}internal static JsonSerializationException Create(IJsonLineInfo?lineInfo,string path,string message,Exception?ex){message=JsonPosition.FormatMessage(lineInfo,path,message);int lineNumber;int linePosition;if(lineInfo!=null&&lineInfo.HasLineInfo()){lineNumber=lineInfo.LineNumber;linePosition=lineInfo.LinePosition;}else{lineNumber=0;linePosition=0;}return new JsonSerializationException(message,path,lineNumber,linePosition,ex);}}}namespace Newtonsoft.Json{public class JsonSerializer{internal TypeNameHandling _typeNameHandling;internal TypeNameAssemblyFormatHandling _typeNameAssemblyFormatHandling;internal PreserveReferencesHandling _preserveReferencesHandling;internal ReferenceLoopHandling _referenceLoopHandling;internal MissingMemberHandling _missingMemberHandling;internal ObjectCreationHandling _objectCreationHandling;internal NullValueHandling _nullValueHandling;internal DefaultValueHandling _defaultValueHandling;internal ConstructorHandling _constructorHandling;internal MetadataPropertyHandling _metadataPropertyHandling;internal JsonConverterCollection?_converters;internal IContractResolver _contractResolver;internal ITraceWriter?_traceWriter;internal IEqualityComparer?_equalityComparer;internal ISerializationBinder _serializationBinder;internal StreamingContext _context;private IReferenceResolver?_referenceResolver;private Formatting?_formatting;private DateFormatHandling?_dateFormatHandling;private DateTimeZoneHandling?_dateTimeZoneHandling;private DateParseHandling?_dateParseHandling;private FloatFormatHandling?_floatFormatHandling;private FloatParseHandling?_floatParseHandling;private StringEscapeHandling?_stringEscapeHandling;private CultureInfo _culture;private int?_maxDepth;private bool _maxDepthSet;private bool?_checkAdditionalContent;private string?_dateFormatString;private bool _dateFormatStringSet;public virtual event EventHandler<ErrorEventArgs>?Error;public virtual IReferenceResolver?ReferenceResolver{get=>GetReferenceResolver();set{if(value==null){throw new ArgumentNullException(nameof(value),"Reference resolver cannot be null.");}_referenceResolver=value;}}[Obsolete("Binder is obsolete. Use SerializationBinder instead.")]public virtual SerializationBinder Binder{get{if(_serializationBinder is SerializationBinder legacySerializationBinder){return legacySerializationBinder;}if(_serializationBinder is SerializationBinderAdapter adapter){return adapter.SerializationBinder;}throw new InvalidOperationException("Cannot get SerializationBinder because an ISerializationBinder was previously set.");}set{if(value==null){throw new ArgumentNullException(nameof(value),"Serialization binder cannot be null.");}_serializationBinder=value as ISerializationBinder??new SerializationBinderAdapter(value);}}public virtual ISerializationBinder SerializationBinder{get=>_serializationBinder;set{if(value==null){throw new ArgumentNullException(nameof(value),"Serialization binder cannot be null.");}_serializationBinder=value;}}public virtual ITraceWriter?TraceWriter{get=>_traceWriter;set=>_traceWriter=value;}public virtual IEqualityComparer?EqualityComparer{get=>_equalityComparer;set=>_equalityComparer=value;}public virtual TypeNameHandling TypeNameHandling{get=>_typeNameHandling;set{if(value<TypeNameHandling.None||value>TypeNameHandling.Auto){throw new ArgumentOutOfRangeException(nameof(value));}_typeNameHandling=value;}}[Obsolete("TypeNameAssemblyFormat is obsolete. Use TypeNameAssemblyFormatHandling instead.")]public virtual FormatterAssemblyStyle TypeNameAssemblyFormat{get=>(FormatterAssemblyStyle)_typeNameAssemblyFormatHandling;set{if(value<FormatterAssemblyStyle.Simple||value>FormatterAssemblyStyle.Full){throw new ArgumentOutOfRangeException(nameof(value));}_typeNameAssemblyFormatHandling=(TypeNameAssemblyFormatHandling)value;}}public virtual TypeNameAssemblyFormatHandling TypeNameAssemblyFormatHandling{get=>_typeNameAssemblyFormatHandling;set{if(value<TypeNameAssemblyFormatHandling.Simple||value>TypeNameAssemblyFormatHandling.Full){throw new ArgumentOutOfRangeException(nameof(value));}_typeNameAssemblyFormatHandling=value;}}public virtual PreserveReferencesHandling PreserveReferencesHandling{get=>_preserveReferencesHandling;set{if(value<PreserveReferencesHandling.None||value>PreserveReferencesHandling.All){throw new ArgumentOutOfRangeException(nameof(value));}_preserveReferencesHandling=value;}}public virtual ReferenceLoopHandling ReferenceLoopHandling{get=>_referenceLoopHandling;set{if(value<ReferenceLoopHandling.Error||value>ReferenceLoopHandling.Serialize){throw new ArgumentOutOfRangeException(nameof(value));}_referenceLoopHandling=value;}}public virtual MissingMemberHandling MissingMemberHandling{get=>_missingMemberHandling;set{if(value<MissingMemberHandling.Ignore||value>MissingMemberHandling.Error){throw new ArgumentOutOfRangeException(nameof(value));}_missingMemberHandling=value;}}public virtual NullValueHandling NullValueHandling{get=>_nullValueHandling;set{if(value<NullValueHandling.Include||value>NullValueHandling.Ignore){throw new ArgumentOutOfRangeException(nameof(value));}_nullValueHandling=value;}}public virtual DefaultValueHandling DefaultValueHandling{get=>_defaultValueHandling;set{if(value<DefaultValueHandling.Include||value>DefaultValueHandling.IgnoreAndPopulate){throw new ArgumentOutOfRangeException(nameof(value));}_defaultValueHandling=value;}}public virtual ObjectCreationHandling ObjectCreationHandling{get=>_objectCreationHandling;set{if(value<ObjectCreationHandling.Auto||value>ObjectCreationHandling.Replace){throw new ArgumentOutOfRangeException(nameof(value));}_objectCreationHandling=value;}}public virtual ConstructorHandling ConstructorHandling{get=>_constructorHandling;set{if(value<ConstructorHandling.Default||value>ConstructorHandling.AllowNonPublicDefaultConstructor){throw new ArgumentOutOfRangeException(nameof(value));}_constructorHandling=value;}}public virtual MetadataPropertyHandling MetadataPropertyHandling{get=>_metadataPropertyHandling;set{if(value<MetadataPropertyHandling.Default||value>MetadataPropertyHandling.Ignore){throw new ArgumentOutOfRangeException(nameof(value));}_metadataPropertyHandling=value;}}public virtual JsonConverterCollection Converters{get{if(_converters==null){_converters=new JsonConverterCollection();}return _converters;}}public virtual IContractResolver ContractResolver{get=>_contractResolver;set=>_contractResolver=value??DefaultContractResolver.Instance;}public virtual StreamingContext Context{get=>_context;set=>_context=value;}public virtual Formatting Formatting{get=>_formatting??JsonSerializerSettings.DefaultFormatting;set=>_formatting=value;}public virtual DateFormatHandling DateFormatHandling{get=>_dateFormatHandling??JsonSerializerSettings.DefaultDateFormatHandling;set=>_dateFormatHandling=value;}public virtual DateTimeZoneHandling DateTimeZoneHandling{get=>_dateTimeZoneHandling??JsonSerializerSettings.DefaultDateTimeZoneHandling;set=>_dateTimeZoneHandling=value;}public virtual DateParseHandling DateParseHandling{get=>_dateParseHandling??JsonSerializerSettings.DefaultDateParseHandling;set=>_dateParseHandling=value;}public virtual FloatParseHandling FloatParseHandling{get=>_floatParseHandling??JsonSerializerSettings.DefaultFloatParseHandling;set=>_floatParseHandling=value;}public virtual FloatFormatHandling FloatFormatHandling{get=>_floatFormatHandling??JsonSerializerSettings.DefaultFloatFormatHandling;set=>_floatFormatHandling=value;}public virtual StringEscapeHandling StringEscapeHandling{get=>_stringEscapeHandling??JsonSerializerSettings.DefaultStringEscapeHandling;set=>_stringEscapeHandling=value;}public virtual string DateFormatString{get=>_dateFormatString??JsonSerializerSettings.DefaultDateFormatString;set{_dateFormatString=value;_dateFormatStringSet=true;}}public virtual CultureInfo Culture{get=>_culture??JsonSerializerSettings.DefaultCulture;set=>_culture=value;}public virtual int?MaxDepth{get=>_maxDepth;set{if(value<=0){throw new ArgumentException("Value must be positive.",nameof(value));}_maxDepth=value;_maxDepthSet=true;}}public virtual bool CheckAdditionalContent{get=>_checkAdditionalContent??JsonSerializerSettings.DefaultCheckAdditionalContent;set=>_checkAdditionalContent=value;}internal bool IsCheckAdditionalContentSet(){return(_checkAdditionalContent!=null);}public JsonSerializer(){_referenceLoopHandling=JsonSerializerSettings.DefaultReferenceLoopHandling;_missingMemberHandling=JsonSerializerSettings.DefaultMissingMemberHandling;_nullValueHandling=JsonSerializerSettings.DefaultNullValueHandling;_defaultValueHandling=JsonSerializerSettings.DefaultDefaultValueHandling;_objectCreationHandling=JsonSerializerSettings.DefaultObjectCreationHandling;_preserveReferencesHandling=JsonSerializerSettings.DefaultPreserveReferencesHandling;_constructorHandling=JsonSerializerSettings.DefaultConstructorHandling;_typeNameHandling=JsonSerializerSettings.DefaultTypeNameHandling;_metadataPropertyHandling=JsonSerializerSettings.DefaultMetadataPropertyHandling;_context=JsonSerializerSettings.DefaultContext;_serializationBinder=DefaultSerializationBinder.Instance;_culture=JsonSerializerSettings.DefaultCulture;_contractResolver=DefaultContractResolver.Instance;}public static JsonSerializer Create(){return new JsonSerializer();}public static JsonSerializer Create(JsonSerializerSettings?settings){JsonSerializer serializer=Create();if(settings!=null){ApplySDSettings(serializer,settings);}return serializer;}public static JsonSerializer CreateDefault(){JsonSerializerSettings?defaultSettings=JsonConvert.DefaultSettings?.Invoke();return Create(defaultSettings);}public static JsonSerializer CreateDefault(JsonSerializerSettings?settings){JsonSerializer serializer=CreateDefault();if(settings!=null){ApplySDSettings(serializer,settings);}return serializer;}private static void ApplySDSettings(JsonSerializer serializer,JsonSerializerSettings settings){if(!CollectionUtils.IsNullOrEmpty(settings.Converters)){for(int i=0;i<settings.Converters.Count;i++){serializer.Converters.Insert(i,settings.Converters[i]);}}if(settings._typeNameHandling!=null){serializer.TypeNameHandling=settings.TypeNameHandling;}if(settings._metadataPropertyHandling!=null){serializer.MetadataPropertyHandling=settings.MetadataPropertyHandling;}if(settings._typeNameAssemblyFormatHandling!=null){serializer.TypeNameAssemblyFormatHandling=settings.TypeNameAssemblyFormatHandling;}if(settings._preserveReferencesHandling!=null){serializer.PreserveReferencesHandling=settings.PreserveReferencesHandling;}if(settings._referenceLoopHandling!=null){serializer.ReferenceLoopHandling=settings.ReferenceLoopHandling;}if(settings._missingMemberHandling!=null){serializer.MissingMemberHandling=settings.MissingMemberHandling;}if(settings._objectCreationHandling!=null){serializer.ObjectCreationHandling=settings.ObjectCreationHandling;}if(settings._nullValueHandling!=null){serializer.NullValueHandling=settings.NullValueHandling;}if(settings._defaultValueHandling!=null){serializer.DefaultValueHandling=settings.DefaultValueHandling;}if(settings._constructorHandling!=null){serializer.ConstructorHandling=settings.ConstructorHandling;}if(settings._context!=null){serializer.Context=settings.Context;}if(settings._checkAdditionalContent!=null){serializer._checkAdditionalContent=settings._checkAdditionalContent;}if(settings.Error!=null){serializer.Error+=settings.Error;}if(settings.ContractResolver!=null){serializer.ContractResolver=settings.ContractResolver;}if(settings.ReferenceResolverProvider!=null){serializer.ReferenceResolver=settings.ReferenceResolverProvider();}if(settings.TraceWriter!=null){serializer.TraceWriter=settings.TraceWriter;}if(settings.EqualityComparer!=null){serializer.EqualityComparer=settings.EqualityComparer;}if(settings.SerializationBinder!=null){serializer.SerializationBinder=settings.SerializationBinder;}if(settings._formatting!=null){serializer._formatting=settings._formatting;}if(settings._dateFormatHandling!=null){serializer._dateFormatHandling=settings._dateFormatHandling;}if(settings._dateTimeZoneHandling!=null){serializer._dateTimeZoneHandling=settings._dateTimeZoneHandling;}if(settings._dateParseHandling!=null){serializer._dateParseHandling=settings._dateParseHandling;}if(settings._dateFormatStringSet){serializer._dateFormatString=settings._dateFormatString;serializer._dateFormatStringSet=settings._dateFormatStringSet;}if(settings._floatFormatHandling!=null){serializer._floatFormatHandling=settings._floatFormatHandling;}if(settings._floatParseHandling!=null){serializer._floatParseHandling=settings._floatParseHandling;}if(settings._stringEscapeHandling!=null){serializer._stringEscapeHandling=settings._stringEscapeHandling;}if(settings._culture!=null){serializer._culture=settings._culture;}if(settings._maxDepthSet){serializer._maxDepth=settings._maxDepth;serializer._maxDepthSet=settings._maxDepthSet;}}[DebuggerStepThrough]public void Populate(TextReader reader,object target){Populate(new JsonTextReader(reader),target);}[DebuggerStepThrough]public void Populate(JsonReader reader,object target){PopulateInternal(reader,target);}internal virtual void PopulateInternal(JsonReader reader,object target){ValidationUtils.ArgumentNotNull(reader,nameof(reader));ValidationUtils.ArgumentNotNull(target,nameof(target));SetupReader(reader,out CultureInfo?previousCulture,out DateTimeZoneHandling?previousDateTimeZoneHandling,out DateParseHandling?previousDateParseHandling,out FloatParseHandling?previousFloatParseHandling,out int?previousMaxDepth,out string?previousDateFormatString);TraceJsonReader?traceJsonReader=(TraceWriter!=null&&TraceWriter.LevelFilter>=TraceLevel.Verbose)?CreateTraceJsonReader(reader):null;JsonSerializerInternalReader serializerReader=new JsonSerializerInternalReader(this);serializerReader.Populate(traceJsonReader??reader,target);if(traceJsonReader!=null){TraceWriter!.Trace(TraceLevel.Verbose,traceJsonReader.GetDeserializedJsonMessage(),null);}ResetReader(reader,previousCulture,previousDateTimeZoneHandling,previousDateParseHandling,previousFloatParseHandling,previousMaxDepth,previousDateFormatString);}[DebuggerStepThrough]public object?Deserialize(JsonReader reader){return Deserialize(reader,null);}[DebuggerStepThrough]public object?Deserialize(TextReader reader,Type objectType){return Deserialize(new JsonTextReader(reader),objectType);}[DebuggerStepThrough]public T?Deserialize<T>(JsonReader reader){return(T?)Deserialize(reader,typeof(T));}[DebuggerStepThrough]public object?Deserialize(JsonReader reader,Type?objectType){return DeserializeInternal(reader,objectType);}internal virtual object?DeserializeInternal(JsonReader reader,Type?objectType){ValidationUtils.ArgumentNotNull(reader,nameof(reader));SetupReader(reader,out CultureInfo?previousCulture,out DateTimeZoneHandling?previousDateTimeZoneHandling,out DateParseHandling?previousDateParseHandling,out FloatParseHandling?previousFloatParseHandling,out int?previousMaxDepth,out string?previousDateFormatString);TraceJsonReader?traceJsonReader=(TraceWriter!=null&&TraceWriter.LevelFilter>=TraceLevel.Verbose)?CreateTraceJsonReader(reader):null;JsonSerializerInternalReader serializerReader=new JsonSerializerInternalReader(this);object?value=serializerReader.Deserialize(traceJsonReader??reader,objectType,CheckAdditionalContent);if(traceJsonReader!=null){TraceWriter!.Trace(TraceLevel.Verbose,traceJsonReader.GetDeserializedJsonMessage(),null);}ResetReader(reader,previousCulture,previousDateTimeZoneHandling,previousDateParseHandling,previousFloatParseHandling,previousMaxDepth,previousDateFormatString);return value;}internal void SetupReader(JsonReader reader,out CultureInfo?previousCulture,out DateTimeZoneHandling?previousDateTimeZoneHandling,out DateParseHandling?previousDateParseHandling,out FloatParseHandling?previousFloatParseHandling,out int?previousMaxDepth,out string?previousDateFormatString){if(_culture!=null&&!_culture.Equals(reader.Culture)){previousCulture=reader.Culture;reader.Culture=_culture;}else{previousCulture=null;}if(_dateTimeZoneHandling!=null&&reader.DateTimeZoneHandling!=_dateTimeZoneHandling){previousDateTimeZoneHandling=reader.DateTimeZoneHandling;reader.DateTimeZoneHandling=_dateTimeZoneHandling.GetValueOrDefault();}else{previousDateTimeZoneHandling=null;}if(_dateParseHandling!=null&&reader.DateParseHandling!=_dateParseHandling){previousDateParseHandling=reader.DateParseHandling;reader.DateParseHandling=_dateParseHandling.GetValueOrDefault();}else{previousDateParseHandling=null;}if(_floatParseHandling!=null&&reader.FloatParseHandling!=_floatParseHandling){previousFloatParseHandling=reader.FloatParseHandling;reader.FloatParseHandling=_floatParseHandling.GetValueOrDefault();}else{previousFloatParseHandling=null;}if(_maxDepthSet&&reader.MaxDepth!=_maxDepth){previousMaxDepth=reader.MaxDepth;reader.MaxDepth=_maxDepth;}else{previousMaxDepth=null;}if(_dateFormatStringSet&&reader.DateFormatString!=_dateFormatString){previousDateFormatString=reader.DateFormatString;reader.DateFormatString=_dateFormatString;}else{previousDateFormatString=null;}if(reader is JsonTextReader textReader){if(textReader.PropertyNameTable==null&&_contractResolver is DefaultContractResolver resolver){textReader.PropertyNameTable=resolver.GetNameTable();}}}private void ResetReader(JsonReader reader,CultureInfo?previousCulture,DateTimeZoneHandling?previousDateTimeZoneHandling,DateParseHandling?previousDateParseHandling,FloatParseHandling?previousFloatParseHandling,int?previousMaxDepth,string?previousDateFormatString){if(previousCulture!=null){reader.Culture=previousCulture;}if(previousDateTimeZoneHandling!=null){reader.DateTimeZoneHandling=previousDateTimeZoneHandling.GetValueOrDefault();}if(previousDateParseHandling!=null){reader.DateParseHandling=previousDateParseHandling.GetValueOrDefault();}if(previousFloatParseHandling!=null){reader.FloatParseHandling=previousFloatParseHandling.GetValueOrDefault();}if(_maxDepthSet){reader.MaxDepth=previousMaxDepth;}if(_dateFormatStringSet){reader.DateFormatString=previousDateFormatString;}if(reader is JsonTextReader textReader&&textReader.PropertyNameTable!=null&&_contractResolver is DefaultContractResolver resolver&&textReader.PropertyNameTable==resolver.GetNameTable()){textReader.PropertyNameTable=null;}}public void Serialize(TextWriter textWriter,object?value){Serialize(new JsonTextWriter(textWriter),value);}public void Serialize(JsonWriter jsonWriter,object?value,Type?objectType){SerializeInternal(jsonWriter,value,objectType);}public void Serialize(TextWriter textWriter,object?value,Type objectType){Serialize(new JsonTextWriter(textWriter),value,objectType);}public void Serialize(JsonWriter jsonWriter,object?value){SerializeInternal(jsonWriter,value,null);}private TraceJsonReader CreateTraceJsonReader(JsonReader reader){TraceJsonReader traceReader=new TraceJsonReader(reader);if(reader.TokenType!=JsonToken.None){traceReader.WriteCurrentToken();}return traceReader;}internal virtual void SerializeInternal(JsonWriter jsonWriter,object?value,Type?objectType){ValidationUtils.ArgumentNotNull(jsonWriter,nameof(jsonWriter));Formatting?previousFormatting=null;if(_formatting!=null&&jsonWriter.Formatting!=_formatting){previousFormatting=jsonWriter.Formatting;jsonWriter.Formatting=_formatting.GetValueOrDefault();}DateFormatHandling?previousDateFormatHandling=null;if(_dateFormatHandling!=null&&jsonWriter.DateFormatHandling!=_dateFormatHandling){previousDateFormatHandling=jsonWriter.DateFormatHandling;jsonWriter.DateFormatHandling=_dateFormatHandling.GetValueOrDefault();}DateTimeZoneHandling?previousDateTimeZoneHandling=null;if(_dateTimeZoneHandling!=null&&jsonWriter.DateTimeZoneHandling!=_dateTimeZoneHandling){previousDateTimeZoneHandling=jsonWriter.DateTimeZoneHandling;jsonWriter.DateTimeZoneHandling=_dateTimeZoneHandling.GetValueOrDefault();}FloatFormatHandling?previousFloatFormatHandling=null;if(_floatFormatHandling!=null&&jsonWriter.FloatFormatHandling!=_floatFormatHandling){previousFloatFormatHandling=jsonWriter.FloatFormatHandling;jsonWriter.FloatFormatHandling=_floatFormatHandling.GetValueOrDefault();}StringEscapeHandling?previousStringEscapeHandling=null;if(_stringEscapeHandling!=null&&jsonWriter.StringEscapeHandling!=_stringEscapeHandling){previousStringEscapeHandling=jsonWriter.StringEscapeHandling;jsonWriter.StringEscapeHandling=_stringEscapeHandling.GetValueOrDefault();}CultureInfo?previousCulture=null;if(_culture!=null&&!_culture.Equals(jsonWriter.Culture)){previousCulture=jsonWriter.Culture;jsonWriter.Culture=_culture;}string?previousDateFormatString=null;if(_dateFormatStringSet&&jsonWriter.DateFormatString!=_dateFormatString){previousDateFormatString=jsonWriter.DateFormatString;jsonWriter.DateFormatString=_dateFormatString;}TraceJsonWriter?traceJsonWriter=(TraceWriter!=null&&TraceWriter.LevelFilter>=TraceLevel.Verbose)?new TraceJsonWriter(jsonWriter):null;JsonSerializerInternalWriter serializerWriter=new JsonSerializerInternalWriter(this);serializerWriter.Serialize(traceJsonWriter??jsonWriter,value,objectType);if(traceJsonWriter!=null){TraceWriter!.Trace(TraceLevel.Verbose,traceJsonWriter.GetSerializedJsonMessage(),null);}if(previousFormatting!=null){jsonWriter.Formatting=previousFormatting.GetValueOrDefault();}if(previousDateFormatHandling!=null){jsonWriter.DateFormatHandling=previousDateFormatHandling.GetValueOrDefault();}if(previousDateTimeZoneHandling!=null){jsonWriter.DateTimeZoneHandling=previousDateTimeZoneHandling.GetValueOrDefault();}if(previousFloatFormatHandling!=null){jsonWriter.FloatFormatHandling=previousFloatFormatHandling.GetValueOrDefault();}if(previousStringEscapeHandling!=null){jsonWriter.StringEscapeHandling=previousStringEscapeHandling.GetValueOrDefault();}if(_dateFormatStringSet){jsonWriter.DateFormatString=previousDateFormatString;}if(previousCulture!=null){jsonWriter.Culture=previousCulture;}}internal IReferenceResolver GetReferenceResolver(){if(_referenceResolver==null){_referenceResolver=new DefaultReferenceResolver();}return _referenceResolver;}internal JsonConverter?GetMatchingConverter(Type type){return GetMatchingConverter(_converters,type);}internal static JsonConverter?GetMatchingConverter(IList<JsonConverter>?converters,Type objectType){
#if DEBUG
ValidationUtils.ArgumentNotNull(objectType,nameof(objectType));
#endif
if(converters!=null){for(int i=0;i<converters.Count;i++){JsonConverter converter=converters[i];if(converter.CanConvert(objectType)){return converter;}}}return null;}internal void OnError(ErrorEventArgs e){Error?.Invoke(this,e);}}}namespace Newtonsoft.Json.Serialization{internal abstract class JsonSerializerInternalBase{private class ReferenceEqualsEqualityComparer:IEqualityComparer<object>{bool IEqualityComparer<object>.Equals(object x,object y){return ReferenceEquals(x,y);}int IEqualityComparer<object>.GetHashCode(object obj){return RuntimeHelpers.GetHashCode(obj);}}private ErrorContext?_currentErrorContext;private BidirectionalDictionary<string,object>?_mappings;internal readonly JsonSerializer SD;internal readonly ITraceWriter?TraceWriter;protected JsonSerializerProxy?InternalSD;protected JsonSerializerInternalBase(JsonSerializer serializer){ValidationUtils.ArgumentNotNull(serializer,nameof(serializer));SD=serializer;TraceWriter=serializer.TraceWriter;}internal BidirectionalDictionary<string,object>DefaultReferenceMappings{get{if(_mappings==null){_mappings=new BidirectionalDictionary<string,object>(EqualityComparer<string>.Default,new ReferenceEqualsEqualityComparer(),"A different value already has the Id '{0}'.","A different Id has already been assigned for value '{0}'. This error may be caused by an object being reused multiple times during deserialization and can be fixed with the setting ObjectCreationHandling.Replace.");}return _mappings;}}protected NullValueHandling ResolvedNullValueHandling(JsonObjectContract?containerContract,JsonProperty property){NullValueHandling resolvedNullValueHandling=property.NullValueHandling??containerContract?.ItemNullValueHandling??SD._nullValueHandling;return resolvedNullValueHandling;}private ErrorContext GetErrorContext(object?currentObject,object?member,string path,Exception error){if(_currentErrorContext==null){_currentErrorContext=new ErrorContext(currentObject,member,path,error);}if(_currentErrorContext.Error!=error){throw new InvalidOperationException("Current error context error is different to requested error.");}return _currentErrorContext;}protected void ClearErrorContext(){if(_currentErrorContext==null){throw new InvalidOperationException("Could not clear error context. Error context is already null.");}_currentErrorContext=null;}protected bool IsErrorHandled(object?currentObject,JsonContract?contract,object?keyValue,IJsonLineInfo?lineInfo,string path,Exception ex){ErrorContext errorContext=GetErrorContext(currentObject,keyValue,path,ex);if(TraceWriter!=null&&TraceWriter.LevelFilter>=TraceLevel.Error&&!errorContext.Traced){errorContext.Traced=true;string message=(GetType()==typeof(JsonSerializerInternalWriter))?"Error serializing":"Error deserializing";if(contract!=null){message+=" "+contract.UnderlyingType;}message+=". "+ex.Message;if(!(ex is JsonException)){message=JsonPosition.FormatMessage(lineInfo,path,message);}TraceWriter.Trace(TraceLevel.Error,message,ex);}if(contract!=null&&currentObject!=null){contract.InvokeOnError(currentObject,SD.Context,errorContext);}if(!errorContext.Handled){SD.OnError(new ErrorEventArgs(currentObject,errorContext));}return errorContext.Handled;}}}
namespace Newtonsoft.Json.Serialization{internal class JsonSerializerInternalReader:JsonSerializerInternalBase{internal enum PropertyPresence{None=0,Null=1,Value=2}public JsonSerializerInternalReader(JsonSerializer serializer):base(serializer){}public void Populate(JsonReader reader,object target){ValidationUtils.ArgumentNotNull(target,nameof(target));Type objectType=target.GetType();JsonContract contract=SD._contractResolver.ResolveContract(objectType);if(!reader.MoveToContent()){throw JsonSerializationException.Create(reader,"No JSON content found.");}if(reader.TokenType==JsonToken.StartArray){if(contract.ContractType==JsonContractType.Array){JsonArrayContract arrayContract=(JsonArrayContract)contract;PopulateList((arrayContract.ShouldCreateWrapper)?arrayContract.CreateWrapper(target):(IList)target,reader,arrayContract,null,null);}else{throw JsonSerializationException.Create(reader,"Cannot populate JSON array onto type '{0}'.".FormatWith(CultureInfo.InvariantCulture,objectType));}}else if(reader.TokenType==JsonToken.StartObject){reader.ReadAndAssert();string?id=null;if(SD.MetadataPropertyHandling!=MetadataPropertyHandling.Ignore&&reader.TokenType==JsonToken.PropertyName&&string.Equals(reader.Value!.ToString(),JsonTypeReflector.IdPropertyName,StringComparison.Ordinal)){reader.ReadAndAssert();id=reader.Value?.ToString();reader.ReadAndAssert();}if(contract.ContractType==JsonContractType.Dictionary){JsonDictionaryContract dictionaryContract=(JsonDictionaryContract)contract;PopulateDictionary((dictionaryContract.ShouldCreateWrapper)?dictionaryContract.CreateWrapper(target):(IDictionary)target,reader,dictionaryContract,null,id);}else if(contract.ContractType==JsonContractType.Object){PopulateObject(target,reader,(JsonObjectContract)contract,null,id);}else{throw JsonSerializationException.Create(reader,"Cannot populate JSON object onto type '{0}'.".FormatWith(CultureInfo.InvariantCulture,objectType));}}else{throw JsonSerializationException.Create(reader,"Unexpected initial token '{0}' when populating object. Expected JSON object or array.".FormatWith(CultureInfo.InvariantCulture,reader.TokenType));}}private JsonContract?GetContractSafe(Type?type){if(type==null){return null;}return GetContract(type);}private JsonContract GetContract(Type type){return SD._contractResolver.ResolveContract(type);}public object?Deserialize(JsonReader reader,Type?objectType,bool checkAdditionalContent){if(reader==null){throw new ArgumentNullException(nameof(reader));}JsonContract?contract=GetContractSafe(objectType);try{JsonConverter?converter=GetConverter(contract,null,null,null);if(reader.TokenType==JsonToken.None&&!reader.ReadForType(contract,converter!=null)){if(contract!=null&&!contract.IsNullable){throw JsonSerializationException.Create(reader,"No JSON content found and type '{0}' is not nullable.".FormatWith(CultureInfo.InvariantCulture,contract.UnderlyingType));}return null;}object?deserializedValue;if(converter!=null&&converter.CanRead){deserializedValue=DeserializeConvertable(converter,reader,objectType!,null);}else{deserializedValue=CreateValueInternal(reader,objectType,contract,null,null,null,null);}if(checkAdditionalContent){while(reader.Read()){if(reader.TokenType!=JsonToken.Comment){throw JsonSerializationException.Create(reader,"Additional text found in JSON string after finishing deserializing object.");}}}return deserializedValue;}catch(Exception ex){if(IsErrorHandled(null,contract,null,reader as IJsonLineInfo,reader.Path,ex)){HandleError(reader,false,0);return null;}else{ClearErrorContext();throw;}}}private JsonSerializerProxy GetInternalSD(){if(InternalSD==null){InternalSD=new JsonSerializerProxy(this);}return InternalSD;}private JToken?CreateJToken(JsonReader reader,JsonContract?contract){ValidationUtils.ArgumentNotNull(reader,nameof(reader));if(contract!=null){if(contract.UnderlyingType==typeof(JRaw)){return JRaw.Create(reader);}if(reader.TokenType==JsonToken.Null&&!(contract.UnderlyingType==typeof(JValue)||contract.UnderlyingType==typeof(JToken))){return null;}}JToken?token;using(JTokenWriter writer=new JTokenWriter()){writer.WriteToken(reader);token=writer.Token;}if(contract!=null&&token!=null){if(!contract.UnderlyingType.IsAssignableFrom(token.GetType())){throw JsonSerializationException.Create(reader,"Deserialized JSON type '{0}' is not compatible with expected type '{1}'.".FormatWith(CultureInfo.InvariantCulture,token.GetType().FullName,contract.UnderlyingType.FullName));}}return token;}private JToken CreateJObject(JsonReader reader){ValidationUtils.ArgumentNotNull(reader,nameof(reader));using(JTokenWriter writer=new JTokenWriter()){writer.WriteStartObject();do{if(reader.TokenType==JsonToken.PropertyName){string propertyName=(string)reader.Value!;if(!reader.ReadAndMoveToContent()){break;}if(CheckPropertyName(reader,propertyName)){continue;}writer.WritePropertyName(propertyName);writer.WriteToken(reader,true,true,false);}else if(reader.TokenType==JsonToken.Comment){}else{writer.WriteEndObject();return writer.Token!;}}while(reader.Read());throw JsonSerializationException.Create(reader,"Unexpected end when deserializing object.");}}private object?CreateValueInternal(JsonReader reader,Type?objectType,JsonContract?contract,JsonProperty?member,JsonContainerContract?containerContract,JsonProperty?containerMember,object?existingValue){if(contract!=null&&contract.ContractType==JsonContractType.Linq){return CreateJToken(reader,contract);}do{switch(reader.TokenType){case JsonToken.StartObject:return CreateObject(reader,objectType,contract,member,containerContract,containerMember,existingValue);case JsonToken.StartArray:return CreateList(reader,objectType,contract,member,existingValue,null);case JsonToken.Integer:case JsonToken.Float:case JsonToken.Boolean:case JsonToken.Date:case JsonToken.Bytes:return EnsureType(reader,reader.Value,CultureInfo.InvariantCulture,contract,objectType);case JsonToken.String:string s=(string)reader.Value!;if(objectType==typeof(byte[])){return Convert.FromBase64String(s);}if(CoerceEmptyStringToNull(objectType,contract,s)){return null;}return EnsureType(reader,s,CultureInfo.InvariantCulture,contract,objectType);case JsonToken.StartConstructor:string constructorName=reader.Value!.ToString();return EnsureType(reader,constructorName,CultureInfo.InvariantCulture,contract,objectType);case JsonToken.Null:case JsonToken.Undefined:
#if HAVE_ADO_NET
if(objectType==typeof(DBNull)){return DBNull.Value;}
#endif
return EnsureType(reader,reader.Value,CultureInfo.InvariantCulture,contract,objectType);case JsonToken.Raw:return new JRaw((string?)reader.Value);case JsonToken.Comment:break;default:throw JsonSerializationException.Create(reader,"Unexpected token while deserializing object: "+reader.TokenType);}}while(reader.Read());throw JsonSerializationException.Create(reader,"Unexpected end when deserializing object.");}private static bool CoerceEmptyStringToNull(Type?objectType,JsonContract?contract,string s){return StringUtils.IsNullOrEmpty(s)&&objectType!=null&&objectType!=typeof(string)&&objectType!=typeof(object)&&contract!=null&&contract.IsNullable;}internal string GetExpectedDescription(JsonContract contract){switch(contract.ContractType){case JsonContractType.Object:case JsonContractType.Dictionary:
#if HAVE_BINARY_SERIALIZATION
case JsonContractType.Serializable:
#endif
#if HAVE_DYNAMIC
case JsonContractType.Dynamic:
#endif
return@"JSON object (e.g. {""name"":""value""})";case JsonContractType.Array:return@"JSON array (e.g. [1,2,3])";case JsonContractType.Primitive:return@"JSON primitive value (e.g. string, number, boolean, null)";case JsonContractType.String:return@"JSON string value";default:throw new ArgumentOutOfRangeException();}}private JsonConverter?GetConverter(JsonContract?contract,JsonConverter?memberConverter,JsonContainerContract?containerContract,JsonProperty?containerProperty){JsonConverter?converter=null;if(memberConverter!=null){converter=memberConverter;}else if(containerProperty?.ItemConverter!=null){converter=containerProperty.ItemConverter;}else if(containerContract?.ItemConverter!=null){converter=containerContract.ItemConverter;}else if(contract!=null){if(contract.Converter!=null){converter=contract.Converter;}else if(SD.GetMatchingConverter(contract.UnderlyingType)is JsonConverter matchingConverter){converter=matchingConverter;}else if(contract.InternalConverter!=null){converter=contract.InternalConverter;}}return converter;}private object?CreateObject(JsonReader reader,Type?objectType,JsonContract?contract,JsonProperty?member,JsonContainerContract?containerContract,JsonProperty?containerMember,object?existingValue){string?id;Type?resolvedObjectType=objectType;if(SD.MetadataPropertyHandling==MetadataPropertyHandling.Ignore){reader.ReadAndAssert();id=null;}else if(SD.MetadataPropertyHandling==MetadataPropertyHandling.ReadAhead){if(!(reader is JTokenReader tokenReader)){JToken t=JToken.ReadFrom(reader);tokenReader=(JTokenReader)t.CreateReader();tokenReader.Culture=reader.Culture;tokenReader.DateFormatString=reader.DateFormatString;tokenReader.DateParseHandling=reader.DateParseHandling;tokenReader.DateTimeZoneHandling=reader.DateTimeZoneHandling;tokenReader.FloatParseHandling=reader.FloatParseHandling;tokenReader.SupportMultipleContent=reader.SupportMultipleContent;tokenReader.ReadAndAssert();reader=tokenReader;}if(ReadMetadataPropertiesToken(tokenReader,ref resolvedObjectType,ref contract,member,containerContract,containerMember,existingValue,out object?newValue,out id)){return newValue;}}else{reader.ReadAndAssert();if(ReadMetadataProperties(reader,ref resolvedObjectType,ref contract,member,containerContract,containerMember,existingValue,out object?newValue,out id)){return newValue;}}if(HasNoDefinedType(contract)){return CreateJObject(reader);}MiscellaneousUtils.Assert(resolvedObjectType!=null);MiscellaneousUtils.Assert(contract!=null);switch(contract.ContractType){case JsonContractType.Object:{bool createdFromNonDefaultCreator=false;JsonObjectContract objectContract=(JsonObjectContract)contract;object targetObject;if(existingValue!=null&&(resolvedObjectType==objectType||resolvedObjectType.IsAssignableFrom(existingValue.GetType()))){targetObject=existingValue;}else{targetObject=CreateNewObject(reader,objectContract,member,containerMember,id,out createdFromNonDefaultCreator);}if(createdFromNonDefaultCreator){return targetObject;}return PopulateObject(targetObject,reader,objectContract,member,id);}case JsonContractType.Primitive:{JsonPrimitiveContract primitiveContract=(JsonPrimitiveContract)contract;if(SD.MetadataPropertyHandling!=MetadataPropertyHandling.Ignore&&reader.TokenType==JsonToken.PropertyName&&string.Equals(reader.Value!.ToString(),JsonTypeReflector.ValuePropertyName,StringComparison.Ordinal)){reader.ReadAndAssert();if(reader.TokenType==JsonToken.StartObject){throw JsonSerializationException.Create(reader,"Unexpected token when deserializing primitive value: "+reader.TokenType);}object?value=CreateValueInternal(reader,resolvedObjectType,primitiveContract,member,null,null,existingValue);reader.ReadAndAssert();return value;}break;}case JsonContractType.Dictionary:{JsonDictionaryContract dictionaryContract=(JsonDictionaryContract)contract;object targetDictionary;if(existingValue==null){IDictionary dictionary=CreateNewDictionary(reader,dictionaryContract,out bool createdFromNonDefaultCreator);if(createdFromNonDefaultCreator){if(id!=null){throw JsonSerializationException.Create(reader,"Cannot preserve reference to readonly dictionary, or dictionary created from a non-default constructor: {0}.".FormatWith(CultureInfo.InvariantCulture,contract.UnderlyingType));}if(contract.OnSerializingCallbacks.Count>0){throw JsonSerializationException.Create(reader,"Cannot call OnSerializing on readonly dictionary, or dictionary created from a non-default constructor: {0}.".FormatWith(CultureInfo.InvariantCulture,contract.UnderlyingType));}if(contract.OnErrorCallbacks.Count>0){throw JsonSerializationException.Create(reader,"Cannot call OnError on readonly list, or dictionary created from a non-default constructor: {0}.".FormatWith(CultureInfo.InvariantCulture,contract.UnderlyingType));}if(!dictionaryContract.HasParameterizedCreatorInternal){throw JsonSerializationException.Create(reader,"Cannot deserialize readonly or fixed size dictionary: {0}.".FormatWith(CultureInfo.InvariantCulture,contract.UnderlyingType));}}PopulateDictionary(dictionary,reader,dictionaryContract,member,id);if(createdFromNonDefaultCreator){ObjectConstructor<object>creator=(dictionaryContract.OverrideCreator??dictionaryContract.ParameterizedCreator)!;return creator(dictionary);}else if(dictionary is IWrappedDictionary wrappedDictionary){return wrappedDictionary.UnderlyingDictionary;}targetDictionary=dictionary;}else{targetDictionary=PopulateDictionary(dictionaryContract.ShouldCreateWrapper||!(existingValue is IDictionary)?dictionaryContract.CreateWrapper(existingValue):(IDictionary)existingValue,reader,dictionaryContract,member,id);}return targetDictionary;}
#if HAVE_DYNAMIC
case JsonContractType.Dynamic:JsonDynamicContract dynamicContract=(JsonDynamicContract)contract;return CreateDynamic(reader,dynamicContract,member,id);
#endif
#if HAVE_BINARY_SERIALIZATION
case JsonContractType.Serializable:JsonISerializableContract serializableContract=(JsonISerializableContract)contract;return CreateISerializable(reader,serializableContract,member,id);
#endif
}string message=@"Cannot deserialize the current JSON object (e.g. {{""name"":""value""}}) into type '{0}' because the type requires a {1} to deserialize correctly."+Environment.NewLine+@"To fix this error either change the JSON to a {1} or change the deserialized type so that it is a normal .NET type (e.g. not a primitive type like integer, not a collection type like an array or List<T>) that can be deserialized from a JSON object. JsonObjectAttribute can also be added to the type to force it to deserialize from a JSON object."+Environment.NewLine;message=message.FormatWith(CultureInfo.InvariantCulture,resolvedObjectType,GetExpectedDescription(contract));throw JsonSerializationException.Create(reader,message);}private bool ReadMetadataPropertiesToken(JTokenReader reader,ref Type?objectType,ref JsonContract?contract,JsonProperty?member,JsonContainerContract?containerContract,JsonProperty?containerMember,object?existingValue,out object?newValue,out string?id){id=null;newValue=null;if(reader.TokenType==JsonToken.StartObject){JObject current=(JObject)reader.CurrentToken!;JProperty?refProperty=current.Property(JsonTypeReflector.RefPropertyName,StringComparison.Ordinal);if(refProperty!=null){JToken refToken=refProperty.Value;if(refToken.Type!=JTokenType.String&&refToken.Type!=JTokenType.Null){throw JsonSerializationException.Create(refToken,refToken.Path,"JSON reference {0} property must have a string or null value.".FormatWith(CultureInfo.InvariantCulture,JsonTypeReflector.RefPropertyName),null);}string?reference=(string?)refProperty;if(reference!=null){JToken?additionalContent=refProperty.Next??refProperty.Previous;if(additionalContent!=null){throw JsonSerializationException.Create(additionalContent,additionalContent.Path,"Additional content found in JSON reference object. A JSON reference object should only have a {0} property.".FormatWith(CultureInfo.InvariantCulture,JsonTypeReflector.RefPropertyName),null);}newValue=SD.GetReferenceResolver().ResolveReference(this,reference);if(TraceWriter!=null&&TraceWriter.LevelFilter>=TraceLevel.Info){TraceWriter.Trace(TraceLevel.Info,JsonPosition.FormatMessage(reader,reader.Path,"Resolved object reference '{0}' to {1}.".FormatWith(CultureInfo.InvariantCulture,reference,newValue.GetType())),null);}reader.Skip();return true;}}JToken?typeToken=current[JsonTypeReflector.TypePropertyName];if(typeToken!=null){string?qualifiedTypeName=(string?)typeToken;JsonReader typeTokenReader=typeToken.CreateReader();typeTokenReader.ReadAndAssert();ResolveTypeName(typeTokenReader,ref objectType,ref contract,member,containerContract,containerMember,qualifiedTypeName!);JToken?valueToken=current[JsonTypeReflector.ValuePropertyName];if(valueToken!=null){while(true){reader.ReadAndAssert();if(reader.TokenType==JsonToken.PropertyName){if((string)reader.Value!=JsonTypeReflector.ValuePropertyName){return false;}}reader.ReadAndAssert();reader.Skip();}}}JToken?idToken=current[JsonTypeReflector.IdPropertyName];if(idToken!=null){id=(string?)idToken;}JToken?valuesToken=current[JsonTypeReflector.ArrayValuesPropertyName];if(valuesToken!=null){JsonReader listReader=valuesToken.CreateReader();listReader.ReadAndAssert();newValue=CreateList(listReader,objectType,contract,member,existingValue,id);reader.Skip();return true;}}reader.ReadAndAssert();return false;}private bool ReadMetadataProperties(JsonReader reader,ref Type?objectType,ref JsonContract?contract,JsonProperty?member,JsonContainerContract?containerContract,JsonProperty?containerMember,object?existingValue,out object?newValue,out string?id){id=null;newValue=null;if(reader.TokenType==JsonToken.PropertyName){string propertyName=reader.Value!.ToString();if(propertyName.Length>0&&propertyName[0]=='$'){bool metadataProperty;do{propertyName=reader.Value!.ToString();if(string.Equals(propertyName,JsonTypeReflector.RefPropertyName,StringComparison.Ordinal)){reader.ReadAndAssert();if(reader.TokenType!=JsonToken.String&&reader.TokenType!=JsonToken.Null){throw JsonSerializationException.Create(reader,"JSON reference {0} property must have a string or null value.".FormatWith(CultureInfo.InvariantCulture,JsonTypeReflector.RefPropertyName));}string?reference=reader.Value?.ToString();reader.ReadAndAssert();if(reference!=null){if(reader.TokenType==JsonToken.PropertyName){throw JsonSerializationException.Create(reader,"Additional content found in JSON reference object. A JSON reference object should only have a {0} property.".FormatWith(CultureInfo.InvariantCulture,JsonTypeReflector.RefPropertyName));}newValue=SD.GetReferenceResolver().ResolveReference(this,reference);if(TraceWriter!=null&&TraceWriter.LevelFilter>=TraceLevel.Info){TraceWriter.Trace(TraceLevel.Info,JsonPosition.FormatMessage(reader as IJsonLineInfo,reader.Path,"Resolved object reference '{0}' to {1}.".FormatWith(CultureInfo.InvariantCulture,reference,newValue!.GetType())),null);}return true;}else{metadataProperty=true;}}else if(string.Equals(propertyName,JsonTypeReflector.TypePropertyName,StringComparison.Ordinal)){reader.ReadAndAssert();string qualifiedTypeName=reader.Value!.ToString();ResolveTypeName(reader,ref objectType,ref contract,member,containerContract,containerMember,qualifiedTypeName);reader.ReadAndAssert();metadataProperty=true;}else if(string.Equals(propertyName,JsonTypeReflector.IdPropertyName,StringComparison.Ordinal)){reader.ReadAndAssert();id=reader.Value?.ToString();reader.ReadAndAssert();metadataProperty=true;}else if(string.Equals(propertyName,JsonTypeReflector.ArrayValuesPropertyName,StringComparison.Ordinal)){reader.ReadAndAssert();object?list=CreateList(reader,objectType,contract,member,existingValue,id);reader.ReadAndAssert();newValue=list;return true;}else{metadataProperty=false;}}while(metadataProperty&&reader.TokenType==JsonToken.PropertyName);}}return false;}private void ResolveTypeName(JsonReader reader,ref Type?objectType,ref JsonContract?contract,JsonProperty?member,JsonContainerContract?containerContract,JsonProperty?containerMember,string qualifiedTypeName){TypeNameHandling resolvedTypeNameHandling=member?.TypeNameHandling??containerContract?.ItemTypeNameHandling??containerMember?.ItemTypeNameHandling??SD._typeNameHandling;if(resolvedTypeNameHandling!=TypeNameHandling.None){StructMultiKey<string?,string>typeNameKey=ReflectionUtils.SplitFullyQualifiedTypeName(qualifiedTypeName);Type specifiedType;try{specifiedType=SD._serializationBinder.BindToType(typeNameKey.Value1,typeNameKey.Value2);}catch(Exception ex){throw JsonSerializationException.Create(reader,"Error resolving type specified in JSON '{0}'.".FormatWith(CultureInfo.InvariantCulture,qualifiedTypeName),ex);}if(specifiedType==null){throw JsonSerializationException.Create(reader,"Type specified in JSON '{0}' was not resolved.".FormatWith(CultureInfo.InvariantCulture,qualifiedTypeName));}if(TraceWriter!=null&&TraceWriter.LevelFilter>=TraceLevel.Verbose){TraceWriter.Trace(TraceLevel.Verbose,JsonPosition.FormatMessage(reader as IJsonLineInfo,reader.Path,"Resolved type '{0}' to {1}.".FormatWith(CultureInfo.InvariantCulture,qualifiedTypeName,specifiedType)),null);}if(objectType!=null
#if HAVE_DYNAMIC
&&objectType!=typeof(IDynamicMetaObjectProvider)
#endif
&&!objectType.IsAssignableFrom(specifiedType)){throw JsonSerializationException.Create(reader,"Type specified in JSON '{0}' is not compatible with '{1}'.".FormatWith(CultureInfo.InvariantCulture,specifiedType.AssemblyQualifiedName,objectType.AssemblyQualifiedName));}objectType=specifiedType;contract=GetContract(specifiedType);}}private JsonArrayContract EnsureArrayContract(JsonReader reader,Type objectType,JsonContract contract){if(contract==null){throw JsonSerializationException.Create(reader,"Could not resolve type '{0}' to a JsonContract.".FormatWith(CultureInfo.InvariantCulture,objectType));}if(!(contract is JsonArrayContract arrayContract)){string message=@"Cannot deserialize the current JSON array (e.g. [1,2,3]) into type '{0}' because the type requires a {1} to deserialize correctly."+Environment.NewLine+@"To fix this error either change the JSON to a {1} or change the deserialized type to an array or a type that implements a collection interface (e.g. ICollection, IList) like List<T> that can be deserialized from a JSON array. JsonArrayAttribute can also be added to the type to force it to deserialize from a JSON array."+Environment.NewLine;message=message.FormatWith(CultureInfo.InvariantCulture,objectType,GetExpectedDescription(contract));throw JsonSerializationException.Create(reader,message);}return arrayContract;}private object?CreateList(JsonReader reader,Type?objectType,JsonContract?contract,JsonProperty?member,object?existingValue,string?id){object?value;if(HasNoDefinedType(contract)){return CreateJToken(reader,contract);}MiscellaneousUtils.Assert(objectType!=null);MiscellaneousUtils.Assert(contract!=null);JsonArrayContract arrayContract=EnsureArrayContract(reader,objectType,contract);if(existingValue==null){IList list=CreateNewList(reader,arrayContract,out bool createdFromNonDefaultCreator);if(createdFromNonDefaultCreator){if(id!=null){throw JsonSerializationException.Create(reader,"Cannot preserve reference to array or readonly list, or list created from a non-default constructor: {0}.".FormatWith(CultureInfo.InvariantCulture,contract.UnderlyingType));}if(contract.OnSerializingCallbacks.Count>0){throw JsonSerializationException.Create(reader,"Cannot call OnSerializing on an array or readonly list, or list created from a non-default constructor: {0}.".FormatWith(CultureInfo.InvariantCulture,contract.UnderlyingType));}if(contract.OnErrorCallbacks.Count>0){throw JsonSerializationException.Create(reader,"Cannot call OnError on an array or readonly list, or list created from a non-default constructor: {0}.".FormatWith(CultureInfo.InvariantCulture,contract.UnderlyingType));}if(!arrayContract.HasParameterizedCreatorInternal&&!arrayContract.IsArray){throw JsonSerializationException.Create(reader,"Cannot deserialize readonly or fixed size list: {0}.".FormatWith(CultureInfo.InvariantCulture,contract.UnderlyingType));}}if(!arrayContract.IsMultidimensionalArray){PopulateList(list,reader,arrayContract,member,id);}else{PopulateMultidimensionalArray(list,reader,arrayContract,member,id);}if(createdFromNonDefaultCreator){if(arrayContract.IsMultidimensionalArray){list=CollectionUtils.ToMultidimensionalArray(list,arrayContract.CollectionItemType!,contract.CreatedType.GetArrayRank());}else if(arrayContract.IsArray){Array a=Array.CreateInstance(arrayContract.CollectionItemType,list.Count);list.CopyTo(a,0);list=a;}else{ObjectConstructor<object>creator=(arrayContract.OverrideCreator??arrayContract.ParameterizedCreator)!;return creator(list);}}else if(list is IWrappedCollection wrappedCollection){return wrappedCollection.UnderlyingCollection;}value=list;}else{if(!arrayContract.CanDeserialize){throw JsonSerializationException.Create(reader,"Cannot populate list type {0}.".FormatWith(CultureInfo.InvariantCulture,contract.CreatedType));}value=PopulateList((arrayContract.ShouldCreateWrapper||!(existingValue is IList list))?arrayContract.CreateWrapper(existingValue):list,reader,arrayContract,member,id);}return value;}private bool HasNoDefinedType(JsonContract?contract){return(contract==null||contract.UnderlyingType==typeof(object)||contract.ContractType==JsonContractType.Linq
#if HAVE_DYNAMIC
||contract.UnderlyingType==typeof(IDynamicMetaObjectProvider)
#endif
);}private object?EnsureType(JsonReader reader,object?value,CultureInfo culture,JsonContract?contract,Type?targetType){if(targetType==null){return value;}MiscellaneousUtils.Assert(contract!=null);Type?valueType=ReflectionUtils.GetObjectType(value);if(valueType!=targetType){if(value==null&&contract.IsNullable){return null;}try{if(contract.IsConvertable){JsonPrimitiveContract primitiveContract=(JsonPrimitiveContract)contract;if(contract.IsEnum){if(value is string s){return EnumUtils.ParseEnum(contract.NonNullableUnderlyingType,null,s,false);}if(ConvertUtils.IsInteger(primitiveContract.TypeCode)){return Enum.ToObject(contract.NonNullableUnderlyingType,value);}}else if(contract.NonNullableUnderlyingType==typeof(DateTime)){if(value is string s&&DateTimeUtils.TryParseDateTime(s,reader.DateTimeZoneHandling,reader.DateFormatString,reader.Culture,out DateTime dt)){return DateTimeUtils.EnsureDateTime(dt,reader.DateTimeZoneHandling);}}
#if HAVE_BIG_INTEGER
if(value is BigInteger integer){return ConvertUtils.FromBigInteger(integer,contract.NonNullableUnderlyingType);}
#endif
return Convert.ChangeType(value,contract.NonNullableUnderlyingType,culture);}return ConvertUtils.ConvertOrCast(value,culture,contract.NonNullableUnderlyingType);}catch(Exception ex){throw JsonSerializationException.Create(reader,"Error converting value {0} to type '{1}'.".FormatWith(CultureInfo.InvariantCulture,MiscellaneousUtils.ToString(value),targetType),ex);}}return value;}private bool SetPropertyValue(JsonProperty property,JsonConverter?propertyConverter,JsonContainerContract?containerContract,JsonProperty?containerProperty,JsonReader reader,object target){bool skipSettingProperty=CalculatePropertyDetails(property,ref propertyConverter,containerContract,containerProperty,reader,target,out bool useExistingValue,out object?currentValue,out JsonContract?propertyContract,out bool gottenCurrentValue,out bool ignoredValue);if(skipSettingProperty){if(ignoredValue){return true;}return false;}object?value;if(propertyConverter!=null&&propertyConverter.CanRead){if(!gottenCurrentValue&&property.Readable){currentValue=property.ValueProvider!.GetValue(target);}value=DeserializeConvertable(propertyConverter,reader,property.PropertyType!,currentValue);}else{value=CreateValueInternal(reader,property.PropertyType,propertyContract,property,containerContract,containerProperty,(useExistingValue)?currentValue:null);}if((!useExistingValue||value!=currentValue)&&ShouldSetPropertyValue(property,containerContract as JsonObjectContract,value)){property.ValueProvider!.SetValue(target,value);if(property.SetIsSpecified!=null){if(TraceWriter!=null&&TraceWriter.LevelFilter>=TraceLevel.Verbose){TraceWriter.Trace(TraceLevel.Verbose,JsonPosition.FormatMessage(reader as IJsonLineInfo,reader.Path,"IsSpecified for property '{0}' on {1} set to true.".FormatWith(CultureInfo.InvariantCulture,property.PropertyName,property.DeclaringType)),null);}property.SetIsSpecified(target,true);}return true;}return useExistingValue;}private bool CalculatePropertyDetails(JsonProperty property,ref JsonConverter?propertyConverter,JsonContainerContract?containerContract,JsonProperty?containerProperty,JsonReader reader,object target,out bool useExistingValue,out object?currentValue,out JsonContract?propertyContract,out bool gottenCurrentValue,out bool ignoredValue){currentValue=null;useExistingValue=false;propertyContract=null;gottenCurrentValue=false;ignoredValue=false;if(property.Ignored){return true;}JsonToken tokenType=reader.TokenType;if(property.PropertyContract==null){property.PropertyContract=GetContractSafe(property.PropertyType);}ObjectCreationHandling objectCreationHandling=property.ObjectCreationHandling.GetValueOrDefault(SD._objectCreationHandling);if((objectCreationHandling!=ObjectCreationHandling.Replace)&&(tokenType==JsonToken.StartArray||tokenType==JsonToken.StartObject||propertyConverter!=null)&&property.Readable&&property.PropertyContract?.ContractType!=JsonContractType.Linq){currentValue=property.ValueProvider!.GetValue(target);gottenCurrentValue=true;if(currentValue!=null){propertyContract=GetContract(currentValue.GetType());useExistingValue=(!propertyContract.IsReadOnlyOrFixedSize&&!propertyContract.UnderlyingType.IsValueType());}}if(!property.Writable&&!useExistingValue){if(TraceWriter!=null&&TraceWriter.LevelFilter>=TraceLevel.Info){TraceWriter.Trace(TraceLevel.Info,JsonPosition.FormatMessage(reader as IJsonLineInfo,reader.Path,"Unable to deserialize value to non-writable property '{0}' on {1}.".FormatWith(CultureInfo.InvariantCulture,property.PropertyName,property.DeclaringType)),null);}return true;}if(tokenType==JsonToken.Null&&ResolvedNullValueHandling(containerContract as JsonObjectContract,property)==NullValueHandling.Ignore){ignoredValue=true;return true;}if(HasFlag(property.DefaultValueHandling.GetValueOrDefault(SD._defaultValueHandling),DefaultValueHandling.Ignore)&&!HasFlag(property.DefaultValueHandling.GetValueOrDefault(SD._defaultValueHandling),DefaultValueHandling.Populate)&&JsonTokenUtils.IsPrimitiveToken(tokenType)&&MiscellaneousUtils.ValueEquals(reader.Value,property.GetResolvedDefaultValue())){ignoredValue=true;return true;}if(currentValue==null){propertyContract=property.PropertyContract;}else{propertyContract=GetContract(currentValue.GetType());if(propertyContract!=property.PropertyContract){propertyConverter=GetConverter(propertyContract,property.Converter,containerContract,containerProperty);}}return false;}private void AddReference(JsonReader reader,string id,object value){try{if(TraceWriter!=null&&TraceWriter.LevelFilter>=TraceLevel.Verbose){TraceWriter.Trace(TraceLevel.Verbose,JsonPosition.FormatMessage(reader as IJsonLineInfo,reader.Path,"Read object reference Id '{0}' for {1}.".FormatWith(CultureInfo.InvariantCulture,id,value.GetType())),null);}SD.GetReferenceResolver().AddReference(this,id,value);}catch(Exception ex){throw JsonSerializationException.Create(reader,"Error reading object reference '{0}'.".FormatWith(CultureInfo.InvariantCulture,id),ex);}}private bool HasFlag(DefaultValueHandling value,DefaultValueHandling flag){return((value&flag)==flag);}private bool ShouldSetPropertyValue(JsonProperty property,JsonObjectContract?contract,object?value){if(value==null&&ResolvedNullValueHandling(contract,property)==NullValueHandling.Ignore){return false;}if(HasFlag(property.DefaultValueHandling.GetValueOrDefault(SD._defaultValueHandling),DefaultValueHandling.Ignore)&&!HasFlag(property.DefaultValueHandling.GetValueOrDefault(SD._defaultValueHandling),DefaultValueHandling.Populate)&&MiscellaneousUtils.ValueEquals(value,property.GetResolvedDefaultValue())){return false;}if(!property.Writable){return false;}return true;}private IList CreateNewList(JsonReader reader,JsonArrayContract contract,out bool createdFromNonDefaultCreator){if(!contract.CanDeserialize){throw JsonSerializationException.Create(reader,"Cannot create and populate list type {0}.".FormatWith(CultureInfo.InvariantCulture,contract.CreatedType));}if(contract.OverrideCreator!=null){if(contract.HasParameterizedCreator){createdFromNonDefaultCreator=true;return contract.CreateTemporaryCollection();}else{object list=contract.OverrideCreator();if(contract.ShouldCreateWrapper){list=contract.CreateWrapper(list);}createdFromNonDefaultCreator=false;return(IList)list;}}else if(contract.IsReadOnlyOrFixedSize){createdFromNonDefaultCreator=true;IList list=contract.CreateTemporaryCollection();if(contract.ShouldCreateWrapper){list=contract.CreateWrapper(list);}return list;}else if(contract.DefaultCreator!=null&&(!contract.DefaultCreatorNonPublic||SD._constructorHandling==ConstructorHandling.AllowNonPublicDefaultConstructor)){object list=contract.DefaultCreator();if(contract.ShouldCreateWrapper){list=contract.CreateWrapper(list);}createdFromNonDefaultCreator=false;return(IList)list;}else if(contract.HasParameterizedCreatorInternal){createdFromNonDefaultCreator=true;return contract.CreateTemporaryCollection();}else{if(!contract.IsInstantiable){throw JsonSerializationException.Create(reader,"Could not create an instance of type {0}. Type is an interface or abstract class and cannot be instantiated.".FormatWith(CultureInfo.InvariantCulture,contract.UnderlyingType));}throw JsonSerializationException.Create(reader,"Unable to find a constructor to use for type {0}.".FormatWith(CultureInfo.InvariantCulture,contract.UnderlyingType));}}private IDictionary CreateNewDictionary(JsonReader reader,JsonDictionaryContract contract,out bool createdFromNonDefaultCreator){if(contract.OverrideCreator!=null){if(contract.HasParameterizedCreator){createdFromNonDefaultCreator=true;return contract.CreateTemporaryDictionary();}else{createdFromNonDefaultCreator=false;return(IDictionary)contract.OverrideCreator();}}else if(contract.IsReadOnlyOrFixedSize){createdFromNonDefaultCreator=true;return contract.CreateTemporaryDictionary();}else if(contract.DefaultCreator!=null&&(!contract.DefaultCreatorNonPublic||SD._constructorHandling==ConstructorHandling.AllowNonPublicDefaultConstructor)){object dictionary=contract.DefaultCreator();if(contract.ShouldCreateWrapper){dictionary=contract.CreateWrapper(dictionary);}createdFromNonDefaultCreator=false;return(IDictionary)dictionary;}else if(contract.HasParameterizedCreatorInternal){createdFromNonDefaultCreator=true;return contract.CreateTemporaryDictionary();}else{if(!contract.IsInstantiable){throw JsonSerializationException.Create(reader,"Could not create an instance of type {0}. Type is an interface or abstract class and cannot be instantiated.".FormatWith(CultureInfo.InvariantCulture,contract.UnderlyingType));}throw JsonSerializationException.Create(reader,"Unable to find a default constructor to use for type {0}.".FormatWith(CultureInfo.InvariantCulture,contract.UnderlyingType));}}private void OnDeserializing(JsonReader reader,JsonContract contract,object value){if(TraceWriter!=null&&TraceWriter.LevelFilter>=TraceLevel.Info){TraceWriter.Trace(TraceLevel.Info,JsonPosition.FormatMessage(reader as IJsonLineInfo,reader.Path,"Started deserializing {0}".FormatWith(CultureInfo.InvariantCulture,contract.UnderlyingType)),null);}contract.InvokeOnDeserializing(value,SD._context);}private void OnDeserialized(JsonReader reader,JsonContract contract,object value){if(TraceWriter!=null&&TraceWriter.LevelFilter>=TraceLevel.Info){TraceWriter.Trace(TraceLevel.Info,JsonPosition.FormatMessage(reader as IJsonLineInfo,reader.Path,"Finished deserializing {0}".FormatWith(CultureInfo.InvariantCulture,contract.UnderlyingType)),null);}contract.InvokeOnDeserialized(value,SD._context);}private object PopulateDictionary(IDictionary dictionary,JsonReader reader,JsonDictionaryContract contract,JsonProperty?containerProperty,string?id){object underlyingDictionary=dictionary is IWrappedDictionary wrappedDictionary?wrappedDictionary.UnderlyingDictionary:dictionary;if(id!=null){AddReference(reader,id,underlyingDictionary);}OnDeserializing(reader,contract,underlyingDictionary);int initialDepth=reader.Depth;if(contract.KeyContract==null){contract.KeyContract=GetContractSafe(contract.DictionaryKeyType);}if(contract.ItemContract==null){contract.ItemContract=GetContractSafe(contract.DictionaryValueType);}JsonConverter?dictionaryValueConverter=contract.ItemConverter??GetConverter(contract.ItemContract,null,contract,containerProperty);PrimitiveTypeCode keyTypeCode=(contract.KeyContract is JsonPrimitiveContract keyContract)?keyContract.TypeCode:PrimitiveTypeCode.Empty;bool finished=false;do{switch(reader.TokenType){case JsonToken.PropertyName:object keyValue=reader.Value!;if(CheckPropertyName(reader,keyValue.ToString())){continue;}try{try{switch(keyTypeCode){case PrimitiveTypeCode.DateTime:case PrimitiveTypeCode.DateTimeNullable:{keyValue=DateTimeUtils.TryParseDateTime(keyValue.ToString(),reader.DateTimeZoneHandling,reader.DateFormatString,reader.Culture,out DateTime dt)?dt:EnsureType(reader,keyValue,CultureInfo.InvariantCulture,contract.KeyContract,contract.DictionaryKeyType)!;break;}
#if HAVE_DATE_TIME_OFFSET
case PrimitiveTypeCode.DateTimeOffset:case PrimitiveTypeCode.DateTimeOffsetNullable:{keyValue=DateTimeUtils.TryParseDateTimeOffset(keyValue.ToString(),reader.DateFormatString,reader.Culture,out DateTimeOffset dt)?dt:EnsureType(reader,keyValue,CultureInfo.InvariantCulture,contract.KeyContract,contract.DictionaryKeyType)!;break;}
#endif
default:keyValue=contract.KeyContract!=null&&contract.KeyContract.IsEnum?EnumUtils.ParseEnum(contract.KeyContract.NonNullableUnderlyingType,(SD._contractResolver as DefaultContractResolver)?.NamingStrategy,keyValue.ToString(),false):EnsureType(reader,keyValue,CultureInfo.InvariantCulture,contract.KeyContract,contract.DictionaryKeyType)!;break;}}catch(Exception ex){throw JsonSerializationException.Create(reader,"Could not convert string '{0}' to dictionary key type '{1}'. Create a TypeConverter to convert from the string to the key type object.".FormatWith(CultureInfo.InvariantCulture,reader.Value,contract.DictionaryKeyType),ex);}if(!reader.ReadForType(contract.ItemContract,dictionaryValueConverter!=null)){throw JsonSerializationException.Create(reader,"Unexpected end when deserializing object.");}object?itemValue;if(dictionaryValueConverter!=null&&dictionaryValueConverter.CanRead){itemValue=DeserializeConvertable(dictionaryValueConverter,reader,contract.DictionaryValueType!,null);}else{itemValue=CreateValueInternal(reader,contract.DictionaryValueType,contract.ItemContract,null,contract,containerProperty,null);}dictionary[keyValue]=itemValue;}catch(Exception ex){if(IsErrorHandled(underlyingDictionary,contract,keyValue,reader as IJsonLineInfo,reader.Path,ex)){HandleError(reader,true,initialDepth);}else{throw;}}break;case JsonToken.Comment:break;case JsonToken.EndObject:finished=true;break;default:throw JsonSerializationException.Create(reader,"Unexpected token when deserializing object: "+reader.TokenType);}}while(!finished&&reader.Read());if(!finished){ThrowUnexpectedEndException(reader,contract,underlyingDictionary,"Unexpected end when deserializing object.");}OnDeserialized(reader,contract,underlyingDictionary);return underlyingDictionary;}private object PopulateMultidimensionalArray(IList list,JsonReader reader,JsonArrayContract contract,JsonProperty?containerProperty,string?id){int rank=contract.UnderlyingType.GetArrayRank();if(id!=null){AddReference(reader,id,list);}OnDeserializing(reader,contract,list);JsonContract?collectionItemContract=GetContractSafe(contract.CollectionItemType);JsonConverter?collectionItemConverter=GetConverter(collectionItemContract,null,contract,containerProperty);int?previousErrorIndex=null;Stack<IList>listStack=new Stack<IList>();listStack.Push(list);IList currentList=list;bool finished=false;do{int initialDepth=reader.Depth;if(listStack.Count==rank){try{if(reader.ReadForType(collectionItemContract,collectionItemConverter!=null)){switch(reader.TokenType){case JsonToken.EndArray:listStack.Pop();currentList=listStack.Peek();previousErrorIndex=null;break;case JsonToken.Comment:break;default:object?value;if(collectionItemConverter!=null&&collectionItemConverter.CanRead){value=DeserializeConvertable(collectionItemConverter,reader,contract.CollectionItemType!,null);}else{value=CreateValueInternal(reader,contract.CollectionItemType,collectionItemContract,null,contract,containerProperty,null);}currentList.Add(value);break;}}else{break;}}catch(Exception ex){JsonPosition errorPosition=reader.GetPosition(initialDepth);if(IsErrorHandled(list,contract,errorPosition.Position,reader as IJsonLineInfo,reader.Path,ex)){HandleError(reader,true,initialDepth+1);if(previousErrorIndex!=null&&previousErrorIndex==errorPosition.Position){throw JsonSerializationException.Create(reader,"Infinite loop detected from error handling.",ex);}else{previousErrorIndex=errorPosition.Position;}}else{throw;}}}else{if(reader.Read()){switch(reader.TokenType){case JsonToken.StartArray:IList newList=new List<object>();currentList.Add(newList);listStack.Push(newList);currentList=newList;break;case JsonToken.EndArray:listStack.Pop();if(listStack.Count>0){currentList=listStack.Peek();}else{finished=true;}break;case JsonToken.Comment:break;default:throw JsonSerializationException.Create(reader,"Unexpected token when deserializing multidimensional array: "+reader.TokenType);}}else{break;}}}while(!finished);if(!finished){ThrowUnexpectedEndException(reader,contract,list,"Unexpected end when deserializing array.");}OnDeserialized(reader,contract,list);return list;}private void ThrowUnexpectedEndException(JsonReader reader,JsonContract contract,object?currentObject,string message){try{throw JsonSerializationException.Create(reader,message);}catch(Exception ex){if(IsErrorHandled(currentObject,contract,null,reader as IJsonLineInfo,reader.Path,ex)){HandleError(reader,false,0);}else{throw;}}}private object PopulateList(IList list,JsonReader reader,JsonArrayContract contract,JsonProperty?containerProperty,string?id){
object underlyingList=list is IWrappedCollection wrappedCollection?wrappedCollection.UnderlyingCollection:list;if(id!=null){AddReference(reader,id,underlyingList);}if(list.IsFixedSize){reader.Skip();return underlyingList;}OnDeserializing(reader,contract,underlyingList);int initialDepth=reader.Depth;if(contract.ItemContract==null){contract.ItemContract=GetContractSafe(contract.CollectionItemType);}JsonConverter?collectionItemConverter=GetConverter(contract.ItemContract,null,contract,containerProperty);int?previousErrorIndex=null;bool finished=false;do{try{if(reader.ReadForType(contract.ItemContract,collectionItemConverter!=null)){switch(reader.TokenType){case JsonToken.EndArray:finished=true;break;case JsonToken.Comment:break;default:object?value;if(collectionItemConverter!=null&&collectionItemConverter.CanRead){value=DeserializeConvertable(collectionItemConverter,reader,contract.CollectionItemType,null);}else{value=CreateValueInternal(reader,contract.CollectionItemType,contract.ItemContract,null,contract,containerProperty,null);}list.Add(value);break;}}else{break;}}catch(Exception ex){JsonPosition errorPosition=reader.GetPosition(initialDepth);if(IsErrorHandled(underlyingList,contract,errorPosition.Position,reader as IJsonLineInfo,reader.Path,ex)){HandleError(reader,true,initialDepth+1);if(previousErrorIndex!=null&&previousErrorIndex==errorPosition.Position){throw JsonSerializationException.Create(reader,"Infinite loop detected from error handling.",ex);}else{previousErrorIndex=errorPosition.Position;}}else{throw;}}}while(!finished);if(!finished){ThrowUnexpectedEndException(reader,contract,underlyingList,"Unexpected end when deserializing array.");}OnDeserialized(reader,contract,underlyingList);return underlyingList;
}
#if HAVE_BINARY_SERIALIZATION
private object CreateISerializable(JsonReader reader,JsonISerializableContract contract,JsonProperty?member,string?id){Type objectType=contract.UnderlyingType;if(!JsonTypeReflector.FullyTrusted){string message=@"Type '{0}' implements ISerializable but cannot be deserialized using the ISerializable interface because the current application is not fully trusted and ISerializable can expose secure data."+Environment.NewLine+@"To fix this error either change the environment to be fully trusted, change the application to not deserialize the type, add JsonObjectAttribute to the type or change the JsonSerializer setting ContractResolver to use a new DefaultContractResolver with IgnoreSerializableInterface set to true."+Environment.NewLine;message=message.FormatWith(CultureInfo.InvariantCulture,objectType);throw JsonSerializationException.Create(reader,message);}if(TraceWriter!=null&&TraceWriter.LevelFilter>=TraceLevel.Info){TraceWriter.Trace(TraceLevel.Info,JsonPosition.FormatMessage(reader as IJsonLineInfo,reader.Path,"Deserializing {0} using ISerializable constructor.".FormatWith(CultureInfo.InvariantCulture,contract.UnderlyingType)),null);}SerializationInfo serializationInfo=new SerializationInfo(contract.UnderlyingType,new JsonFormatterConverter(this,contract,member));bool finished=false;do{switch(reader.TokenType){case JsonToken.PropertyName:string memberName=reader.Value!.ToString();if(!reader.Read()){throw JsonSerializationException.Create(reader,"Unexpected end when setting {0}'s value.".FormatWith(CultureInfo.InvariantCulture,memberName));}serializationInfo.AddValue(memberName,JToken.ReadFrom(reader));break;case JsonToken.Comment:break;case JsonToken.EndObject:finished=true;break;default:throw JsonSerializationException.Create(reader,"Unexpected token when deserializing object: "+reader.TokenType);}}while(!finished&&reader.Read());if(!finished){ThrowUnexpectedEndException(reader,contract,serializationInfo,"Unexpected end when deserializing object.");}if(!contract.IsInstantiable){throw JsonSerializationException.Create(reader,"Could not create an instance of type {0}. Type is an interface or abstract class and cannot be instantiated.".FormatWith(CultureInfo.InvariantCulture,contract.UnderlyingType));}if(contract.ISerializableCreator==null){throw JsonSerializationException.Create(reader,"ISerializable type '{0}' does not have a valid constructor. To correctly implement ISerializable a constructor that takes SerializationInfo and StreamingContext parameters should be present.".FormatWith(CultureInfo.InvariantCulture,objectType));}object createdObject=contract.ISerializableCreator(serializationInfo,SD._context);if(id!=null){AddReference(reader,id,createdObject);}OnDeserializing(reader,contract,createdObject);OnDeserialized(reader,contract,createdObject);return createdObject;}internal object?CreateISerializableItem(JToken token,Type type,JsonISerializableContract contract,JsonProperty?member){JsonContract?itemContract=GetContractSafe(type);JsonConverter?itemConverter=GetConverter(itemContract,null,contract,member);JsonReader tokenReader=token.CreateReader();tokenReader.ReadAndAssert();object?result;if(itemConverter!=null&&itemConverter.CanRead){result=DeserializeConvertable(itemConverter,tokenReader,type,null);}else{result=CreateValueInternal(tokenReader,type,itemContract,null,contract,member,null);}return result;}
#endif
#if HAVE_DYNAMIC
private object CreateDynamic(JsonReader reader,JsonDynamicContract contract,JsonProperty?member,string?id){IDynamicMetaObjectProvider newObject;if(!contract.IsInstantiable){throw JsonSerializationException.Create(reader,"Could not create an instance of type {0}. Type is an interface or abstract class and cannot be instantiated.".FormatWith(CultureInfo.InvariantCulture,contract.UnderlyingType));}if(contract.DefaultCreator!=null&&(!contract.DefaultCreatorNonPublic||SD._constructorHandling==ConstructorHandling.AllowNonPublicDefaultConstructor)){newObject=(IDynamicMetaObjectProvider)contract.DefaultCreator();}else{throw JsonSerializationException.Create(reader,"Unable to find a default constructor to use for type {0}.".FormatWith(CultureInfo.InvariantCulture,contract.UnderlyingType));}if(id!=null){AddReference(reader,id,newObject);}OnDeserializing(reader,contract,newObject);int initialDepth=reader.Depth;bool finished=false;do{switch(reader.TokenType){case JsonToken.PropertyName:string memberName=reader.Value!.ToString();try{if(!reader.Read()){throw JsonSerializationException.Create(reader,"Unexpected end when setting {0}'s value.".FormatWith(CultureInfo.InvariantCulture,memberName));}JsonProperty?property=contract.Properties.GetClosestMatchProperty(memberName);if(property!=null&&property.Writable&&!property.Ignored){if(property.PropertyContract==null){property.PropertyContract=GetContractSafe(property.PropertyType);}JsonConverter?propertyConverter=GetConverter(property.PropertyContract,property.Converter,null,null);if(!SetPropertyValue(property,propertyConverter,null,member,reader,newObject)){reader.Skip();}}else{Type t=(JsonTokenUtils.IsPrimitiveToken(reader.TokenType))?reader.ValueType!:typeof(IDynamicMetaObjectProvider);JsonContract?dynamicMemberContract=GetContractSafe(t);JsonConverter?dynamicMemberConverter=GetConverter(dynamicMemberContract,null,null,member);object?value;if(dynamicMemberConverter!=null&&dynamicMemberConverter.CanRead){value=DeserializeConvertable(dynamicMemberConverter!,reader,t,null);}else{value=CreateValueInternal(reader,t,dynamicMemberContract,null,null,member,null);}contract.TrySetMember(newObject,memberName,value);}}catch(Exception ex){if(IsErrorHandled(newObject,contract,memberName,reader as IJsonLineInfo,reader.Path,ex)){HandleError(reader,true,initialDepth);}else{throw;}}break;case JsonToken.EndObject:finished=true;break;default:throw JsonSerializationException.Create(reader,"Unexpected token when deserializing object: "+reader.TokenType);}}while(!finished&&reader.Read());if(!finished){ThrowUnexpectedEndException(reader,contract,newObject,"Unexpected end when deserializing object.");}OnDeserialized(reader,contract,newObject);return newObject;}
#endif
internal class CreatorPropertyContext{public readonly string Name;public JsonProperty?Property;public JsonProperty?ConstructorProperty;public PropertyPresence?Presence;public object?Value;public bool Used;public CreatorPropertyContext(string name){Name=name;}}private object CreateObjectUsingCreatorWithParameters(JsonReader reader,JsonObjectContract contract,JsonProperty?containerProperty,ObjectConstructor<object>creator,string?id){ValidationUtils.ArgumentNotNull(creator,nameof(creator));bool trackPresence=(contract.HasRequiredOrDefaultValueProperties||HasFlag(SD._defaultValueHandling,DefaultValueHandling.Populate));Type objectType=contract.UnderlyingType;if(TraceWriter!=null&&TraceWriter.LevelFilter>=TraceLevel.Info){string parameters=string.Join(", ",contract.CreatorParameters.Select(p=>p.PropertyName)
#if !HAVE_STRING_JOIN_WITH_ENUMERABLE
.ToArray()
#endif
);TraceWriter.Trace(TraceLevel.Info,JsonPosition.FormatMessage(reader as IJsonLineInfo,reader.Path,"Deserializing {0} using creator with parameters: {1}.".FormatWith(CultureInfo.InvariantCulture,contract.UnderlyingType,parameters)),null);}List<CreatorPropertyContext>propertyContexts=ResolvePropertyAndCreatorValues(contract,containerProperty,reader,objectType);if(trackPresence){foreach(JsonProperty property in contract.Properties){if(!property.Ignored){if(propertyContexts.All(p=>p.Property!=property)){propertyContexts.Add(new CreatorPropertyContext(property.PropertyName!){Property=property,Presence=PropertyPresence.None});}}}}object?[]creatorParameterValues=new object?[contract.CreatorParameters.Count];foreach(CreatorPropertyContext context in propertyContexts){if(trackPresence){if(context.Property!=null&&context.Presence==null){object?v=context.Value;PropertyPresence propertyPresence;if(v==null){propertyPresence=PropertyPresence.Null;}else if(v is string s){propertyPresence=CoerceEmptyStringToNull(context.Property.PropertyType,context.Property.PropertyContract,s)?PropertyPresence.Null:PropertyPresence.Value;}else{propertyPresence=PropertyPresence.Value;}context.Presence=propertyPresence;}}JsonProperty?constructorProperty=context.ConstructorProperty;if(constructorProperty==null&&context.Property!=null){constructorProperty=contract.CreatorParameters.ForgivingCaseSensitiveFind(p=>p.PropertyName!,context.Property.UnderlyingName!);}if(constructorProperty!=null&&!constructorProperty.Ignored){if(trackPresence){if(context.Presence==PropertyPresence.None||context.Presence==PropertyPresence.Null){if(constructorProperty.PropertyContract==null){constructorProperty.PropertyContract=GetContractSafe(constructorProperty.PropertyType);}if(HasFlag(constructorProperty.DefaultValueHandling.GetValueOrDefault(SD._defaultValueHandling),DefaultValueHandling.Populate)){context.Value=EnsureType(reader,constructorProperty.GetResolvedDefaultValue(),CultureInfo.InvariantCulture,constructorProperty.PropertyContract!,constructorProperty.PropertyType);}}}int i=contract.CreatorParameters.IndexOf(constructorProperty);creatorParameterValues[i]=context.Value;context.Used=true;}}object createdObject=creator(creatorParameterValues);if(id!=null){AddReference(reader,id,createdObject);}OnDeserializing(reader,contract,createdObject);foreach(CreatorPropertyContext context in propertyContexts){if(context.Used||context.Property==null||context.Property.Ignored||context.Presence==PropertyPresence.None){continue;}JsonProperty property=context.Property;object?value=context.Value;if(ShouldSetPropertyValue(property,contract,value)){property.ValueProvider!.SetValue(createdObject,value);context.Used=true;}else if(!property.Writable&&value!=null){JsonContract propertyContract=SD._contractResolver.ResolveContract(property.PropertyType!);if(propertyContract.ContractType==JsonContractType.Array){JsonArrayContract propertyArrayContract=(JsonArrayContract)propertyContract;if(propertyArrayContract.CanDeserialize&&!propertyArrayContract.IsReadOnlyOrFixedSize){object?createdObjectCollection=property.ValueProvider!.GetValue(createdObject);if(createdObjectCollection!=null){propertyArrayContract=(JsonArrayContract)GetContract(createdObjectCollection.GetType());IList createdObjectCollectionWrapper=(propertyArrayContract.ShouldCreateWrapper)?propertyArrayContract.CreateWrapper(createdObjectCollection):(IList)createdObjectCollection;if(!createdObjectCollectionWrapper.IsFixedSize){IList newValues=(propertyArrayContract.ShouldCreateWrapper)?propertyArrayContract.CreateWrapper(value):(IList)value;foreach(object newValue in newValues){createdObjectCollectionWrapper.Add(newValue);}}}}}else if(propertyContract.ContractType==JsonContractType.Dictionary){JsonDictionaryContract dictionaryContract=(JsonDictionaryContract)propertyContract;if(!dictionaryContract.IsReadOnlyOrFixedSize){object?createdObjectDictionary=property.ValueProvider!.GetValue(createdObject);if(createdObjectDictionary!=null){IDictionary targetDictionary=(dictionaryContract.ShouldCreateWrapper)?dictionaryContract.CreateWrapper(createdObjectDictionary):(IDictionary)createdObjectDictionary;IDictionary newValues=(dictionaryContract.ShouldCreateWrapper)?dictionaryContract.CreateWrapper(value):(IDictionary)value;IDictionaryEnumerator e=newValues.GetEnumerator();try{while(e.MoveNext()){DictionaryEntry entry=e.Entry;targetDictionary[entry.Key]=entry.Value;}}finally{(e as IDisposable)?.Dispose();}}}}context.Used=true;}}if(contract.ExtensionDataSetter!=null){foreach(CreatorPropertyContext propertyValue in propertyContexts){if(!propertyValue.Used&&propertyValue.Presence!=PropertyPresence.None){contract.ExtensionDataSetter(createdObject,propertyValue.Name,propertyValue.Value);}}}if(trackPresence){foreach(CreatorPropertyContext context in propertyContexts){if(context.Property==null){continue;}EndProcessProperty(createdObject,reader,contract,reader.Depth,context.Property,context.Presence.GetValueOrDefault(),!context.Used);}}OnDeserialized(reader,contract,createdObject);return createdObject;}private object?DeserializeConvertable(JsonConverter converter,JsonReader reader,Type objectType,object?existingValue){if(TraceWriter!=null&&TraceWriter.LevelFilter>=TraceLevel.Info){TraceWriter.Trace(TraceLevel.Info,JsonPosition.FormatMessage(reader as IJsonLineInfo,reader.Path,"Started deserializing {0} with converter {1}.".FormatWith(CultureInfo.InvariantCulture,objectType,converter.GetType())),null);}object?value=converter.ReadJson(reader,objectType,existingValue,GetInternalSD());if(TraceWriter!=null&&TraceWriter.LevelFilter>=TraceLevel.Info){TraceWriter.Trace(TraceLevel.Info,JsonPosition.FormatMessage(reader as IJsonLineInfo,reader.Path,"Finished deserializing {0} with converter {1}.".FormatWith(CultureInfo.InvariantCulture,objectType,converter.GetType())),null);}return value;}private List<CreatorPropertyContext>ResolvePropertyAndCreatorValues(JsonObjectContract contract,JsonProperty?containerProperty,JsonReader reader,Type objectType){List<CreatorPropertyContext>propertyValues=new List<CreatorPropertyContext>();bool exit=false;do{switch(reader.TokenType){case JsonToken.PropertyName:string memberName=reader.Value!.ToString();CreatorPropertyContext creatorPropertyContext=new CreatorPropertyContext(memberName){ConstructorProperty=contract.CreatorParameters.GetClosestMatchProperty(memberName),Property=contract.Properties.GetClosestMatchProperty(memberName)};propertyValues.Add(creatorPropertyContext);JsonProperty?property=creatorPropertyContext.ConstructorProperty??creatorPropertyContext.Property;if(property!=null){if(!property.Ignored){if(property.PropertyContract==null){property.PropertyContract=GetContractSafe(property.PropertyType);}JsonConverter?propertyConverter=GetConverter(property.PropertyContract,property.Converter,contract,containerProperty);if(!reader.ReadForType(property.PropertyContract,propertyConverter!=null)){throw JsonSerializationException.Create(reader,"Unexpected end when setting {0}'s value.".FormatWith(CultureInfo.InvariantCulture,memberName));}if(propertyConverter!=null&&propertyConverter.CanRead){creatorPropertyContext.Value=DeserializeConvertable(propertyConverter,reader,property.PropertyType!,null);}else{creatorPropertyContext.Value=CreateValueInternal(reader,property.PropertyType,property.PropertyContract,property,contract,containerProperty,null);}continue;}}else{if(!reader.Read()){throw JsonSerializationException.Create(reader,"Unexpected end when setting {0}'s value.".FormatWith(CultureInfo.InvariantCulture,memberName));}if(TraceWriter!=null&&TraceWriter.LevelFilter>=TraceLevel.Verbose){TraceWriter.Trace(TraceLevel.Verbose,JsonPosition.FormatMessage(reader as IJsonLineInfo,reader.Path,"Could not find member '{0}' on {1}.".FormatWith(CultureInfo.InvariantCulture,memberName,contract.UnderlyingType)),null);}if((contract.MissingMemberHandling??SD._missingMemberHandling)==MissingMemberHandling.Error){throw JsonSerializationException.Create(reader,"Could not find member '{0}' on object of type '{1}'".FormatWith(CultureInfo.InvariantCulture,memberName,objectType.Name));}}if(contract.ExtensionDataSetter!=null){creatorPropertyContext.Value=ReadExtensionDataValue(contract,containerProperty,reader);}else{reader.Skip();}break;case JsonToken.Comment:break;case JsonToken.EndObject:exit=true;break;default:throw JsonSerializationException.Create(reader,"Unexpected token when deserializing object: "+reader.TokenType);}}while(!exit&&reader.Read());if(!exit){ThrowUnexpectedEndException(reader,contract,null,"Unexpected end when deserializing object.");}return propertyValues;}public object CreateNewObject(JsonReader reader,JsonObjectContract objectContract,JsonProperty?containerMember,JsonProperty?containerProperty,string?id,out bool createdFromNonDefaultCreator){object?newObject=null;if(objectContract.OverrideCreator!=null){if(objectContract.CreatorParameters.Count>0){createdFromNonDefaultCreator=true;return CreateObjectUsingCreatorWithParameters(reader,objectContract,containerMember,objectContract.OverrideCreator,id);}newObject=objectContract.OverrideCreator(CollectionUtils.ArrayEmpty<object>());}else if(objectContract.DefaultCreator!=null&&(!objectContract.DefaultCreatorNonPublic||SD._constructorHandling==ConstructorHandling.AllowNonPublicDefaultConstructor||objectContract.ParameterizedCreator==null)){newObject=objectContract.DefaultCreator();}else if(objectContract.ParameterizedCreator!=null){createdFromNonDefaultCreator=true;return CreateObjectUsingCreatorWithParameters(reader,objectContract,containerMember,objectContract.ParameterizedCreator,id);}if(newObject==null){if(!objectContract.IsInstantiable){throw JsonSerializationException.Create(reader,"Could not create an instance of type {0}. Type is an interface or abstract class and cannot be instantiated.".FormatWith(CultureInfo.InvariantCulture,objectContract.UnderlyingType));}throw JsonSerializationException.Create(reader,"Unable to find a constructor to use for type {0}. A class should either have a default constructor, one constructor with arguments or a constructor marked with the JsonConstructor attribute.".FormatWith(CultureInfo.InvariantCulture,objectContract.UnderlyingType));}createdFromNonDefaultCreator=false;return newObject;}private object PopulateObject(object newObject,JsonReader reader,JsonObjectContract contract,JsonProperty?member,string?id){OnDeserializing(reader,contract,newObject);Dictionary<JsonProperty,PropertyPresence>?propertiesPresence=(contract.HasRequiredOrDefaultValueProperties||HasFlag(SD._defaultValueHandling,DefaultValueHandling.Populate))?contract.Properties.ToDictionary(m=>m,m=>PropertyPresence.None):null;if(id!=null){AddReference(reader,id,newObject);}int initialDepth=reader.Depth;bool finished=false;do{switch(reader.TokenType){case JsonToken.PropertyName:{string propertyName=reader.Value!.ToString();if(CheckPropertyName(reader,propertyName)){continue;}try{JsonProperty?property=contract.Properties.GetClosestMatchProperty(propertyName);if(property==null){if(TraceWriter!=null&&TraceWriter.LevelFilter>=TraceLevel.Verbose){TraceWriter.Trace(TraceLevel.Verbose,JsonPosition.FormatMessage(reader as IJsonLineInfo,reader.Path,"Could not find member '{0}' on {1}".FormatWith(CultureInfo.InvariantCulture,propertyName,contract.UnderlyingType)),null);}if((contract.MissingMemberHandling??SD._missingMemberHandling)==MissingMemberHandling.Error){throw JsonSerializationException.Create(reader,"Could not find member '{0}' on object of type '{1}'".FormatWith(CultureInfo.InvariantCulture,propertyName,contract.UnderlyingType.Name));}if(!reader.Read()){break;}SetExtensionData(contract,member,reader,propertyName,newObject);continue;}if(property.Ignored||!ShouldDeserialize(reader,property,newObject)){if(!reader.Read()){break;}SetPropertyPresence(reader,property,propertiesPresence);SetExtensionData(contract,member,reader,propertyName,newObject);}else{if(property.PropertyContract==null){property.PropertyContract=GetContractSafe(property.PropertyType);}JsonConverter?propertyConverter=GetConverter(property.PropertyContract,property.Converter,contract,member);if(!reader.ReadForType(property.PropertyContract,propertyConverter!=null)){throw JsonSerializationException.Create(reader,"Unexpected end when setting {0}'s value.".FormatWith(CultureInfo.InvariantCulture,propertyName));}SetPropertyPresence(reader,property,propertiesPresence);if(!SetPropertyValue(property,propertyConverter,contract,member,reader,newObject)){SetExtensionData(contract,member,reader,propertyName,newObject);}}}catch(Exception ex){if(IsErrorHandled(newObject,contract,propertyName,reader as IJsonLineInfo,reader.Path,ex)){HandleError(reader,true,initialDepth);}else{throw;}}break;}case JsonToken.EndObject:finished=true;break;case JsonToken.Comment:break;default:throw JsonSerializationException.Create(reader,"Unexpected token when deserializing object: "+reader.TokenType);}}while(!finished&&reader.Read());if(!finished){ThrowUnexpectedEndException(reader,contract,newObject,"Unexpected end when deserializing object.");}if(propertiesPresence!=null){foreach(KeyValuePair<JsonProperty,PropertyPresence>propertyPresence in propertiesPresence){JsonProperty property=propertyPresence.Key;PropertyPresence presence=propertyPresence.Value;EndProcessProperty(newObject,reader,contract,initialDepth,property,presence,true);}}OnDeserialized(reader,contract,newObject);return newObject;}private bool ShouldDeserialize(JsonReader reader,JsonProperty property,object target){if(property.ShouldDeserialize==null){return true;}bool shouldDeserialize=property.ShouldDeserialize(target);if(TraceWriter!=null&&TraceWriter.LevelFilter>=TraceLevel.Verbose){TraceWriter.Trace(TraceLevel.Verbose,JsonPosition.FormatMessage(null,reader.Path,"ShouldDeserialize result for property '{0}' on {1}: {2}".FormatWith(CultureInfo.InvariantCulture,property.PropertyName,property.DeclaringType,shouldDeserialize)),null);}return shouldDeserialize;}private bool CheckPropertyName(JsonReader reader,string memberName){if(SD.MetadataPropertyHandling==MetadataPropertyHandling.ReadAhead){switch(memberName){case JsonTypeReflector.IdPropertyName:case JsonTypeReflector.RefPropertyName:case JsonTypeReflector.TypePropertyName:case JsonTypeReflector.ArrayValuesPropertyName:reader.Skip();return true;}}return false;}private void SetExtensionData(JsonObjectContract contract,JsonProperty?member,JsonReader reader,string memberName,object o){if(contract.ExtensionDataSetter!=null){try{object?value=ReadExtensionDataValue(contract,member,reader);contract.ExtensionDataSetter(o,memberName,value);}catch(Exception ex){throw JsonSerializationException.Create(reader,"Error setting value in extension data for type '{0}'.".FormatWith(CultureInfo.InvariantCulture,contract.UnderlyingType),ex);}}else{reader.Skip();}}private object?ReadExtensionDataValue(JsonObjectContract contract,JsonProperty?member,JsonReader reader){object?value;if(contract.ExtensionDataIsJToken){value=JToken.ReadFrom(reader);}else{value=CreateValueInternal(reader,null,null,null,contract,member,null);}return value;}private void EndProcessProperty(object newObject,JsonReader reader,JsonObjectContract contract,int initialDepth,JsonProperty property,PropertyPresence presence,bool setDefaultValue){if(presence==PropertyPresence.None||presence==PropertyPresence.Null){try{Required resolvedRequired=property.Ignored?Required.Default:property._required??contract.ItemRequired??Required.Default;switch(presence){case PropertyPresence.None:if(resolvedRequired==Required.AllowNull||resolvedRequired==Required.Always){throw JsonSerializationException.Create(reader,"Required property '{0}' not found in JSON.".FormatWith(CultureInfo.InvariantCulture,property.PropertyName));}if(setDefaultValue&&!property.Ignored){if(property.PropertyContract==null){property.PropertyContract=GetContractSafe(property.PropertyType);}if(HasFlag(property.DefaultValueHandling.GetValueOrDefault(SD._defaultValueHandling),DefaultValueHandling.Populate)&&property.Writable){property.ValueProvider!.SetValue(newObject,EnsureType(reader,property.GetResolvedDefaultValue(),CultureInfo.InvariantCulture,property.PropertyContract!,property.PropertyType));}}break;case PropertyPresence.Null:if(resolvedRequired==Required.Always){throw JsonSerializationException.Create(reader,"Required property '{0}' expects a value but got null.".FormatWith(CultureInfo.InvariantCulture,property.PropertyName));}if(resolvedRequired==Required.DisallowNull){throw JsonSerializationException.Create(reader,"Required property '{0}' expects a non-null value.".FormatWith(CultureInfo.InvariantCulture,property.PropertyName));}break;}}catch(Exception ex){if(IsErrorHandled(newObject,contract,property.PropertyName,reader as IJsonLineInfo,reader.Path,ex)){HandleError(reader,true,initialDepth);}else{throw;}}}}private void SetPropertyPresence(JsonReader reader,JsonProperty property,Dictionary<JsonProperty,PropertyPresence>?requiredProperties){if(property!=null&&requiredProperties!=null){PropertyPresence propertyPresence;switch(reader.TokenType){case JsonToken.String:propertyPresence=(CoerceEmptyStringToNull(property.PropertyType,property.PropertyContract,(string)reader.Value!))?PropertyPresence.Null:PropertyPresence.Value;break;case JsonToken.Null:case JsonToken.Undefined:propertyPresence=PropertyPresence.Null;break;default:propertyPresence=PropertyPresence.Value;break;}requiredProperties[property]=propertyPresence;}}private void HandleError(JsonReader reader,bool readPastError,int initialDepth){ClearErrorContext();if(readPastError){reader.Skip();while(reader.Depth>initialDepth){if(!reader.Read()){break;}}}}}}
namespace Newtonsoft.Json.Serialization{internal class JsonSerializerInternalWriter:JsonSerializerInternalBase{private Type?_rootType;private int _rootLevel;private readonly List<object>_serializeStack=new List<object>();public JsonSerializerInternalWriter(JsonSerializer serializer):base(serializer){}public void Serialize(JsonWriter jsonWriter,object?value,Type?objectType){if(jsonWriter==null){throw new ArgumentNullException(nameof(jsonWriter));}_rootType=objectType;_rootLevel=_serializeStack.Count+1;JsonContract?contract=GetContractSafe(value);try{if(ShouldWriteReference(value,null,contract,null,null)){WriteReference(jsonWriter,value!);}else{SerializeValue(jsonWriter,value,contract,null,null,null);}}catch(Exception ex){if(IsErrorHandled(null,contract,null,null,jsonWriter.Path,ex)){HandleError(jsonWriter,0);}else{ClearErrorContext();throw;}}finally{_rootType=null;}}private JsonSerializerProxy GetInternalSD(){if(InternalSD==null){InternalSD=new JsonSerializerProxy(this);}return InternalSD;}private JsonContract?GetContractSafe(object?value){if(value==null){return null;}return GetContract(value);}private JsonContract GetContract(object value){return SD._contractResolver.ResolveContract(value.GetType());}private void SerializePrimitive(JsonWriter writer,object value,JsonPrimitiveContract contract,JsonProperty?member,JsonContainerContract?containerContract,JsonProperty?containerProperty){if(contract.TypeCode==PrimitiveTypeCode.Bytes){bool includeTypeDetails=ShouldWriteType(TypeNameHandling.Objects,contract,member,containerContract,containerProperty);if(includeTypeDetails){writer.WriteStartObject();WriteTypeProperty(writer,contract.CreatedType);writer.WritePropertyName(JsonTypeReflector.ValuePropertyName,false);JsonWriter.WriteValue(writer,contract.TypeCode,value);writer.WriteEndObject();return;}}JsonWriter.WriteValue(writer,contract.TypeCode,value);}private void SerializeValue(JsonWriter writer,object?value,JsonContract?valueContract,JsonProperty?member,JsonContainerContract?containerContract,JsonProperty?containerProperty){if(value==null){writer.WriteNull();return;}MiscellaneousUtils.Assert(valueContract!=null);JsonConverter?converter=member?.Converter??containerProperty?.ItemConverter??containerContract?.ItemConverter??valueContract.Converter??SD.GetMatchingConverter(valueContract.UnderlyingType)??valueContract.InternalConverter;if(converter!=null&&converter.CanWrite){SerializeConvertable(writer,converter,value,valueContract,containerContract,containerProperty);return;}switch(valueContract.ContractType){case JsonContractType.Object:SerializeObject(writer,value,(JsonObjectContract)valueContract,member,containerContract,containerProperty);break;case JsonContractType.Array:JsonArrayContract arrayContract=(JsonArrayContract)valueContract;if(!arrayContract.IsMultidimensionalArray){SerializeList(writer,(IEnumerable)value,arrayContract,member,containerContract,containerProperty);}else{SerializeMultidimensionalArray(writer,(Array)value,arrayContract,member,containerContract,containerProperty);}break;case JsonContractType.Primitive:SerializePrimitive(writer,value,(JsonPrimitiveContract)valueContract,member,containerContract,containerProperty);break;case JsonContractType.String:SerializeString(writer,value,(JsonStringContract)valueContract);break;case JsonContractType.Dictionary:JsonDictionaryContract dictionaryContract=(JsonDictionaryContract)valueContract;SerializeDictionary(writer,(value is IDictionary dictionary)?dictionary:dictionaryContract.CreateWrapper(value),dictionaryContract,member,containerContract,containerProperty);break;
#if HAVE_DYNAMIC
case JsonContractType.Dynamic:SerializeDynamic(writer,(IDynamicMetaObjectProvider)value,(JsonDynamicContract)valueContract,member,containerContract,containerProperty);break;
#endif
#if HAVE_BINARY_SERIALIZATION
case JsonContractType.Serializable:SerializeISerializable(writer,(ISerializable)value,(JsonISerializableContract)valueContract,member,containerContract,containerProperty);break;
#endif
case JsonContractType.Linq:((JToken)value).WriteTo(writer,SD.Converters.ToArray());break;}}private bool?ResolveIsReference(JsonContract contract,JsonProperty?property,JsonContainerContract?collectionContract,JsonProperty?containerProperty){bool?isReference=null;if(property!=null){isReference=property.IsReference;}if(isReference==null&&containerProperty!=null){isReference=containerProperty.ItemIsReference;}if(isReference==null&&collectionContract!=null){isReference=collectionContract.ItemIsReference;}if(isReference==null){isReference=contract.IsReference;}return isReference;}private bool ShouldWriteReference(object?value,JsonProperty?property,JsonContract?valueContract,JsonContainerContract?collectionContract,JsonProperty?containerProperty){if(value==null){return false;}MiscellaneousUtils.Assert(valueContract!=null);if(valueContract.ContractType==JsonContractType.Primitive||valueContract.ContractType==JsonContractType.String){return false;}bool?isReference=ResolveIsReference(valueContract,property,collectionContract,containerProperty);if(isReference==null){if(valueContract.ContractType==JsonContractType.Array){isReference=HasFlag(SD._preserveReferencesHandling,PreserveReferencesHandling.Arrays);}else{isReference=HasFlag(SD._preserveReferencesHandling,PreserveReferencesHandling.Objects);}}if(!isReference.GetValueOrDefault()){return false;}return SD.GetReferenceResolver().IsReferenced(this,value);}private bool ShouldWriteProperty(object?memberValue,JsonObjectContract?containerContract,JsonProperty property){if(memberValue==null&&ResolvedNullValueHandling(containerContract,property)==NullValueHandling.Ignore){return false;}if(HasFlag(property.DefaultValueHandling.GetValueOrDefault(SD._defaultValueHandling),DefaultValueHandling.Ignore)&&MiscellaneousUtils.ValueEquals(memberValue,property.GetResolvedDefaultValue())){return false;}return true;}private bool CheckForCircularReference(JsonWriter writer,object?value,JsonProperty?property,JsonContract?contract,JsonContainerContract?containerContract,JsonProperty?containerProperty){if(value==null){return true;}MiscellaneousUtils.Assert(contract!=null);if(contract.ContractType==JsonContractType.Primitive||contract.ContractType==JsonContractType.String){return true;}ReferenceLoopHandling?referenceLoopHandling=null;if(property!=null){referenceLoopHandling=property.ReferenceLoopHandling;}if(referenceLoopHandling==null&&containerProperty!=null){referenceLoopHandling=containerProperty.ItemReferenceLoopHandling;}if(referenceLoopHandling==null&&containerContract!=null){referenceLoopHandling=containerContract.ItemReferenceLoopHandling;}bool exists=(SD._equalityComparer!=null)?_serializeStack.Contains(value,SD._equalityComparer):_serializeStack.Contains(value);if(exists){string message="Self referencing loop detected";if(property!=null){message+=" for property '{0}'".FormatWith(CultureInfo.InvariantCulture,property.PropertyName);}message+=" with type '{0}'.".FormatWith(CultureInfo.InvariantCulture,value.GetType());switch(referenceLoopHandling.GetValueOrDefault(SD._referenceLoopHandling)){case ReferenceLoopHandling.Error:throw JsonSerializationException.Create(null,writer.ContainerPath,message,null);case ReferenceLoopHandling.Ignore:if(TraceWriter!=null&&TraceWriter.LevelFilter>=TraceLevel.Verbose){TraceWriter.Trace(TraceLevel.Verbose,JsonPosition.FormatMessage(null,writer.Path,message+". Skipping serializing self referenced value."),null);}return false;case ReferenceLoopHandling.Serialize:if(TraceWriter!=null&&TraceWriter.LevelFilter>=TraceLevel.Verbose){TraceWriter.Trace(TraceLevel.Verbose,JsonPosition.FormatMessage(null,writer.Path,message+". Serializing self referenced value."),null);}return true;}}return true;}private void WriteReference(JsonWriter writer,object value){string reference=GetReference(writer,value);if(TraceWriter!=null&&TraceWriter.LevelFilter>=TraceLevel.Info){TraceWriter.Trace(TraceLevel.Info,JsonPosition.FormatMessage(null,writer.Path,"Writing object reference to Id '{0}' for {1}.".FormatWith(CultureInfo.InvariantCulture,reference,value.GetType())),null);}writer.WriteStartObject();writer.WritePropertyName(JsonTypeReflector.RefPropertyName,false);writer.WriteValue(reference);writer.WriteEndObject();}private string GetReference(JsonWriter writer,object value){try{string reference=SD.GetReferenceResolver().GetReference(this,value);return reference;}catch(Exception ex){throw JsonSerializationException.Create(null,writer.ContainerPath,"Error writing object reference for '{0}'.".FormatWith(CultureInfo.InvariantCulture,value.GetType()),ex);}}internal static bool TryConvertToString(object value,Type type,[NotNullWhen(true)]out string?s){
#if HAVE_TYPE_DESCRIPTOR
if(JsonTypeReflector.CanTypeDescriptorConvertString(type,out TypeConverter converter)){s=converter.ConvertToInvariantString(value);return true;}
#endif
#if (DOTNET || PORTABLE)
if(value is Guid||value is Uri||value is TimeSpan){s=value.ToString();return true;}
#endif
if(value is Type t){s=t.AssemblyQualifiedName;return true;}s=null;return false;}private void SerializeString(JsonWriter writer,object value,JsonStringContract contract){OnSerializing(writer,contract,value);TryConvertToString(value,contract.UnderlyingType,out string?s);writer.WriteValue(s);OnSerialized(writer,contract,value);}private void OnSerializing(JsonWriter writer,JsonContract contract,object value){if(TraceWriter!=null&&TraceWriter.LevelFilter>=TraceLevel.Info){TraceWriter.Trace(TraceLevel.Info,JsonPosition.FormatMessage(null,writer.Path,"Started serializing {0}".FormatWith(CultureInfo.InvariantCulture,contract.UnderlyingType)),null);}contract.InvokeOnSerializing(value,SD._context);}private void OnSerialized(JsonWriter writer,JsonContract contract,object value){if(TraceWriter!=null&&TraceWriter.LevelFilter>=TraceLevel.Info){TraceWriter.Trace(TraceLevel.Info,JsonPosition.FormatMessage(null,writer.Path,"Finished serializing {0}".FormatWith(CultureInfo.InvariantCulture,contract.UnderlyingType)),null);}contract.InvokeOnSerialized(value,SD._context);}private void SerializeObject(JsonWriter writer,object value,JsonObjectContract contract,JsonProperty?member,JsonContainerContract?collectionContract,JsonProperty?containerProperty){OnSerializing(writer,contract,value);_serializeStack.Add(value);WriteObjectStart(writer,value,contract,member,collectionContract,containerProperty);int initialDepth=writer.Top;for(int index=0;index<contract.Properties.Count;index++){JsonProperty property=contract.Properties[index];try{if(!CalculatePropertyValues(writer,value,contract,member,property,out JsonContract?memberContract,out object?memberValue)){continue;}property.WritePropertyName(writer);SerializeValue(writer,memberValue,memberContract,property,contract,member);}catch(Exception ex){if(IsErrorHandled(value,contract,property.PropertyName,null,writer.ContainerPath,ex)){HandleError(writer,initialDepth);}else{throw;}}}IEnumerable<KeyValuePair<object,object>>?extensionData=contract.ExtensionDataGetter?.Invoke(value);if(extensionData!=null){foreach(KeyValuePair<object,object>e in extensionData){JsonContract keyContract=GetContract(e.Key);JsonContract?valueContract=GetContractSafe(e.Value);string propertyName=GetPropertyName(writer,e.Key,keyContract,out _);propertyName=(contract.ExtensionDataNameResolver!=null)?contract.ExtensionDataNameResolver(propertyName):propertyName;if(ShouldWriteReference(e.Value,null,valueContract,contract,member)){writer.WritePropertyName(propertyName);WriteReference(writer,e.Value!);}else{if(!CheckForCircularReference(writer,e.Value,null,valueContract,contract,member)){continue;}writer.WritePropertyName(propertyName);SerializeValue(writer,e.Value,valueContract,null,contract,member);}}}writer.WriteEndObject();_serializeStack.RemoveAt(_serializeStack.Count-1);OnSerialized(writer,contract,value);}private bool CalculatePropertyValues(JsonWriter writer,object value,JsonContainerContract contract,JsonProperty?member,JsonProperty property,[NotNullWhen(true)]out JsonContract?memberContract,out object?memberValue){if(!property.Ignored&&property.Readable&&ShouldSerialize(writer,property,value)&&IsSpecified(writer,property,value)){if(property.PropertyContract==null){property.PropertyContract=SD._contractResolver.ResolveContract(property.PropertyType!);}memberValue=property.ValueProvider!.GetValue(value);memberContract=(property.PropertyContract.IsSealed)?property.PropertyContract:GetContractSafe(memberValue);if(ShouldWriteProperty(memberValue,contract as JsonObjectContract,property)){if(ShouldWriteReference(memberValue,property,memberContract,contract,member)){property.WritePropertyName(writer);WriteReference(writer,memberValue!);return false;}if(!CheckForCircularReference(writer,memberValue,property,memberContract,contract,member)){return false;}if(memberValue==null){JsonObjectContract?objectContract=contract as JsonObjectContract;Required resolvedRequired=property._required??objectContract?.ItemRequired??Required.Default;if(resolvedRequired==Required.Always){throw JsonSerializationException.Create(null,writer.ContainerPath,"Cannot write a null value for property '{0}'. Property requires a value.".FormatWith(CultureInfo.InvariantCulture,property.PropertyName),null);}if(resolvedRequired==Required.DisallowNull){throw JsonSerializationException.Create(null,writer.ContainerPath,"Cannot write a null value for property '{0}'. Property requires a non-null value.".FormatWith(CultureInfo.InvariantCulture,property.PropertyName),null);}}
return true;
}}memberContract=null;memberValue=null;return false;}private void WriteObjectStart(JsonWriter writer,object value,JsonContract contract,JsonProperty?member,JsonContainerContract?collectionContract,JsonProperty?containerProperty){writer.WriteStartObject();bool isReference=ResolveIsReference(contract,member,collectionContract,containerProperty)??HasFlag(SD._preserveReferencesHandling,PreserveReferencesHandling.Objects);if(isReference&&(member==null||member.Writable||HasCreatorParameter(collectionContract,member))){WriteReferenceIdProperty(writer,contract.UnderlyingType,value);}if(ShouldWriteType(TypeNameHandling.Objects,contract,member,collectionContract,containerProperty)){WriteTypeProperty(writer,contract.UnderlyingType);}}private bool HasCreatorParameter(JsonContainerContract?contract,JsonProperty property){if(!(contract is JsonObjectContract objectContract)){return false;}return objectContract.CreatorParameters.Contains(property.PropertyName!);}private void WriteReferenceIdProperty(JsonWriter writer,Type type,object value){string reference=GetReference(writer,value);if(TraceWriter!=null&&TraceWriter.LevelFilter>=TraceLevel.Verbose){TraceWriter.Trace(TraceLevel.Verbose,JsonPosition.FormatMessage(null,writer.Path,"Writing object reference Id '{0}' for {1}.".FormatWith(CultureInfo.InvariantCulture,reference,type)),null);}writer.WritePropertyName(JsonTypeReflector.IdPropertyName,false);writer.WriteValue(reference);}private void WriteTypeProperty(JsonWriter writer,Type type){string typeName=ReflectionUtils.GetTypeName(type,SD._typeNameAssemblyFormatHandling,SD._serializationBinder);if(TraceWriter!=null&&TraceWriter.LevelFilter>=TraceLevel.Verbose){TraceWriter.Trace(TraceLevel.Verbose,JsonPosition.FormatMessage(null,writer.Path,"Writing type name '{0}' for {1}.".FormatWith(CultureInfo.InvariantCulture,typeName,type)),null);}writer.WritePropertyName(JsonTypeReflector.TypePropertyName,false);writer.WriteValue(typeName);}private bool HasFlag(DefaultValueHandling value,DefaultValueHandling flag){return((value&flag)==flag);}private bool HasFlag(PreserveReferencesHandling value,PreserveReferencesHandling flag){return((value&flag)==flag);}private bool HasFlag(TypeNameHandling value,TypeNameHandling flag){return((value&flag)==flag);}private void SerializeConvertable(JsonWriter writer,JsonConverter converter,object value,JsonContract contract,JsonContainerContract?collectionContract,JsonProperty?containerProperty){if(ShouldWriteReference(value,null,contract,collectionContract,containerProperty)){WriteReference(writer,value);}else{if(!CheckForCircularReference(writer,value,null,contract,collectionContract,containerProperty)){return;}_serializeStack.Add(value);if(TraceWriter!=null&&TraceWriter.LevelFilter>=TraceLevel.Info){TraceWriter.Trace(TraceLevel.Info,JsonPosition.FormatMessage(null,writer.Path,"Started serializing {0} with converter {1}.".FormatWith(CultureInfo.InvariantCulture,value.GetType(),converter.GetType())),null);}converter.WriteJson(writer,value,GetInternalSD());if(TraceWriter!=null&&TraceWriter.LevelFilter>=TraceLevel.Info){TraceWriter.Trace(TraceLevel.Info,JsonPosition.FormatMessage(null,writer.Path,"Finished serializing {0} with converter {1}.".FormatWith(CultureInfo.InvariantCulture,value.GetType(),converter.GetType())),null);}_serializeStack.RemoveAt(_serializeStack.Count-1);}}private void SerializeList(JsonWriter writer,IEnumerable values,JsonArrayContract contract,JsonProperty?member,JsonContainerContract?collectionContract,JsonProperty?containerProperty){object underlyingList=values is IWrappedCollection wrappedCollection?wrappedCollection.UnderlyingCollection:values;OnSerializing(writer,contract,underlyingList);_serializeStack.Add(underlyingList);bool hasWrittenMetadataObject=WriteStartArray(writer,underlyingList,contract,member,collectionContract,containerProperty);writer.WriteStartArray();int initialDepth=writer.Top;int index=0;foreach(object value in values){try{JsonContract?valueContract=contract.FinalItemContract??GetContractSafe(value);if(ShouldWriteReference(value,null,valueContract,contract,member)){WriteReference(writer,value);}else{if(CheckForCircularReference(writer,value,null,valueContract,contract,member)){SerializeValue(writer,value,valueContract,null,contract,member);}}}catch(Exception ex){if(IsErrorHandled(underlyingList,contract,index,null,writer.ContainerPath,ex)){HandleError(writer,initialDepth);}else{throw;}}finally{index++;}}writer.WriteEndArray();if(hasWrittenMetadataObject){writer.WriteEndObject();}_serializeStack.RemoveAt(_serializeStack.Count-1);OnSerialized(writer,contract,underlyingList);}private void SerializeMultidimensionalArray(JsonWriter writer,Array values,JsonArrayContract contract,JsonProperty?member,JsonContainerContract?collectionContract,JsonProperty?containerProperty){OnSerializing(writer,contract,values);_serializeStack.Add(values);bool hasWrittenMetadataObject=WriteStartArray(writer,values,contract,member,collectionContract,containerProperty);SerializeMultidimensionalArray(writer,values,contract,member,writer.Top,CollectionUtils.ArrayEmpty<int>());if(hasWrittenMetadataObject){writer.WriteEndObject();}_serializeStack.RemoveAt(_serializeStack.Count-1);OnSerialized(writer,contract,values);}private void SerializeMultidimensionalArray(JsonWriter writer,Array values,JsonArrayContract contract,JsonProperty?member,int initialDepth,int[]indices){int dimension=indices.Length;int[]newIndices=new int[dimension+1];for(int i=0;i<dimension;i++){newIndices[i]=indices[i];}writer.WriteStartArray();for(int i=values.GetLowerBound(dimension);i<=values.GetUpperBound(dimension);i++){newIndices[dimension]=i;bool isTopLevel=(newIndices.Length==values.Rank);if(isTopLevel){object value=values.GetValue(newIndices);try{JsonContract?valueContract=contract.FinalItemContract??GetContractSafe(value);if(ShouldWriteReference(value,null,valueContract,contract,member)){WriteReference(writer,value);}else{if(CheckForCircularReference(writer,value,null,valueContract,contract,member)){SerializeValue(writer,value,valueContract,null,contract,member);}}}catch(Exception ex){if(IsErrorHandled(values,contract,i,null,writer.ContainerPath,ex)){HandleError(writer,initialDepth+1);}else{throw;}}}else{SerializeMultidimensionalArray(writer,values,contract,member,initialDepth+1,newIndices);}}writer.WriteEndArray();}private bool WriteStartArray(JsonWriter writer,object values,JsonArrayContract contract,JsonProperty?member,JsonContainerContract?containerContract,JsonProperty?containerProperty){bool isReference=ResolveIsReference(contract,member,containerContract,containerProperty)??HasFlag(SD._preserveReferencesHandling,PreserveReferencesHandling.Arrays);isReference=(isReference&&(member==null||member.Writable||HasCreatorParameter(containerContract,member)));bool includeTypeDetails=ShouldWriteType(TypeNameHandling.Arrays,contract,member,containerContract,containerProperty);bool writeMetadataObject=isReference||includeTypeDetails;if(writeMetadataObject){writer.WriteStartObject();if(isReference){WriteReferenceIdProperty(writer,contract.UnderlyingType,values);}if(includeTypeDetails){WriteTypeProperty(writer,values.GetType());}writer.WritePropertyName(JsonTypeReflector.ArrayValuesPropertyName,false);}if(contract.ItemContract==null){contract.ItemContract=SD._contractResolver.ResolveContract(contract.CollectionItemType??typeof(object));}return writeMetadataObject;}
#if HAVE_BINARY_SERIALIZATION
#if HAVE_SECURITY_SAFE_CRITICAL_ATTRIBUTE
[SecuritySafeCritical]
#endif
private void SerializeISerializable(JsonWriter writer,ISerializable value,JsonISerializableContract contract,JsonProperty?member,JsonContainerContract?collectionContract,JsonProperty?containerProperty){if(!JsonTypeReflector.FullyTrusted){string message=@"Type '{0}' implements ISerializable but cannot be serialized using the ISerializable interface because the current application is not fully trusted and ISerializable can expose secure data."+Environment.NewLine+@"To fix this error either change the environment to be fully trusted, change the application to not deserialize the type, add JsonObjectAttribute to the type or change the JsonSerializer setting ContractResolver to use a new DefaultContractResolver with IgnoreSerializableInterface set to true."+Environment.NewLine;message=message.FormatWith(CultureInfo.InvariantCulture,value.GetType());throw JsonSerializationException.Create(null,writer.ContainerPath,message,null);}OnSerializing(writer,contract,value);_serializeStack.Add(value);WriteObjectStart(writer,value,contract,member,collectionContract,containerProperty);SerializationInfo serializationInfo=new SerializationInfo(contract.UnderlyingType,new FormatterConverter());value.GetObjectData(serializationInfo,SD._context);foreach(SerializationEntry serializationEntry in serializationInfo){JsonContract?valueContract=GetContractSafe(serializationEntry.Value);if(ShouldWriteReference(serializationEntry.Value,null,valueContract,contract,member)){writer.WritePropertyName(serializationEntry.Name);WriteReference(writer,serializationEntry.Value);}else if(CheckForCircularReference(writer,serializationEntry.Value,null,valueContract,contract,member)){writer.WritePropertyName(serializationEntry.Name);SerializeValue(writer,serializationEntry.Value,valueContract,null,contract,member);}}writer.WriteEndObject();_serializeStack.RemoveAt(_serializeStack.Count-1);OnSerialized(writer,contract,value);}
#endif
#if HAVE_DYNAMIC
private void SerializeDynamic(JsonWriter writer,IDynamicMetaObjectProvider value,JsonDynamicContract contract,JsonProperty?member,JsonContainerContract?collectionContract,JsonProperty?containerProperty){OnSerializing(writer,contract,value);_serializeStack.Add(value);WriteObjectStart(writer,value,contract,member,collectionContract,containerProperty);int initialDepth=writer.Top;for(int index=0;index<contract.Properties.Count;index++){JsonProperty property=contract.Properties[index];if(property.HasMemberAttribute){try{if(!CalculatePropertyValues(writer,value,contract,member,property,out JsonContract?memberContract,out object?memberValue)){continue;}property.WritePropertyName(writer);SerializeValue(writer,memberValue,memberContract,property,contract,member);}catch(Exception ex){if(IsErrorHandled(value,contract,property.PropertyName,null,writer.ContainerPath,ex)){HandleError(writer,initialDepth);}else{throw;}}}}foreach(string memberName in value.GetDynamicMemberNames()){if(contract.TryGetMember(value,memberName,out object?memberValue)){try{JsonContract?valueContract=GetContractSafe(memberValue);if(!ShouldWriteDynamicProperty(memberValue)){continue;}if(CheckForCircularReference(writer,memberValue,null,valueContract,contract,member)){string resolvedPropertyName=(contract.PropertyNameResolver!=null)?contract.PropertyNameResolver(memberName):memberName;writer.WritePropertyName(resolvedPropertyName);SerializeValue(writer,memberValue,valueContract,null,contract,member);}}catch(Exception ex){if(IsErrorHandled(value,contract,memberName,null,writer.ContainerPath,ex)){HandleError(writer,initialDepth);}else{throw;}}}}writer.WriteEndObject();_serializeStack.RemoveAt(_serializeStack.Count-1);OnSerialized(writer,contract,value);}
#endif
private bool ShouldWriteDynamicProperty(object?memberValue){if(SD._nullValueHandling==NullValueHandling.Ignore&&memberValue==null){return false;}if(HasFlag(SD._defaultValueHandling,DefaultValueHandling.Ignore)&&(memberValue==null||MiscellaneousUtils.ValueEquals(memberValue,ReflectionUtils.GetDefaultValue(memberValue.GetType())))){return false;}return true;}private bool ShouldWriteType(TypeNameHandling typeNameHandlingFlag,JsonContract contract,JsonProperty?member,JsonContainerContract?containerContract,JsonProperty?containerProperty){TypeNameHandling resolvedTypeNameHandling=member?.TypeNameHandling??containerProperty?.ItemTypeNameHandling??containerContract?.ItemTypeNameHandling??SD._typeNameHandling;if(HasFlag(resolvedTypeNameHandling,typeNameHandlingFlag)){return true;}if(HasFlag(resolvedTypeNameHandling,TypeNameHandling.Auto)){if(member!=null){if(contract.NonNullableUnderlyingType!=member.PropertyContract!.CreatedType){return true;}}else if(containerContract!=null){if(containerContract.ItemContract==null||contract.NonNullableUnderlyingType!=containerContract.ItemContract.CreatedType){return true;}}else if(_rootType!=null&&_serializeStack.Count==_rootLevel){JsonContract rootContract=SD._contractResolver.ResolveContract(_rootType);if(contract.NonNullableUnderlyingType!=rootContract.CreatedType){return true;}}}return false;}private void SerializeDictionary(JsonWriter writer,IDictionary values,JsonDictionaryContract contract,JsonProperty?member,JsonContainerContract?collectionContract,JsonProperty?containerProperty){
object underlyingDictionary=values is IWrappedDictionary wrappedDictionary?wrappedDictionary.UnderlyingDictionary:values;OnSerializing(writer,contract,underlyingDictionary);_serializeStack.Add(underlyingDictionary);WriteObjectStart(writer,underlyingDictionary,contract,member,collectionContract,containerProperty);if(contract.ItemContract==null){contract.ItemContract=SD._contractResolver.ResolveContract(contract.DictionaryValueType??typeof(object));}if(contract.KeyContract==null){contract.KeyContract=SD._contractResolver.ResolveContract(contract.DictionaryKeyType??typeof(object));}int initialDepth=writer.Top;IDictionaryEnumerator e=values.GetEnumerator();try{while(e.MoveNext()){DictionaryEntry entry=e.Entry;string propertyName=GetPropertyName(writer,entry.Key,contract.KeyContract,out bool escape);propertyName=(contract.DictionaryKeyResolver!=null)?contract.DictionaryKeyResolver(propertyName):propertyName;try{object value=entry.Value;JsonContract?valueContract=contract.FinalItemContract??GetContractSafe(value);if(ShouldWriteReference(value,null,valueContract,contract,member)){writer.WritePropertyName(propertyName,escape);WriteReference(writer,value);}else{if(!CheckForCircularReference(writer,value,null,valueContract,contract,member)){continue;}writer.WritePropertyName(propertyName,escape);SerializeValue(writer,value,valueContract,null,contract,member);}}catch(Exception ex){if(IsErrorHandled(underlyingDictionary,contract,propertyName,null,writer.ContainerPath,ex)){HandleError(writer,initialDepth);}else{throw;}}}}finally{(e as IDisposable)?.Dispose();}writer.WriteEndObject();_serializeStack.RemoveAt(_serializeStack.Count-1);OnSerialized(writer,contract,underlyingDictionary);
}private string GetPropertyName(JsonWriter writer,object name,JsonContract contract,out bool escape){if(contract.ContractType==JsonContractType.Primitive){JsonPrimitiveContract primitiveContract=(JsonPrimitiveContract)contract;switch(primitiveContract.TypeCode){case PrimitiveTypeCode.DateTime:case PrimitiveTypeCode.DateTimeNullable:{DateTime dt=DateTimeUtils.EnsureDateTime((DateTime)name,writer.DateTimeZoneHandling);escape=false;StringWriter sw=new StringWriter(CultureInfo.InvariantCulture);DateTimeUtils.WriteDateTimeString(sw,dt,writer.DateFormatHandling,writer.DateFormatString,writer.Culture);return sw.ToString();}
#if HAVE_DATE_TIME_OFFSET
case PrimitiveTypeCode.DateTimeOffset:case PrimitiveTypeCode.DateTimeOffsetNullable:{escape=false;StringWriter sw=new StringWriter(CultureInfo.InvariantCulture);DateTimeUtils.WriteDateTimeOffsetString(sw,(DateTimeOffset)name,writer.DateFormatHandling,writer.DateFormatString,writer.Culture);return sw.ToString();}
#endif
case PrimitiveTypeCode.Double:case PrimitiveTypeCode.DoubleNullable:{double d=(double)name;escape=false;return d.ToString("R",CultureInfo.InvariantCulture);}case PrimitiveTypeCode.Single:case PrimitiveTypeCode.SingleNullable:{float f=(float)name;escape=false;return f.ToString("R",CultureInfo.InvariantCulture);}default:{escape=true;if(primitiveContract.IsEnum&&EnumUtils.TryToString(primitiveContract.NonNullableUnderlyingType,name,null,out string?enumName)){return enumName;}return Convert.ToString(name,CultureInfo.InvariantCulture);}}}else if(TryConvertToString(name,name.GetType(),out string?propertyName)){escape=true;return propertyName;}else{escape=true;return name.ToString();}}private void HandleError(JsonWriter writer,int initialDepth){ClearErrorContext();if(writer.WriteState==WriteState.Property){writer.WriteNull();}while(writer.Top>initialDepth){writer.WriteEnd();}}private bool ShouldSerialize(JsonWriter writer,JsonProperty property,object target){if(property.ShouldSerialize==null){return true;}bool shouldSerialize=property.ShouldSerialize(target);if(TraceWriter!=null&&TraceWriter.LevelFilter>=TraceLevel.Verbose){TraceWriter.Trace(TraceLevel.Verbose,JsonPosition.FormatMessage(null,writer.Path,"ShouldSerialize result for property '{0}' on {1}: {2}".FormatWith(CultureInfo.InvariantCulture,property.PropertyName,property.DeclaringType,shouldSerialize)),null);}return shouldSerialize;}private bool IsSpecified(JsonWriter writer,JsonProperty property,object target){if(property.GetIsSpecified==null){return true;}bool isSpecified=property.GetIsSpecified(target);if(TraceWriter!=null&&TraceWriter.LevelFilter>=TraceLevel.Verbose){TraceWriter.Trace(TraceLevel.Verbose,JsonPosition.FormatMessage(null,writer.Path,"IsSpecified result for property '{0}' on {1}: {2}".FormatWith(CultureInfo.InvariantCulture,property.PropertyName,property.DeclaringType,isSpecified)),null);}return isSpecified;}}}namespace Newtonsoft.Json.Serialization{internal class JsonSerializerProxy:JsonSerializer{private readonly JsonSerializerInternalReader?_serializerReader;private readonly JsonSerializerInternalWriter?_serializerWriter;internal readonly JsonSerializer _serializer;public override event EventHandler<ErrorEventArgs>?Error{add=>_serializer.Error+=value;remove=>_serializer.Error-=value;}public override IReferenceResolver?ReferenceResolver{get=>_serializer.ReferenceResolver;set=>_serializer.ReferenceResolver=value;}public override ITraceWriter?TraceWriter{get=>_serializer.TraceWriter;set=>_serializer.TraceWriter=value;}public override IEqualityComparer?EqualityComparer{get=>_serializer.EqualityComparer;set=>_serializer.EqualityComparer=value;}public override JsonConverterCollection Converters=>_serializer.Converters;public override DefaultValueHandling DefaultValueHandling{get=>_serializer.DefaultValueHandling;set=>_serializer.DefaultValueHandling=value;}public override IContractResolver ContractResolver{get=>_serializer.ContractResolver;set=>_serializer.ContractResolver=value;}public override MissingMemberHandling MissingMemberHandling{get=>_serializer.MissingMemberHandling;set=>_serializer.MissingMemberHandling=value;}public override NullValueHandling NullValueHandling{get=>_serializer.NullValueHandling;set=>_serializer.NullValueHandling=value;}public override ObjectCreationHandling ObjectCreationHandling{get=>_serializer.ObjectCreationHandling;set=>_serializer.ObjectCreationHandling=value;}public override ReferenceLoopHandling ReferenceLoopHandling{get=>_serializer.ReferenceLoopHandling;set=>_serializer.ReferenceLoopHandling=value;}public override PreserveReferencesHandling PreserveReferencesHandling{get=>_serializer.PreserveReferencesHandling;set=>_serializer.PreserveReferencesHandling=value;}public override TypeNameHandling TypeNameHandling{get=>_serializer.TypeNameHandling;set=>_serializer.TypeNameHandling=value;}public override MetadataPropertyHandling MetadataPropertyHandling{get=>_serializer.MetadataPropertyHandling;set=>_serializer.MetadataPropertyHandling=value;}[Obsolete("TypeNameAssemblyFormat is obsolete. Use TypeNameAssemblyFormatHandling instead.")]public override FormatterAssemblyStyle TypeNameAssemblyFormat{get=>_serializer.TypeNameAssemblyFormat;set=>_serializer.TypeNameAssemblyFormat=value;}public override TypeNameAssemblyFormatHandling TypeNameAssemblyFormatHandling{get=>_serializer.TypeNameAssemblyFormatHandling;set=>_serializer.TypeNameAssemblyFormatHandling=value;}public override ConstructorHandling ConstructorHandling{get=>_serializer.ConstructorHandling;set=>_serializer.ConstructorHandling=value;}[Obsolete("Binder is obsolete. Use SerializationBinder instead.")]public override SerializationBinder Binder{get=>_serializer.Binder;set=>_serializer.Binder=value;}public override ISerializationBinder SerializationBinder{get=>_serializer.SerializationBinder;set=>_serializer.SerializationBinder=value;}public override StreamingContext Context{get=>_serializer.Context;set=>_serializer.Context=value;}public override Formatting Formatting{get=>_serializer.Formatting;set=>_serializer.Formatting=value;}public override DateFormatHandling DateFormatHandling{get=>_serializer.DateFormatHandling;set=>_serializer.DateFormatHandling=value;}public override DateTimeZoneHandling DateTimeZoneHandling{get=>_serializer.DateTimeZoneHandling;set=>_serializer.DateTimeZoneHandling=value;}public override DateParseHandling DateParseHandling{get=>_serializer.DateParseHandling;set=>_serializer.DateParseHandling=value;}public override FloatFormatHandling FloatFormatHandling{get=>_serializer.FloatFormatHandling;set=>_serializer.FloatFormatHandling=value;}public override FloatParseHandling FloatParseHandling{get=>_serializer.FloatParseHandling;set=>_serializer.FloatParseHandling=value;}public override StringEscapeHandling StringEscapeHandling{get=>_serializer.StringEscapeHandling;set=>_serializer.StringEscapeHandling=value;}public override string DateFormatString{get=>_serializer.DateFormatString;set=>_serializer.DateFormatString=value;}public override CultureInfo Culture{get=>_serializer.Culture;set=>_serializer.Culture=value;}public override int?MaxDepth{get=>_serializer.MaxDepth;set=>_serializer.MaxDepth=value;}public override bool CheckAdditionalContent{get=>_serializer.CheckAdditionalContent;set=>_serializer.CheckAdditionalContent=value;}internal JsonSerializerInternalBase GetInternalSD(){if(_serializerReader!=null){return _serializerReader;}else{return _serializerWriter!;}}public JsonSerializerProxy(JsonSerializerInternalReader serializerReader){ValidationUtils.ArgumentNotNull(serializerReader,nameof(serializerReader));_serializerReader=serializerReader;_serializer=serializerReader.SD;}public JsonSerializerProxy(JsonSerializerInternalWriter serializerWriter){ValidationUtils.ArgumentNotNull(serializerWriter,nameof(serializerWriter));_serializerWriter=serializerWriter;_serializer=serializerWriter.SD;}internal override object?DeserializeInternal(JsonReader reader,Type?objectType){if(_serializerReader!=null){return _serializerReader.Deserialize(reader,objectType,false);}else{return _serializer.Deserialize(reader,objectType);}}internal override void PopulateInternal(JsonReader reader,object target){if(_serializerReader!=null){_serializerReader.Populate(reader,target);}else{_serializer.Populate(reader,target);}}internal override void SerializeInternal(JsonWriter jsonWriter,object?value,Type?rootType){if(_serializerWriter!=null){_serializerWriter.Serialize(jsonWriter,value,rootType);}else{_serializer.Serialize(jsonWriter,value);}}}}namespace Newtonsoft.Json{public class JsonSerializerSettings{internal const ReferenceLoopHandling DefaultReferenceLoopHandling=ReferenceLoopHandling.Error;internal const MissingMemberHandling DefaultMissingMemberHandling=MissingMemberHandling.Ignore;internal const NullValueHandling DefaultNullValueHandling=NullValueHandling.Include;internal const DefaultValueHandling DefaultDefaultValueHandling=DefaultValueHandling.Include;internal const ObjectCreationHandling DefaultObjectCreationHandling=ObjectCreationHandling.Auto;internal const PreserveReferencesHandling DefaultPreserveReferencesHandling=PreserveReferencesHandling.None;internal const ConstructorHandling DefaultConstructorHandling=ConstructorHandling.Default;internal const TypeNameHandling DefaultTypeNameHandling=TypeNameHandling.None;internal const MetadataPropertyHandling DefaultMetadataPropertyHandling=MetadataPropertyHandling.Default;internal static readonly StreamingContext DefaultContext;internal const Formatting DefaultFormatting=Formatting.None;internal const DateFormatHandling DefaultDateFormatHandling=DateFormatHandling.IsoDateFormat;internal const DateTimeZoneHandling DefaultDateTimeZoneHandling=DateTimeZoneHandling.RoundtripKind;internal const DateParseHandling DefaultDateParseHandling=DateParseHandling.DateTime;internal const FloatParseHandling DefaultFloatParseHandling=FloatParseHandling.Double;internal const FloatFormatHandling DefaultFloatFormatHandling=FloatFormatHandling.String;internal const StringEscapeHandling DefaultStringEscapeHandling=StringEscapeHandling.Default;internal const TypeNameAssemblyFormatHandling DefaultTypeNameAssemblyFormatHandling=TypeNameAssemblyFormatHandling.Simple;internal static readonly CultureInfo DefaultCulture;internal const bool DefaultCheckAdditionalContent=false;internal const string DefaultDateFormatString=@"yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK";internal const int DefaultMaxDepth=64;internal Formatting?_formatting;internal DateFormatHandling?_dateFormatHandling;internal DateTimeZoneHandling?_dateTimeZoneHandling;internal DateParseHandling?_dateParseHandling;internal FloatFormatHandling?_floatFormatHandling;internal FloatParseHandling?_floatParseHandling;internal StringEscapeHandling?_stringEscapeHandling;internal CultureInfo?_culture;internal bool?_checkAdditionalContent;internal int?_maxDepth;internal bool _maxDepthSet;internal string?_dateFormatString;internal bool _dateFormatStringSet;internal TypeNameAssemblyFormatHandling?_typeNameAssemblyFormatHandling;internal DefaultValueHandling?_defaultValueHandling;internal PreserveReferencesHandling?_preserveReferencesHandling;internal NullValueHandling?_nullValueHandling;internal ObjectCreationHandling?_objectCreationHandling;internal MissingMemberHandling?_missingMemberHandling;internal ReferenceLoopHandling?_referenceLoopHandling;internal StreamingContext?_context;internal ConstructorHandling?_constructorHandling;internal TypeNameHandling?_typeNameHandling;internal MetadataPropertyHandling?_metadataPropertyHandling;public ReferenceLoopHandling ReferenceLoopHandling{get=>_referenceLoopHandling??DefaultReferenceLoopHandling;set=>_referenceLoopHandling=value;}public MissingMemberHandling MissingMemberHandling{get=>_missingMemberHandling??DefaultMissingMemberHandling;set=>_missingMemberHandling=value;}public ObjectCreationHandling ObjectCreationHandling{get=>_objectCreationHandling??DefaultObjectCreationHandling;set=>_objectCreationHandling=value;}public NullValueHandling NullValueHandling{get=>_nullValueHandling??DefaultNullValueHandling;set=>_nullValueHandling=value;}public DefaultValueHandling DefaultValueHandling{get=>_defaultValueHandling??DefaultDefaultValueHandling;set=>_defaultValueHandling=value;}public IList<JsonConverter>Converters{get;set;}public PreserveReferencesHandling PreserveReferencesHandling{get=>_preserveReferencesHandling??DefaultPreserveReferencesHandling;set=>_preserveReferencesHandling=value;}public TypeNameHandling TypeNameHandling{get=>_typeNameHandling??DefaultTypeNameHandling;set=>_typeNameHandling=value;}public MetadataPropertyHandling MetadataPropertyHandling{get=>_metadataPropertyHandling??DefaultMetadataPropertyHandling;set=>_metadataPropertyHandling=value;}[Obsolete("TypeNameAssemblyFormat is obsolete. Use TypeNameAssemblyFormatHandling instead.")]public FormatterAssemblyStyle TypeNameAssemblyFormat{get=>(FormatterAssemblyStyle)TypeNameAssemblyFormatHandling;set=>TypeNameAssemblyFormatHandling=(TypeNameAssemblyFormatHandling)value;}public TypeNameAssemblyFormatHandling TypeNameAssemblyFormatHandling{get=>_typeNameAssemblyFormatHandling??DefaultTypeNameAssemblyFormatHandling;set=>_typeNameAssemblyFormatHandling=value;}public ConstructorHandling ConstructorHandling{get=>_constructorHandling??DefaultConstructorHandling;set=>_constructorHandling=value;}public IContractResolver?ContractResolver{get;set;}public IEqualityComparer?EqualityComparer{get;set;}[Obsolete("ReferenceResolver property is obsolete. Use the ReferenceResolverProvider property to set the IReferenceResolver: settings.ReferenceResolverProvider = () => resolver")]public IReferenceResolver?ReferenceResolver{get=>ReferenceResolverProvider?.Invoke();set{ReferenceResolverProvider=(value!=null)?()=>value:(Serialization.Func<IReferenceResolver?>?)null;}}public Serialization.Func<IReferenceResolver?>?ReferenceResolverProvider{get;set;}public ITraceWriter?TraceWriter{get;set;}[Obsolete("Binder is obsolete. Use SerializationBinder instead.")]public SerializationBinder?Binder{get{if(SerializationBinder==null){return null;}if(SerializationBinder is SerializationBinderAdapter adapter){return adapter.SerializationBinder;}throw new InvalidOperationException("Cannot get SerializationBinder because an ISerializationBinder was previously set.");}set=>SerializationBinder=value==null?null:new SerializationBinderAdapter(value);}public ISerializationBinder?SerializationBinder{get;set;}public EventHandler<ErrorEventArgs>?Error{get;set;}public StreamingContext Context{get=>_context??DefaultContext;set=>_context=value;}public string DateFormatString{get=>_dateFormatString??DefaultDateFormatString;set{_dateFormatString=value;_dateFormatStringSet=true;}}public int?MaxDepth{get=>_maxDepthSet?_maxDepth:DefaultMaxDepth;set{if(value<=0){throw new ArgumentException("Value must be positive.",nameof(value));}_maxDepth=value;_maxDepthSet=true;}}public Formatting Formatting{get=>_formatting??DefaultFormatting;set=>_formatting=value;}public DateFormatHandling DateFormatHandling{get=>_dateFormatHandling??DefaultDateFormatHandling;set=>_dateFormatHandling=value;}public DateTimeZoneHandling DateTimeZoneHandling{get=>_dateTimeZoneHandling??DefaultDateTimeZoneHandling;set=>_dateTimeZoneHandling=value;}public DateParseHandling DateParseHandling{get=>_dateParseHandling??DefaultDateParseHandling;set=>_dateParseHandling=value;}public FloatFormatHandling FloatFormatHandling{get=>_floatFormatHandling??DefaultFloatFormatHandling;set=>_floatFormatHandling=value;}public FloatParseHandling FloatParseHandling{get=>_floatParseHandling??DefaultFloatParseHandling;set=>_floatParseHandling=value;}public StringEscapeHandling StringEscapeHandling{get=>_stringEscapeHandling??DefaultStringEscapeHandling;set=>_stringEscapeHandling=value;}public CultureInfo Culture{get=>_culture??DefaultCulture;set=>_culture=value;}public bool CheckAdditionalContent{get=>_checkAdditionalContent??DefaultCheckAdditionalContent;set=>_checkAdditionalContent=value;}static JsonSerializerSettings(){DefaultContext=new StreamingContext();DefaultCulture=CultureInfo.InvariantCulture;}[DebuggerStepThrough]public JsonSerializerSettings(){Converters=new List<JsonConverter>();}}}namespace Newtonsoft.Json.Serialization{public class JsonStringContract:JsonPrimitiveContract{public JsonStringContract(Type underlyingType):base(underlyingType){ContractType=JsonContractType.String;}}}
#if HAVE_ASYNC
#if HAVE_BIG_INTEGER
#endif
namespace Newtonsoft.Json{public partial class JsonTextReader{
#if HAVE_ASYNC
private readonly bool _safeAsync;
#endif
public override Task<bool>ReadAsync(CancellationToken cancellationToken=default){return _safeAsync?DoReadAsync(cancellationToken):base.ReadAsync(cancellationToken);}internal Task<bool>DoReadAsync(CancellationToken cancellationToken){EnsureBuffer();while(true){switch(_currentState){case State.Start:case State.Property:case State.Array:case State.ArrayStart:case State.Constructor:case State.ConstructorStart:return ParseValueAsync(cancellationToken);case State.Object:case State.ObjectStart:return ParseObjectAsync(cancellationToken);case State.PostValue:Task<bool>task=ParsePostValueAsync(false,cancellationToken);if(task.IsCompletedSucessfully()){if(task.Result){return AsyncUtils.True;}}else{return DoReadAsync(task,cancellationToken);}break;case State.Finished:return ReadFromFinishedAsync(cancellationToken);default:throw JsonReaderException.Create(this,"Unexpected state: {0}.".FormatWith(CultureInfo.InvariantCulture,CurrentState));}}}private async Task<bool>DoReadAsync(Task<bool>task,CancellationToken cancellationToken){bool result=await task.ConfigureAwait(false);if(result){return true;}return await DoReadAsync(cancellationToken).ConfigureAwait(false);}private async Task<bool>ParsePostValueAsync(bool ignoreComments,CancellationToken cancellationToken){MiscellaneousUtils.Assert(_chars!=null);while(true){char currentChar=_chars[_charPos];switch(currentChar){case'\0':if(_charsUsed==_charPos){if(await ReadDataAsync(false,cancellationToken).ConfigureAwait(false)==0){_currentState=State.Finished;return false;}}else{_charPos++;}break;case'}':_charPos++;SetToken(JsonToken.EndObject);return true;case']':_charPos++;SetToken(JsonToken.EndArray);return true;case')':_charPos++;SetToken(JsonToken.EndConstructor);return true;case'/':await ParseCommentAsync(!ignoreComments,cancellationToken).ConfigureAwait(false);if(!ignoreComments){return true;}break;case',':_charPos++;SetStateBasedOnCurrent();return false;case' ':case StringUtils.Tab:_charPos++;break;case StringUtils.CarriageReturn:await ProcessCarriageReturnAsync(false,cancellationToken).ConfigureAwait(false);break;case StringUtils.LineFeed:ProcessLineFeed();break;default:if(char.IsWhiteSpace(currentChar)){_charPos++;}else{if(SupportMultipleContent&&Depth==0){SetStateBasedOnCurrent();return false;}throw JsonReaderException.Create(this,"After parsing a value an unexpected character was encountered: {0}.".FormatWith(CultureInfo.InvariantCulture,currentChar));}break;}}}private async Task<bool>ReadFromFinishedAsync(CancellationToken cancellationToken){MiscellaneousUtils.Assert(_chars!=null);if(await EnsureCharsAsync(0,false,cancellationToken).ConfigureAwait(false)){await EatWhitespaceAsync(cancellationToken).ConfigureAwait(false);if(_isEndOfFile){SetToken(JsonToken.None);return false;}if(_chars[_charPos]=='/'){await ParseCommentAsync(true,cancellationToken).ConfigureAwait(false);return true;}throw JsonReaderException.Create(this,"Additional text encountered after finished reading JSON content: {0}.".FormatWith(CultureInfo.InvariantCulture,_chars[_charPos]));}SetToken(JsonToken.None);return false;}private Task<int>ReadDataAsync(bool append,CancellationToken cancellationToken){return ReadDataAsync(append,0,cancellationToken);}private async Task<int>ReadDataAsync(bool append,int charsRequired,CancellationToken cancellationToken){MiscellaneousUtils.Assert(_chars!=null);if(_isEndOfFile){return 0;}PrepareBufferForReadData(append,charsRequired);int charsRead=await _reader.ReadAsync(_chars,_charsUsed,_chars.Length-_charsUsed-1,cancellationToken).ConfigureAwait(false);_charsUsed+=charsRead;if(charsRead==0){_isEndOfFile=true;}_chars[_charsUsed]='\0';return charsRead;}private async Task<bool>ParseValueAsync(CancellationToken cancellationToken){MiscellaneousUtils.Assert(_chars!=null);while(true){char currentChar=_chars[_charPos];switch(currentChar){case'\0':if(_charsUsed==_charPos){if(await ReadDataAsync(false,cancellationToken).ConfigureAwait(false)==0){return false;}}else{_charPos++;}break;case'"':case'\'':await ParseStringAsync(currentChar,ReadType.Read,cancellationToken).ConfigureAwait(false);return true;case't':await ParseTrueAsync(cancellationToken).ConfigureAwait(false);return true;case'f':await ParseFalseAsync(cancellationToken).ConfigureAwait(false);return true;case'n':if(await EnsureCharsAsync(1,true,cancellationToken).ConfigureAwait(false)){switch(_chars[_charPos+1]){case'u':await ParseNullAsync(cancellationToken).ConfigureAwait(false);break;case'e':await ParseConstructorAsync(cancellationToken).ConfigureAwait(false);break;default:throw CreateUnexpectedCharacterException(_chars[_charPos]);}}else{_charPos++;throw CreateUnexpectedEndException();}return true;case'N':await ParseNumberNaNAsync(ReadType.Read,cancellationToken).ConfigureAwait(false);return true;case'I':await ParseNumberPositiveInfinityAsync(ReadType.Read,cancellationToken).ConfigureAwait(false);return true;case'-':if(await EnsureCharsAsync(1,true,cancellationToken).ConfigureAwait(false)&&_chars[_charPos+1]=='I'){await ParseNumberNegativeInfinityAsync(ReadType.Read,cancellationToken).ConfigureAwait(false);}else{await ParseNumberAsync(ReadType.Read,cancellationToken).ConfigureAwait(false);}return true;case'/':await ParseCommentAsync(true,cancellationToken).ConfigureAwait(false);return true;case'u':await ParseUndefinedAsync(cancellationToken).ConfigureAwait(false);return true;case'{':_charPos++;SetToken(JsonToken.StartObject);return true;case'[':_charPos++;SetToken(JsonToken.StartArray);return true;case']':_charPos++;SetToken(JsonToken.EndArray);return true;case',':SetToken(JsonToken.Undefined);return true;case')':_charPos++;SetToken(JsonToken.EndConstructor);return true;case StringUtils.CarriageReturn:await ProcessCarriageReturnAsync(false,cancellationToken).ConfigureAwait(false);break;case StringUtils.LineFeed:ProcessLineFeed();break;case' ':case StringUtils.Tab:_charPos++;break;default:if(char.IsWhiteSpace(currentChar)){_charPos++;break;}if(char.IsNumber(currentChar)||currentChar=='-'||currentChar=='.'){await ParseNumberAsync(ReadType.Read,cancellationToken).ConfigureAwait(false);return true;}throw CreateUnexpectedCharacterException(currentChar);}}}private async Task ReadStringIntoBufferAsync(char quote,CancellationToken cancellationToken){MiscellaneousUtils.Assert(_chars!=null);int charPos=_charPos;int initialPosition=_charPos;int lastWritePosition=_charPos;_stringBuffer.Position=0;while(true){switch(_chars[charPos++]){case'\0':if(_charsUsed==charPos-1){charPos--;if(await ReadDataAsync(true,cancellationToken).ConfigureAwait(false)==0){_charPos=charPos;throw JsonReaderException.Create(this,"Unterminated string. Expected delimiter: {0}.".FormatWith(CultureInfo.InvariantCulture,quote));}}break;case'\\':_charPos=charPos;if(!await EnsureCharsAsync(0,true,cancellationToken).ConfigureAwait(false)){throw JsonReaderException.Create(this,"Unterminated string. Expected delimiter: {0}.".FormatWith(CultureInfo.InvariantCulture,quote));}int escapeStartPos=charPos-1;char currentChar=_chars[charPos];charPos++;char writeChar;switch(currentChar){case'b':writeChar='\b';break;case't':writeChar='\t';break;case'n':writeChar='\n';break;case'f':writeChar='\f';break;case'r':writeChar='\r';break;case'\\':writeChar='\\';break;case'"':case'\'':case'/':writeChar=currentChar;break;case'u':_charPos=charPos;writeChar=await ParseUnicodeAsync(cancellationToken).ConfigureAwait(false);if(StringUtils.IsLowSurrogate(writeChar)){writeChar=UnicodeReplacementChar;}else if(StringUtils.IsHighSurrogate(writeChar)){bool anotherHighSurrogate;do{anotherHighSurrogate=false;if(await EnsureCharsAsync(2,true,cancellationToken).ConfigureAwait(false)&&_chars[_charPos]=='\\'&&_chars[_charPos+1]=='u'){char highSurrogate=writeChar;_charPos+=2;writeChar=await ParseUnicodeAsync(cancellationToken).ConfigureAwait(false);if(StringUtils.IsLowSurrogate(writeChar)){}else if(StringUtils.IsHighSurrogate(writeChar)){highSurrogate=UnicodeReplacementChar;anotherHighSurrogate=true;}else{highSurrogate=UnicodeReplacementChar;}EnsureBufferNotEmpty();WriteCharToBuffer(highSurrogate,lastWritePosition,escapeStartPos);lastWritePosition=_charPos;}else{writeChar=UnicodeReplacementChar;}}while(anotherHighSurrogate);}charPos=_charPos;break;default:_charPos=charPos;throw JsonReaderException.Create(this,"Bad JSON escape sequence: {0}.".FormatWith(CultureInfo.InvariantCulture,@"\"+currentChar));}EnsureBufferNotEmpty();WriteCharToBuffer(writeChar,lastWritePosition,escapeStartPos);lastWritePosition=charPos;break;case StringUtils.CarriageReturn:_charPos=charPos-1;await ProcessCarriageReturnAsync(true,cancellationToken).ConfigureAwait(false);charPos=_charPos;break;case StringUtils.LineFeed:_charPos=charPos-1;ProcessLineFeed();charPos=_charPos;break;case'"':case'\'':if(_chars[charPos-1]==quote){FinishReadStringIntoBuffer(charPos-1,initialPosition,lastWritePosition);return;}break;}}}private Task ProcessCarriageReturnAsync(bool append,CancellationToken cancellationToken){_charPos++;Task<bool>task=EnsureCharsAsync(1,append,cancellationToken);if(task.IsCompletedSucessfully()){SetNewLine(task.Result);return AsyncUtils.CompletedTask;}return ProcessCarriageReturnAsync(task);}private async Task ProcessCarriageReturnAsync(Task<bool>task){SetNewLine(await task.ConfigureAwait(false));}private async Task<char>ParseUnicodeAsync(CancellationToken cancellationToken){return ConvertUnicode(await EnsureCharsAsync(4,true,cancellationToken).ConfigureAwait(false));}private Task<bool>EnsureCharsAsync(int relativePosition,bool append,CancellationToken cancellationToken){if(_charPos+relativePosition<_charsUsed){return AsyncUtils.True;}if(_isEndOfFile){return AsyncUtils.False;}return ReadCharsAsync(relativePosition,append,cancellationToken);}private async Task<bool>ReadCharsAsync(int relativePosition,bool append,CancellationToken cancellationToken){int charsRequired=_charPos+relativePosition-_charsUsed+1;do{int charsRead=await ReadDataAsync(append,charsRequired,cancellationToken).ConfigureAwait(false);if(charsRead==0){return false;}charsRequired-=charsRead;}while(charsRequired>0);return true;}private async Task<bool>ParseObjectAsync(CancellationToken cancellationToken){MiscellaneousUtils.Assert(_chars!=null);while(true){char currentChar=_chars[_charPos];switch(currentChar){case'\0':if(_charsUsed==_charPos){if(await ReadDataAsync(false,cancellationToken).ConfigureAwait(false)==0){return false;}}else{_charPos++;}break;case'}':SetToken(JsonToken.EndObject);_charPos++;return true;case'/':await ParseCommentAsync(true,cancellationToken).ConfigureAwait(false);return true;case StringUtils.CarriageReturn:await ProcessCarriageReturnAsync(false,cancellationToken).ConfigureAwait(false);break;case StringUtils.LineFeed:ProcessLineFeed();break;case' ':case StringUtils.Tab:_charPos++;break;default:if(char.IsWhiteSpace(currentChar)){_charPos++;}else{return await ParsePropertyAsync(cancellationToken).ConfigureAwait(false);}break;}}}private async Task ParseCommentAsync(bool setToken,CancellationToken cancellationToken){MiscellaneousUtils.Assert(_chars!=null);_charPos++;if(!await EnsureCharsAsync(1,false,cancellationToken).ConfigureAwait(false)){throw JsonReaderException.Create(this,"Unexpected end while parsing comment.");}bool singlelineComment;if(_chars[_charPos]=='*'){singlelineComment=false;}else if(_chars[_charPos]=='/'){singlelineComment=true;}else{throw JsonReaderException.Create(this,"Error parsing comment. Expected: *, got {0}.".FormatWith(CultureInfo.InvariantCulture,_chars[_charPos]));}_charPos++;int initialPosition=_charPos;while(true){switch(_chars[_charPos]){case'\0':if(_charsUsed==_charPos){if(await ReadDataAsync(true,cancellationToken).ConfigureAwait(false)==0){if(!singlelineComment){throw JsonReaderException.Create(this,"Unexpected end while parsing comment.");}EndComment(setToken,initialPosition,_charPos);return;}}else{_charPos++;}break;case'*':_charPos++;if(!singlelineComment){if(await EnsureCharsAsync(0,true,cancellationToken).ConfigureAwait(false)){if(_chars[_charPos]=='/'){EndComment(setToken,initialPosition,_charPos-1);_charPos++;return;}}}break;case StringUtils.CarriageReturn:if(singlelineComment){EndComment(setToken,initialPosition,_charPos);return;}await ProcessCarriageReturnAsync(true,cancellationToken).ConfigureAwait(false);break;case StringUtils.LineFeed:if(singlelineComment){EndComment(setToken,initialPosition,_charPos);return;}ProcessLineFeed();break;default:_charPos++;break;}}}private async Task EatWhitespaceAsync(CancellationToken cancellationToken){MiscellaneousUtils.Assert(_chars!=null);while(true){char currentChar=_chars[_charPos];switch(currentChar){case'\0':if(_charsUsed==_charPos){if(await ReadDataAsync(false,cancellationToken).ConfigureAwait(false)==0){return;}}else{_charPos++;}break;case StringUtils.CarriageReturn:await ProcessCarriageReturnAsync(false,cancellationToken).ConfigureAwait(false);break;case StringUtils.LineFeed:ProcessLineFeed();break;default:if(currentChar==' '||char.IsWhiteSpace(currentChar)){_charPos++;}else{return;}break;}}}private async Task ParseStringAsync(char quote,ReadType readType,CancellationToken cancellationToken){cancellationToken.ThrowIfCancellationRequested();_charPos++;ShiftBufferIfNeeded();await ReadStringIntoBufferAsync(quote,cancellationToken).ConfigureAwait(false);ParseReadString(quote,readType);}private async Task<bool>MatchValueAsync(string value,CancellationToken cancellationToken){return MatchValue(await EnsureCharsAsync(value.Length-1,true,cancellationToken).ConfigureAwait(false),value);}private async Task<bool>MatchValueWithTrailingSeparatorAsync(string value,CancellationToken cancellationToken){MiscellaneousUtils.Assert(_chars!=null);if(!await MatchValueAsync(value,cancellationToken).ConfigureAwait(false)){return false;}if(!await EnsureCharsAsync(0,false,cancellationToken).ConfigureAwait(false)){return true;}return IsSeparator(_chars[_charPos])||_chars[_charPos]=='\0';}private async Task MatchAndSetAsync(string value,JsonToken newToken,object?tokenValue,CancellationToken cancellationToken){if(await MatchValueWithTrailingSeparatorAsync(value,cancellationToken).ConfigureAwait(false)){SetToken(newToken,tokenValue);}else{throw JsonReaderException.Create(this,"Error parsing "+newToken.ToString().ToLowerInvariant()+" value.");}}private Task ParseTrueAsync(CancellationToken cancellationToken){return MatchAndSetAsync(JsonConvert.True,JsonToken.Boolean,true,cancellationToken);}private Task ParseFalseAsync(CancellationToken cancellationToken){return MatchAndSetAsync(JsonConvert.False,JsonToken.Boolean,false,cancellationToken);}private Task ParseNullAsync(CancellationToken cancellationToken){return MatchAndSetAsync(JsonConvert.Null,JsonToken.Null,null,cancellationToken);}private async Task ParseConstructorAsync(CancellationToken cancellationToken){MiscellaneousUtils.Assert(_chars!=null);if(await MatchValueWithTrailingSeparatorAsync("new",cancellationToken).ConfigureAwait(false)){await EatWhitespaceAsync(cancellationToken).ConfigureAwait(false);int initialPosition=_charPos;int endPosition;while(true){char currentChar=_chars[_charPos];if(currentChar=='\0'){if(_charsUsed==_charPos){if(await ReadDataAsync(true,cancellationToken).ConfigureAwait(false)==0){throw JsonReaderException.Create(this,"Unexpected end while parsing constructor.");}}else{endPosition=_charPos;_charPos++;break;}}else if(char.IsLetterOrDigit(currentChar)){_charPos++;}else if(currentChar==StringUtils.CarriageReturn){endPosition=_charPos;await ProcessCarriageReturnAsync(true,cancellationToken).ConfigureAwait(false);break;}else if(currentChar==StringUtils.LineFeed){endPosition=_charPos;ProcessLineFeed();break;}else if(char.IsWhiteSpace(currentChar)){endPosition=_charPos;_charPos++;break;}else if(currentChar=='('){endPosition=_charPos;break;}else{throw JsonReaderException.Create(this,"Unexpected character while parsing constructor: {0}.".FormatWith(CultureInfo.InvariantCulture,currentChar));}}_stringReference=new StringReference(_chars,initialPosition,endPosition-initialPosition);string constructorName=_stringReference.ToString();await EatWhitespaceAsync(cancellationToken).ConfigureAwait(false);if(_chars[_charPos]!='('){throw JsonReaderException.Create(this,"Unexpected character while parsing constructor: {0}.".FormatWith(CultureInfo.InvariantCulture,_chars[_charPos]));}_charPos++;ClearRecentString();SetToken(JsonToken.StartConstructor,constructorName);}else{throw JsonReaderException.Create(this,"Unexpected content while parsing JSON.");}}private async Task<object>ParseNumberNaNAsync(ReadType readType,CancellationToken cancellationToken){return ParseNumberNaN(readType,await MatchValueWithTrailingSeparatorAsync(JsonConvert.NaN,cancellationToken).ConfigureAwait(false));}private async Task<object>ParseNumberPositiveInfinityAsync(ReadType readType,CancellationToken cancellationToken){return ParseNumberPositiveInfinity(readType,await MatchValueWithTrailingSeparatorAsync(JsonConvert.PositiveInfinity,cancellationToken).ConfigureAwait(false));}private async Task<object>ParseNumberNegativeInfinityAsync(ReadType readType,CancellationToken cancellationToken){return ParseNumberNegativeInfinity(readType,await MatchValueWithTrailingSeparatorAsync(JsonConvert.NegativeInfinity,cancellationToken).ConfigureAwait(false));}private async Task ParseNumberAsync(ReadType readType,CancellationToken cancellationToken){MiscellaneousUtils.Assert(_chars!=null);ShiftBufferIfNeeded();char firstChar=_chars[_charPos];int initialPosition=_charPos;await ReadNumberIntoBufferAsync(cancellationToken).ConfigureAwait(false);ParseReadNumber(readType,firstChar,initialPosition);}private Task ParseUndefinedAsync(CancellationToken cancellationToken){return MatchAndSetAsync(JsonConvert.Undefined,JsonToken.Undefined,null,cancellationToken);}private async Task<bool>ParsePropertyAsync(CancellationToken cancellationToken){MiscellaneousUtils.Assert(_chars!=null);char firstChar=_chars[_charPos];char quoteChar;if(firstChar=='"'||firstChar=='\''){_charPos++;quoteChar=firstChar;ShiftBufferIfNeeded();await ReadStringIntoBufferAsync(quoteChar,cancellationToken).ConfigureAwait(false);}else if(ValidIdentifierChar(firstChar)){quoteChar='\0';ShiftBufferIfNeeded();await ParseUnquotedPropertyAsync(cancellationToken).ConfigureAwait(false);}else{throw JsonReaderException.Create(this,"Invalid property identifier character: {0}.".FormatWith(CultureInfo.InvariantCulture,_chars[_charPos]));}string propertyName;if(PropertyNameTable!=null){propertyName=PropertyNameTable.Get(_stringReference.Chars,_stringReference.StartIndex,_stringReference.Length)??_stringReference.ToString();}else{propertyName=_stringReference.ToString();}await EatWhitespaceAsync(cancellationToken).ConfigureAwait(false);if(_chars[_charPos]!=':'){throw JsonReaderException.Create(this,"Invalid character after parsing property name. Expected ':' but got: {0}.".FormatWith(CultureInfo.InvariantCulture,_chars[_charPos]));}_charPos++;SetToken(JsonToken.PropertyName,propertyName);_quoteChar=quoteChar;ClearRecentString();return true;}private async Task ReadNumberIntoBufferAsync(CancellationToken cancellationToken){MiscellaneousUtils.Assert(_chars!=null);int charPos=_charPos;while(true){char currentChar=_chars[charPos];if(currentChar=='\0'){_charPos=charPos;if(_charsUsed==charPos){if(await ReadDataAsync(true,cancellationToken).ConfigureAwait(false)==0){return;}}else{return;}}else if(ReadNumberCharIntoBuffer(currentChar,charPos)){return;}else{charPos++;}}}private async Task ParseUnquotedPropertyAsync(CancellationToken cancellationToken){MiscellaneousUtils.Assert(_chars!=null);int initialPosition=_charPos;while(true){char currentChar=_chars[_charPos];if(currentChar=='\0'){if(_charsUsed==_charPos){if(await ReadDataAsync(true,cancellationToken).ConfigureAwait(false)==0){throw JsonReaderException.Create(this,"Unexpected end while parsing unquoted property name.");}continue;}_stringReference=new StringReference(_chars,initialPosition,_charPos-initialPosition);return;}if(ReadUnquotedPropertyReportIfDone(currentChar,initialPosition)){return;}}}private async Task<bool>ReadNullCharAsync(CancellationToken cancellationToken){if(_charsUsed==_charPos){if(await ReadDataAsync(false,cancellationToken).ConfigureAwait(false)==0){_isEndOfFile=true;return true;}}else{_charPos++;}return false;}private async Task HandleNullAsync(CancellationToken cancellationToken){MiscellaneousUtils.Assert(_chars!=null);if(await EnsureCharsAsync(1,true,cancellationToken).ConfigureAwait(false)){if(_chars[_charPos+1]=='u'){await ParseNullAsync(cancellationToken).ConfigureAwait(false);return;}_charPos+=2;throw CreateUnexpectedCharacterException(_chars[_charPos-1]);}_charPos=_charsUsed;throw CreateUnexpectedEndException();}private async Task ReadFinishedAsync(CancellationToken cancellationToken){MiscellaneousUtils.Assert(_chars!=null);if(await EnsureCharsAsync(0,false,cancellationToken).ConfigureAwait(false)){await EatWhitespaceAsync(cancellationToken).ConfigureAwait(false);if(_isEndOfFile){SetToken(JsonToken.None);return;}if(_chars[_charPos]=='/'){await ParseCommentAsync(false,cancellationToken).ConfigureAwait(false);}else{throw JsonReaderException.Create(this,"Additional text encountered after finished reading JSON content: {0}.".FormatWith(CultureInfo.InvariantCulture,_chars[_charPos]));}}SetToken(JsonToken.None);}private async Task<object?>ReadStringValueAsync(ReadType readType,CancellationToken cancellationToken){EnsureBuffer();MiscellaneousUtils.Assert(_chars!=null);switch(_currentState){case State.PostValue:if(await ParsePostValueAsync(true,cancellationToken).ConfigureAwait(false)){return null;}goto case State.Start;case State.Start:case State.Property:case State.Array:case State.ArrayStart:case State.Constructor:case State.ConstructorStart:while(true){char currentChar=_chars[_charPos];switch(currentChar){case'\0':if(await ReadNullCharAsync(cancellationToken).ConfigureAwait(false)){SetToken(JsonToken.None,null,false);return null;}break;case'"':case'\'':await ParseStringAsync(currentChar,readType,cancellationToken).ConfigureAwait(false);return FinishReadQuotedStringValue(readType);case'-':if(await EnsureCharsAsync(1,true,cancellationToken).ConfigureAwait(false)&&_chars[_charPos+1]=='I'){return ParseNumberNegativeInfinity(readType);}else{await ParseNumberAsync(readType,cancellationToken).ConfigureAwait(false);return Value;}case'.':case'0':case'1':case'2':case'3':case'4':case'5':case'6':case'7':case'8':case'9':if(readType!=ReadType.ReadAsString){_charPos++;throw CreateUnexpectedCharacterException(currentChar);}await ParseNumberAsync(ReadType.ReadAsString,cancellationToken).ConfigureAwait(false);return Value;case't':case'f':if(readType!=ReadType.ReadAsString){_charPos++;throw CreateUnexpectedCharacterException(currentChar);}string expected=currentChar=='t'?JsonConvert.True:JsonConvert.False;if(!await MatchValueWithTrailingSeparatorAsync(expected,cancellationToken).ConfigureAwait(false)){throw CreateUnexpectedCharacterException(_chars[_charPos]);}SetToken(JsonToken.String,expected);return expected;case'I':return await ParseNumberPositiveInfinityAsync(readType,cancellationToken).ConfigureAwait(false);case'N':return await ParseNumberNaNAsync(readType,cancellationToken).ConfigureAwait(false);case'n':await HandleNullAsync(cancellationToken).ConfigureAwait(false);return null;case'/':await ParseCommentAsync(false,cancellationToken).ConfigureAwait(false);break;case',':ProcessValueComma();break;case']':_charPos++;if(_currentState==State.Array||_currentState==State.ArrayStart||_currentState==State.PostValue){SetToken(JsonToken.EndArray);return null;}throw CreateUnexpectedCharacterException(currentChar);case StringUtils.CarriageReturn:await ProcessCarriageReturnAsync(false,cancellationToken).ConfigureAwait(false);break;case StringUtils.LineFeed:ProcessLineFeed();break;case' ':case StringUtils.Tab:_charPos++;break;default:_charPos++;if(!char.IsWhiteSpace(currentChar)){throw CreateUnexpectedCharacterException(currentChar);}break;}}case State.Finished:await ReadFinishedAsync(cancellationToken).ConfigureAwait(false);return null;default:throw JsonReaderException.Create(this,"Unexpected state: {0}.".FormatWith(CultureInfo.InvariantCulture,CurrentState));}}private async Task<object?>ReadNumberValueAsync(ReadType readType,CancellationToken cancellationToken){EnsureBuffer();MiscellaneousUtils.Assert(_chars!=null);switch(_currentState){case State.PostValue:if(await ParsePostValueAsync(true,cancellationToken).ConfigureAwait(false)){return null;}goto case State.Start;case State.Start:case State.Property:case State.Array:case State.ArrayStart:case State.Constructor:case State.ConstructorStart:while(true){char currentChar=_chars[_charPos];switch(currentChar){case'\0':if(await ReadNullCharAsync(cancellationToken).ConfigureAwait(false)){SetToken(JsonToken.None,null,false);return null;}break;case'"':case'\'':await ParseStringAsync(currentChar,readType,cancellationToken).ConfigureAwait(false);return FinishReadQuotedNumber(readType);case'n':await HandleNullAsync(cancellationToken).ConfigureAwait(false);return null;case'N':return await ParseNumberNaNAsync(readType,cancellationToken).ConfigureAwait(false);case'I':return await ParseNumberPositiveInfinityAsync(readType,cancellationToken).ConfigureAwait(false);case'-':if(await EnsureCharsAsync(1,true,cancellationToken).ConfigureAwait(false)&&_chars[_charPos+1]=='I'){return await ParseNumberNegativeInfinityAsync(readType,cancellationToken).ConfigureAwait(false);}else{await ParseNumberAsync(readType,cancellationToken).ConfigureAwait(false);return Value;}case'.':case'0':case'1':case'2':case'3':case'4':case'5':case'6':case'7':case'8':case'9':await ParseNumberAsync(readType,cancellationToken).ConfigureAwait(false);return Value;case'/':await ParseCommentAsync(false,cancellationToken).ConfigureAwait(false);break;case',':ProcessValueComma();break;case']':_charPos++;if(_currentState==State.Array||_currentState==State.ArrayStart||_currentState==State.PostValue){SetToken(JsonToken.EndArray);return null;}throw CreateUnexpectedCharacterException(currentChar);case StringUtils.CarriageReturn:await ProcessCarriageReturnAsync(false,cancellationToken).ConfigureAwait(false);break;case StringUtils.LineFeed:ProcessLineFeed();break;case' ':case StringUtils.Tab:_charPos++;break;default:_charPos++;if(!char.IsWhiteSpace(currentChar)){throw CreateUnexpectedCharacterException(currentChar);}break;}}case State.Finished:await ReadFinishedAsync(cancellationToken).ConfigureAwait(false);return null;default:throw JsonReaderException.Create(this,"Unexpected state: {0}.".FormatWith(CultureInfo.InvariantCulture,CurrentState));}}public override Task<bool?>ReadAsBooleanAsync(CancellationToken cancellationToken=default){return _safeAsync?DoReadAsBooleanAsync(cancellationToken):base.ReadAsBooleanAsync(cancellationToken);}internal async Task<bool?>DoReadAsBooleanAsync(CancellationToken cancellationToken){EnsureBuffer();MiscellaneousUtils.Assert(_chars!=null);switch(_currentState){case State.PostValue:if(await ParsePostValueAsync(true,cancellationToken).ConfigureAwait(false)){return null;}goto case State.Start;case State.Start:case State.Property:case State.Array:case State.ArrayStart:case State.Constructor:case State.ConstructorStart:while(true){char currentChar=_chars[_charPos];switch(currentChar){case'\0':if(await ReadNullCharAsync(cancellationToken).ConfigureAwait(false)){SetToken(JsonToken.None,null,false);return null;}break;case'"':case'\'':await ParseStringAsync(currentChar,ReadType.Read,cancellationToken).ConfigureAwait(false);return ReadBooleanString(_stringReference.ToString());case'n':await HandleNullAsync(cancellationToken).ConfigureAwait(false);return null;case'-':case'.':case'0':case'1':case'2':case'3':case'4':case'5':case'6':case'7':case'8':case'9':await ParseNumberAsync(ReadType.Read,cancellationToken).ConfigureAwait(false);bool b;
#if HAVE_BIG_INTEGER
if(Value is BigInteger i){b=i!=0;}else
#endif
{b=Convert.ToBoolean(Value,CultureInfo.InvariantCulture);}SetToken(JsonToken.Boolean,b,false);return b;case't':case'f':bool isTrue=currentChar=='t';if(!await MatchValueWithTrailingSeparatorAsync(isTrue?JsonConvert.True:JsonConvert.False,cancellationToken).ConfigureAwait(false)){throw CreateUnexpectedCharacterException(_chars[_charPos]);}SetToken(JsonToken.Boolean,isTrue);return isTrue;case'/':await ParseCommentAsync(false,cancellationToken).ConfigureAwait(false);break;case',':ProcessValueComma();break;case']':_charPos++;if(_currentState==State.Array||_currentState==State.ArrayStart||_currentState==State.PostValue){SetToken(JsonToken.EndArray);return null;}throw CreateUnexpectedCharacterException(currentChar);case StringUtils.CarriageReturn:await ProcessCarriageReturnAsync(false,cancellationToken).ConfigureAwait(false);break;case StringUtils.LineFeed:ProcessLineFeed();break;case' ':case StringUtils.Tab:_charPos++;break;default:_charPos++;if(!char.IsWhiteSpace(currentChar)){throw CreateUnexpectedCharacterException(currentChar);}break;}}case State.Finished:await ReadFinishedAsync(cancellationToken).ConfigureAwait(false);return null;default:throw JsonReaderException.Create(this,"Unexpected state: {0}.".FormatWith(CultureInfo.InvariantCulture,CurrentState));}}public override Task<byte[]?>ReadAsBytesAsync(CancellationToken cancellationToken=default){return _safeAsync?DoReadAsBytesAsync(cancellationToken):base.ReadAsBytesAsync(cancellationToken);}internal async Task<byte[]?>DoReadAsBytesAsync(CancellationToken cancellationToken){EnsureBuffer();MiscellaneousUtils.Assert(_chars!=null);bool isWrapped=false;switch(_currentState){case State.PostValue:if(await ParsePostValueAsync(true,cancellationToken).ConfigureAwait(false)){return null;}goto case State.Start;case State.Start:case State.Property:case State.Array:case State.ArrayStart:case State.Constructor:case State.ConstructorStart:while(true){char currentChar=_chars[_charPos];switch(currentChar){case'\0':if(await ReadNullCharAsync(cancellationToken).ConfigureAwait(false)){SetToken(JsonToken.None,null,false);return null;}break;case'"':case'\'':await ParseStringAsync(currentChar,ReadType.ReadAsBytes,cancellationToken).ConfigureAwait(false);byte[]?data=(byte[]?)Value;if(isWrapped){await ReaderReadAndAssertAsync(cancellationToken).ConfigureAwait(false);if(TokenType!=JsonToken.EndObject){throw JsonReaderException.Create(this,"Error reading bytes. Unexpected token: {0}.".FormatWith(CultureInfo.InvariantCulture,TokenType));}SetToken(JsonToken.Bytes,data,false);}return data;case'{':_charPos++;SetToken(JsonToken.StartObject);await ReadIntoWrappedTypeObjectAsync(cancellationToken).ConfigureAwait(false);isWrapped=true;break;case'[':_charPos++;SetToken(JsonToken.StartArray);return await ReadArrayIntoByteArrayAsync(cancellationToken).ConfigureAwait(false);case'n':await HandleNullAsync(cancellationToken).ConfigureAwait(false);return null;case'/':await ParseCommentAsync(false,cancellationToken).ConfigureAwait(false);break;case',':ProcessValueComma();break;case']':_charPos++;if(_currentState==State.Array||_currentState==State.ArrayStart||_currentState==State.PostValue){SetToken(JsonToken.EndArray);return null;}throw CreateUnexpectedCharacterException(currentChar);case StringUtils.CarriageReturn:await ProcessCarriageReturnAsync(false,cancellationToken).ConfigureAwait(false);break;case StringUtils.LineFeed:ProcessLineFeed();break;case' ':case StringUtils.Tab:_charPos++;break;default:_charPos++;if(!char.IsWhiteSpace(currentChar)){throw CreateUnexpectedCharacterException(currentChar);}break;}}case State.Finished:await ReadFinishedAsync(cancellationToken).ConfigureAwait(false);return null;default:throw JsonReaderException.Create(this,"Unexpected state: {0}.".FormatWith(CultureInfo.InvariantCulture,CurrentState));}}private async Task ReadIntoWrappedTypeObjectAsync(CancellationToken cancellationToken){await ReaderReadAndAssertAsync(cancellationToken).ConfigureAwait(false);if(Value!=null&&Value.ToString()==JsonTypeReflector.TypePropertyName){await ReaderReadAndAssertAsync(cancellationToken).ConfigureAwait(false);if(Value!=null&&Value.ToString().StartsWith("System.Byte[]",StringComparison.Ordinal)){await ReaderReadAndAssertAsync(cancellationToken).ConfigureAwait(false);if(Value.ToString()==JsonTypeReflector.ValuePropertyName){return;}}}throw JsonReaderException.Create(this,"Error reading bytes. Unexpected token: {0}.".FormatWith(CultureInfo.InvariantCulture,JsonToken.StartObject));}public override Task<DateTime?>ReadAsDateTimeAsync(CancellationToken cancellationToken=default){return _safeAsync?DoReadAsDateTimeAsync(cancellationToken):base.ReadAsDateTimeAsync(cancellationToken);}internal async Task<DateTime?>DoReadAsDateTimeAsync(CancellationToken cancellationToken){return(DateTime?)await ReadStringValueAsync(ReadType.ReadAsDateTime,cancellationToken).ConfigureAwait(false);}public override Task<DateTimeOffset?>ReadAsDateTimeOffsetAsync(CancellationToken cancellationToken=default){return _safeAsync?DoReadAsDateTimeOffsetAsync(cancellationToken):base.ReadAsDateTimeOffsetAsync(cancellationToken);}internal async Task<DateTimeOffset?>DoReadAsDateTimeOffsetAsync(CancellationToken cancellationToken){return(DateTimeOffset?)await ReadStringValueAsync(ReadType.ReadAsDateTimeOffset,cancellationToken).ConfigureAwait(false);}public override Task<decimal?>ReadAsDecimalAsync(CancellationToken cancellationToken=default){return _safeAsync?DoReadAsDecimalAsync(cancellationToken):base.ReadAsDecimalAsync(cancellationToken);}internal async Task<decimal?>DoReadAsDecimalAsync(CancellationToken cancellationToken){return(decimal?)await ReadNumberValueAsync(ReadType.ReadAsDecimal,cancellationToken).ConfigureAwait(false);}public override Task<double?>ReadAsDoubleAsync(CancellationToken cancellationToken=default){return _safeAsync?DoReadAsDoubleAsync(cancellationToken):base.ReadAsDoubleAsync(cancellationToken);}internal async Task<double?>DoReadAsDoubleAsync(CancellationToken cancellationToken){return(double?)await ReadNumberValueAsync(ReadType.ReadAsDouble,cancellationToken).ConfigureAwait(false);}public override Task<int?>ReadAsInt32Async(CancellationToken cancellationToken=default){return _safeAsync?DoReadAsInt32Async(cancellationToken):base.ReadAsInt32Async(cancellationToken);}internal async Task<int?>DoReadAsInt32Async(CancellationToken cancellationToken){return(int?)await ReadNumberValueAsync(ReadType.ReadAsInt32,cancellationToken).ConfigureAwait(false);}public override Task<string?>ReadAsStringAsync(CancellationToken cancellationToken=default){return _safeAsync?DoReadAsStringAsync(cancellationToken):base.ReadAsStringAsync(cancellationToken);}internal async Task<string?>DoReadAsStringAsync(CancellationToken cancellationToken){return(string?)await ReadStringValueAsync(ReadType.ReadAsString,cancellationToken).ConfigureAwait(false);}}}
#endif
#if HAVE_BIG_INTEGER
#endif
namespace Newtonsoft.Json{internal enum ReadType{Read,ReadAsInt32,ReadAsInt64,ReadAsBytes,ReadAsString,ReadAsDecimal,ReadAsDateTime,
#if HAVE_DATE_TIME_OFFSET
ReadAsDateTimeOffset,
#endif
ReadAsDouble,ReadAsBoolean}public partial class JsonTextReader:JsonReader,IJsonLineInfo{private const char UnicodeReplacementChar='\uFFFD';
#if HAVE_BIG_INTEGER
private const int MaximumJavascriptIntegerCharacterLength=380;
#endif
#if DEBUG
internal int LargeBufferLength{get;set;}=int.MaxValue/2;
#else
private const int LargeBufferLength=int.MaxValue/2;
#endif
private readonly TextReader _reader;private char[]?_chars;private int _charsUsed;private int _charPos;private int _lineStartPos;private int _lineNumber;private bool _isEndOfFile;private StringBuffer _stringBuffer;private StringReference _stringReference;private IArrayPool<char>?_arrayPool;public JsonTextReader(TextReader reader){if(reader==null){throw new ArgumentNullException(nameof(reader));}_reader=reader;_lineNumber=1;
#if HAVE_ASYNC
_safeAsync=GetType()==typeof(JsonTextReader);
#endif
}
#if DEBUG
internal char[]?CharBuffer{get=>_chars;set=>_chars=value;}internal int CharPos=>_charPos;
#endif
public JsonNameTable?PropertyNameTable{get;set;}public IArrayPool<char>?ArrayPool{get=>_arrayPool;set{if(value==null){throw new ArgumentNullException(nameof(value));}_arrayPool=value;}}private void EnsureBufferNotEmpty(){if(_stringBuffer.IsEmpty){_stringBuffer=new StringBuffer(_arrayPool,1024);}}private void SetNewLine(bool hasNextChar){MiscellaneousUtils.Assert(_chars!=null);if(hasNextChar&&_chars[_charPos]==StringUtils.LineFeed){_charPos++;}OnNewLine(_charPos);}private void OnNewLine(int pos){_lineNumber++;_lineStartPos=pos;}private void ParseString(char quote,ReadType readType){_charPos++;ShiftBufferIfNeeded();ReadStringIntoBuffer(quote);ParseReadString(quote,readType);}private void ParseReadString(char quote,ReadType readType){SetPostValueState(true);switch(readType){case ReadType.ReadAsBytes:Guid g;byte[]data;if(_stringReference.Length==0){data=CollectionUtils.ArrayEmpty<byte>();}else if(_stringReference.Length==36&&ConvertUtils.TryConvertGuid(_stringReference.ToString(),out g)){data=g.ToByteArray();}else{data=Convert.FromBase64CharArray(_stringReference.Chars,_stringReference.StartIndex,_stringReference.Length);}SetToken(JsonToken.Bytes,data,false);break;case ReadType.ReadAsString:string text=_stringReference.ToString();SetToken(JsonToken.String,text,false);_quoteChar=quote;break;case ReadType.ReadAsInt32:case ReadType.ReadAsDecimal:case ReadType.ReadAsBoolean:break;default:if(_dateParseHandling!=DateParseHandling.None){DateParseHandling dateParseHandling;if(readType==ReadType.ReadAsDateTime){dateParseHandling=DateParseHandling.DateTime;}
#if HAVE_DATE_TIME_OFFSET
else if(readType==ReadType.ReadAsDateTimeOffset){dateParseHandling=DateParseHandling.DateTimeOffset;}
#endif
else{dateParseHandling=_dateParseHandling;}if(dateParseHandling==DateParseHandling.DateTime){if(DateTimeUtils.TryParseDateTime(_stringReference,DateTimeZoneHandling,DateFormatString,Culture,out DateTime dt)){SetToken(JsonToken.Date,dt,false);return;}}
#if HAVE_DATE_TIME_OFFSET
else{if(DateTimeUtils.TryParseDateTimeOffset(_stringReference,DateFormatString,Culture,out DateTimeOffset dt)){SetToken(JsonToken.Date,dt,false);return;}}
#endif
}SetToken(JsonToken.String,_stringReference.ToString(),false);_quoteChar=quote;break;}}private static void BlockCopyChars(char[]src,int srcOffset,char[]dst,int dstOffset,int count){const int charByteCount=2;Buffer.BlockCopy(src,srcOffset*charByteCount,dst,dstOffset*charByteCount,count*charByteCount);}private void ShiftBufferIfNeeded(){MiscellaneousUtils.Assert(_chars!=null);int length=_chars.Length;if(length-_charPos<=length*0.1||length>=LargeBufferLength){int count=_charsUsed-_charPos;if(count>0){BlockCopyChars(_chars,_charPos,_chars,0,count);}_lineStartPos-=_charPos;_charPos=0;_charsUsed=count;_chars[_charsUsed]='\0';}}private int ReadData(bool append){return ReadData(append,0);}private void PrepareBufferForReadData(bool append,int charsRequired){MiscellaneousUtils.Assert(_chars!=null);if(_charsUsed+charsRequired>=_chars.Length-1){if(append){int doubledArrayLength=_chars.Length*2;int newArrayLength=Math.Max(doubledArrayLength<0?int.MaxValue:doubledArrayLength,_charsUsed+charsRequired+1);char[]dst=BufferUtils.RentBuffer(_arrayPool,newArrayLength);BlockCopyChars(_chars,0,dst,0,_chars.Length);BufferUtils.ReturnBuffer(_arrayPool,_chars);_chars=dst;}else{int remainingCharCount=_charsUsed-_charPos;if(remainingCharCount+charsRequired+1>=_chars.Length){char[]dst=BufferUtils.RentBuffer(_arrayPool,remainingCharCount+charsRequired+1);if(remainingCharCount>0){BlockCopyChars(_chars,_charPos,dst,0,remainingCharCount);}BufferUtils.ReturnBuffer(_arrayPool,_chars);_chars=dst;}else{if(remainingCharCount>0){BlockCopyChars(_chars,_charPos,_chars,0,remainingCharCount);}}_lineStartPos-=_charPos;_charPos=0;_charsUsed=remainingCharCount;}}}private int ReadData(bool append,int charsRequired){if(_isEndOfFile){return 0;}PrepareBufferForReadData(append,charsRequired);MiscellaneousUtils.Assert(_chars!=null);int attemptCharReadCount=_chars.Length-_charsUsed-1;int charsRead=_reader.Read(_chars,_charsUsed,attemptCharReadCount);_charsUsed+=charsRead;if(charsRead==0){_isEndOfFile=true;}_chars[_charsUsed]='\0';return charsRead;}private bool EnsureChars(int relativePosition,bool append){if(_charPos+relativePosition>=_charsUsed){return ReadChars(relativePosition,append);}return true;}private bool ReadChars(int relativePosition,bool append){if(_isEndOfFile){return false;}int charsRequired=_charPos+relativePosition-_charsUsed+1;int totalCharsRead=0;do{int charsRead=ReadData(append,charsRequired-totalCharsRead);if(charsRead==0){break;}totalCharsRead+=charsRead;}while(totalCharsRead<charsRequired);if(totalCharsRead<charsRequired){return false;}return true;}public override bool Read(){EnsureBuffer();MiscellaneousUtils.Assert(_chars!=null);while(true){switch(_currentState){case State.Start:case State.Property:case State.Array:case State.ArrayStart:case State.Constructor:case State.ConstructorStart:return ParseValue();case State.Object:case State.ObjectStart:return ParseObject();case State.PostValue:if(ParsePostValue(false)){return true;}break;case State.Finished:if(EnsureChars(0,false)){EatWhitespace();if(_isEndOfFile){SetToken(JsonToken.None);return false;}if(_chars[_charPos]=='/'){ParseComment(true);return true;}throw JsonReaderException.Create(this,"Additional text encountered after finished reading JSON content: {0}.".FormatWith(CultureInfo.InvariantCulture,_chars[_charPos]));}SetToken(JsonToken.None);return false;default:throw JsonReaderException.Create(this,"Unexpected state: {0}.".FormatWith(CultureInfo.InvariantCulture,CurrentState));}}}public override int?ReadAsInt32(){return(int?)ReadNumberValue(ReadType.ReadAsInt32);}public override DateTime?ReadAsDateTime(){return(DateTime?)ReadStringValue(ReadType.ReadAsDateTime);}public override string?ReadAsString(){return(string?)ReadStringValue(ReadType.ReadAsString);}public override byte[]?ReadAsBytes(){EnsureBuffer();MiscellaneousUtils.Assert(_chars!=null);bool isWrapped=false;switch(_currentState){case State.PostValue:if(ParsePostValue(true)){return null;}goto case State.Start;case State.Start:case State.Property:case State.Array:case State.ArrayStart:case State.Constructor:case State.ConstructorStart:while(true){char currentChar=_chars[_charPos];switch(currentChar){case'\0':if(ReadNullChar()){SetToken(JsonToken.None,null,false);return null;}break;case'"':case'\'':ParseString(currentChar,ReadType.ReadAsBytes);byte[]?data=(byte[]?)Value;if(isWrapped){ReaderReadAndAssert();if(TokenType!=JsonToken.EndObject){throw JsonReaderException.Create(this,"Error reading bytes. Unexpected token: {0}.".FormatWith(CultureInfo.InvariantCulture,TokenType));}SetToken(JsonToken.Bytes,data,false);}return data;case'{':_charPos++;SetToken(JsonToken.StartObject);ReadIntoWrappedTypeObject();isWrapped=true;break;case'[':_charPos++;SetToken(JsonToken.StartArray);return ReadArrayIntoByteArray();case'n':HandleNull();return null;case'/':ParseComment(false);break;case',':ProcessValueComma();break;case']':_charPos++;if(_currentState==State.Array||_currentState==State.ArrayStart||_currentState==State.PostValue){SetToken(JsonToken.EndArray);return null;}throw CreateUnexpectedCharacterException(currentChar);case StringUtils.CarriageReturn:ProcessCarriageReturn(false);break;case StringUtils.LineFeed:ProcessLineFeed();break;case' ':case StringUtils.Tab:_charPos++;break;default:_charPos++;if(!char.IsWhiteSpace(currentChar)){throw CreateUnexpectedCharacterException(currentChar);}break;}}case State.Finished:ReadFinished();return null;default:throw JsonReaderException.Create(this,"Unexpected state: {0}.".FormatWith(CultureInfo.InvariantCulture,CurrentState));}}private object?ReadStringValue(ReadType readType){EnsureBuffer();MiscellaneousUtils.Assert(_chars!=null);switch(_currentState){case State.PostValue:if(ParsePostValue(true)){return null;}goto case State.Start;case State.Start:case State.Property:case State.Array:case State.ArrayStart:case State.Constructor:case State.ConstructorStart:while(true){char currentChar=_chars[_charPos];switch(currentChar){case'\0':if(ReadNullChar()){SetToken(JsonToken.None,null,false);return null;}break;case'"':case'\'':ParseString(currentChar,readType);return FinishReadQuotedStringValue(readType);case'-':if(EnsureChars(1,true)&&_chars[_charPos+1]=='I'){return ParseNumberNegativeInfinity(readType);}else{ParseNumber(readType);return Value;}case'.':case'0':case'1':case'2':case'3':case'4':case'5':case'6':case'7':case'8':case'9':if(readType!=ReadType.ReadAsString){_charPos++;throw CreateUnexpectedCharacterException(currentChar);}ParseNumber(ReadType.ReadAsString);return Value;case't':case'f':if(readType!=ReadType.ReadAsString){_charPos++;throw CreateUnexpectedCharacterException(currentChar);}string expected=currentChar=='t'?JsonConvert.True:JsonConvert.False;if(!MatchValueWithTrailingSeparator(expected)){throw CreateUnexpectedCharacterException(_chars[_charPos]);}SetToken(JsonToken.String,expected);return expected;case'I':return ParseNumberPositiveInfinity(readType);case'N':return ParseNumberNaN(readType);case'n':HandleNull();return null;case'/':ParseComment(false);break;case',':ProcessValueComma();break;case']':_charPos++;if(_currentState==State.Array||_currentState==State.ArrayStart||_currentState==State.PostValue){SetToken(JsonToken.EndArray);return null;}throw CreateUnexpectedCharacterException(currentChar);case StringUtils.CarriageReturn:ProcessCarriageReturn(false);break;case StringUtils.LineFeed:ProcessLineFeed();break;case' ':case StringUtils.Tab:_charPos++;break;default:_charPos++;if(!char.IsWhiteSpace(currentChar)){throw CreateUnexpectedCharacterException(currentChar);}break;}}case State.Finished:ReadFinished();return null;default:throw JsonReaderException.Create(this,"Unexpected state: {0}.".FormatWith(CultureInfo.InvariantCulture,CurrentState));}}private object?FinishReadQuotedStringValue(ReadType readType){switch(readType){case ReadType.ReadAsBytes:case ReadType.ReadAsString:return Value;case ReadType.ReadAsDateTime:if(Value is DateTime time){return time;}return ReadDateTimeString((string?)Value);
#if HAVE_DATE_TIME_OFFSET
case ReadType.ReadAsDateTimeOffset:if(Value is DateTimeOffset offset){return offset;}return ReadDateTimeOffsetString((string?)Value);
#endif
default:throw new ArgumentOutOfRangeException(nameof(readType));}}private JsonReaderException CreateUnexpectedCharacterException(char c){return JsonReaderException.Create(this,"Unexpected character encountered while parsing value: {0}.".FormatWith(CultureInfo.InvariantCulture,c));}public override bool?ReadAsBoolean(){EnsureBuffer();MiscellaneousUtils.Assert(_chars!=null);switch(_currentState){case State.PostValue:if(ParsePostValue(true)){return null;}goto case State.Start;case State.Start:case State.Property:case State.Array:case State.ArrayStart:case State.Constructor:case State.ConstructorStart:while(true){char currentChar=_chars[_charPos];switch(currentChar){case'\0':if(ReadNullChar()){SetToken(JsonToken.None,null,false);return null;}break;case'"':case'\'':ParseString(currentChar,ReadType.Read);return ReadBooleanString(_stringReference.ToString());case'n':HandleNull();return null;case'-':case'.':case'0':case'1':case'2':case'3':case'4':case'5':case'6':case'7':case'8':case'9':ParseNumber(ReadType.Read);bool b;
#if HAVE_BIG_INTEGER
if(Value is BigInteger integer){b=integer!=0;}else
#endif
{b=Convert.ToBoolean(Value,CultureInfo.InvariantCulture);}SetToken(JsonToken.Boolean,b,false);return b;case't':case'f':bool isTrue=currentChar=='t';string expected=isTrue?JsonConvert.True:JsonConvert.False;if(!MatchValueWithTrailingSeparator(expected)){throw CreateUnexpectedCharacterException(_chars[_charPos]);}SetToken(JsonToken.Boolean,isTrue);return isTrue;case'/':ParseComment(false);break;case',':ProcessValueComma();break;case']':_charPos++;if(_currentState==State.Array||_currentState==State.ArrayStart||_currentState==State.PostValue){SetToken(JsonToken.EndArray);return null;}throw CreateUnexpectedCharacterException(currentChar);case StringUtils.CarriageReturn:ProcessCarriageReturn(false);break;case StringUtils.LineFeed:ProcessLineFeed();break;case' ':case StringUtils.Tab:_charPos++;break;default:_charPos++;if(!char.IsWhiteSpace(currentChar)){throw CreateUnexpectedCharacterException(currentChar);}break;}}case State.Finished:ReadFinished();return null;default:throw JsonReaderException.Create(this,"Unexpected state: {0}.".FormatWith(CultureInfo.InvariantCulture,CurrentState));}}private void ProcessValueComma(){_charPos++;if(_currentState!=State.PostValue){SetToken(JsonToken.Undefined);JsonReaderException ex=CreateUnexpectedCharacterException(',');_charPos--;throw ex;}SetStateBasedOnCurrent();}private object?ReadNumberValue(ReadType readType){EnsureBuffer();MiscellaneousUtils.Assert(_chars!=null);switch(_currentState){case State.PostValue:if(ParsePostValue(true)){return null;}goto case State.Start;case State.Start:case State.Property:case State.Array:case State.ArrayStart:case State.Constructor:case State.ConstructorStart:while(true){char currentChar=_chars[_charPos];switch(currentChar){case'\0':if(ReadNullChar()){SetToken(JsonToken.None,null,false);return null;}break;case'"':case'\'':ParseString(currentChar,readType);return FinishReadQuotedNumber(readType);case'n':HandleNull();return null;case'N':return ParseNumberNaN(readType);case'I':return ParseNumberPositiveInfinity(readType);case'-':if(EnsureChars(1,true)&&_chars[_charPos+1]=='I'){return ParseNumberNegativeInfinity(readType);}else{ParseNumber(readType);return Value;}case'.':case'0':case'1':case'2':case'3':case'4':case'5':case'6':case'7':case'8':case'9':ParseNumber(readType);return Value;case'/':ParseComment(false);break;case',':ProcessValueComma();break;case']':_charPos++;if(_currentState==State.Array||_currentState==State.ArrayStart||_currentState==State.PostValue){SetToken(JsonToken.EndArray);return null;}throw CreateUnexpectedCharacterException(currentChar);case StringUtils.CarriageReturn:ProcessCarriageReturn(false);break;case StringUtils.LineFeed:ProcessLineFeed();break;case' ':case StringUtils.Tab:_charPos++;break;default:_charPos++;if(!char.IsWhiteSpace(currentChar)){throw CreateUnexpectedCharacterException(currentChar);}break;}}case State.Finished:ReadFinished();return null;default:throw JsonReaderException.Create(this,"Unexpected state: {0}.".FormatWith(CultureInfo.InvariantCulture,CurrentState));}}private object?FinishReadQuotedNumber(ReadType readType){switch(readType){case ReadType.ReadAsInt32:return ReadInt32String(_stringReference.ToString());case ReadType.ReadAsDecimal:return ReadDecimalString(_stringReference.ToString());case ReadType.ReadAsDouble:return ReadDoubleString(_stringReference.ToString());default:throw new ArgumentOutOfRangeException(nameof(readType));}}
#if HAVE_DATE_TIME_OFFSET
public override DateTimeOffset?ReadAsDateTimeOffset(){return(DateTimeOffset?)ReadStringValue(ReadType.ReadAsDateTimeOffset);}
#endif
public override decimal?ReadAsDecimal(){return(decimal?)ReadNumberValue(ReadType.ReadAsDecimal);}public override double?ReadAsDouble(){return(double?)ReadNumberValue(ReadType.ReadAsDouble);}private void HandleNull(){MiscellaneousUtils.Assert(_chars!=null);if(EnsureChars(1,true)){char next=_chars[_charPos+1];if(next=='u'){ParseNull();return;}_charPos+=2;throw CreateUnexpectedCharacterException(_chars[_charPos-1]);}_charPos=_charsUsed;throw CreateUnexpectedEndException();}private void ReadFinished(){MiscellaneousUtils.Assert(_chars!=null);if(EnsureChars(0,false)){EatWhitespace();if(_isEndOfFile){return;}if(_chars[_charPos]=='/'){ParseComment(false);}else{throw JsonReaderException.Create(this,"Additional text encountered after finished reading JSON content: {0}.".FormatWith(CultureInfo.InvariantCulture,_chars[_charPos]));}}SetToken(JsonToken.None);}private bool ReadNullChar(){if(_charsUsed==_charPos){if(ReadData(false)==0){_isEndOfFile=true;return true;}}else{_charPos++;}return false;}private void EnsureBuffer(){if(_chars==null){_chars=BufferUtils.RentBuffer(_arrayPool,1024);_chars[0]='\0';}}private void ReadStringIntoBuffer(char quote){MiscellaneousUtils.Assert(_chars!=null);int charPos=_charPos;int initialPosition=_charPos;int lastWritePosition=_charPos;_stringBuffer.Position=0;while(true){switch(_chars[charPos++]){case'\0':if(_charsUsed==charPos-1){charPos--;if(ReadData(true)==0){_charPos=charPos;throw JsonReaderException.Create(this,"Unterminated string. Expected delimiter: {0}.".FormatWith(CultureInfo.InvariantCulture,quote));}}break;case'\\':_charPos=charPos;if(!EnsureChars(0,true)){throw JsonReaderException.Create(this,"Unterminated string. Expected delimiter: {0}.".FormatWith(CultureInfo.InvariantCulture,quote));}int escapeStartPos=charPos-1;char currentChar=_chars[charPos];charPos++;char writeChar;switch(currentChar){case'b':writeChar='\b';break;case't':writeChar='\t';break;case'n':writeChar='\n';break;case'f':writeChar='\f';break;case'r':writeChar='\r';break;case'\\':writeChar='\\';break;case'"':case'\'':case'/':writeChar=currentChar;break;case'u':_charPos=charPos;writeChar=ParseUnicode();if(StringUtils.IsLowSurrogate(writeChar)){writeChar=UnicodeReplacementChar;}else if(StringUtils.IsHighSurrogate(writeChar)){bool anotherHighSurrogate;do{anotherHighSurrogate=false;if(EnsureChars(2,true)&&_chars[_charPos]=='\\'&&_chars[_charPos+1]=='u'){char highSurrogate=writeChar;_charPos+=2;writeChar=ParseUnicode();if(StringUtils.IsLowSurrogate(writeChar)){}else if(StringUtils.IsHighSurrogate(writeChar)){highSurrogate=UnicodeReplacementChar;anotherHighSurrogate=true;}else{highSurrogate=UnicodeReplacementChar;}EnsureBufferNotEmpty();WriteCharToBuffer(highSurrogate,lastWritePosition,escapeStartPos);lastWritePosition=_charPos;}else{writeChar=UnicodeReplacementChar;}}while(anotherHighSurrogate);}charPos=_charPos;break;default:_charPos=charPos;throw JsonReaderException.Create(this,"Bad JSON escape sequence: {0}.".FormatWith(CultureInfo.InvariantCulture,@"\"+currentChar));}EnsureBufferNotEmpty();WriteCharToBuffer(writeChar,lastWritePosition,escapeStartPos);lastWritePosition=charPos;break;case StringUtils.CarriageReturn:_charPos=charPos-1;ProcessCarriageReturn(true);charPos=_charPos;break;case StringUtils.LineFeed:_charPos=charPos-1;ProcessLineFeed();charPos=_charPos;break;case'"':case'\'':if(_chars[charPos-1]==quote){FinishReadStringIntoBuffer(charPos-1,initialPosition,lastWritePosition);return;}break;}}}private void FinishReadStringIntoBuffer(int charPos,int initialPosition,int lastWritePosition){MiscellaneousUtils.Assert(_chars!=null);if(initialPosition==lastWritePosition){_stringReference=new StringReference(_chars,initialPosition,charPos-initialPosition);}else{EnsureBufferNotEmpty();if(charPos>lastWritePosition){_stringBuffer.Append(_arrayPool,_chars,lastWritePosition,charPos-lastWritePosition);}_stringReference=new StringReference(_stringBuffer.InternalBuffer!,0,_stringBuffer.Position);}_charPos=charPos+1;}private void WriteCharToBuffer(char writeChar,int lastWritePosition,int writeToPosition){MiscellaneousUtils.Assert(_chars!=null);if(writeToPosition>lastWritePosition){_stringBuffer.Append(_arrayPool,_chars,lastWritePosition,writeToPosition-lastWritePosition);}_stringBuffer.Append(_arrayPool,writeChar);}private char ConvertUnicode(bool enoughChars){MiscellaneousUtils.Assert(_chars!=null);if(enoughChars){if(ConvertUtils.TryHexTextToInt(_chars,_charPos,_charPos+4,out int value)){char hexChar=Convert.ToChar(value);_charPos+=4;return hexChar;}else{throw JsonReaderException.Create(this,@"Invalid Unicode escape sequence: \u{0}.".FormatWith(CultureInfo.InvariantCulture,new string(_chars,_charPos,4)));}}else{throw JsonReaderException.Create(this,"Unexpected end while parsing Unicode escape sequence.");}}private char ParseUnicode(){return ConvertUnicode(EnsureChars(4,true));}private void ReadNumberIntoBuffer(){MiscellaneousUtils.Assert(_chars!=null);int charPos=_charPos;while(true){char currentChar=_chars[charPos];if(currentChar=='\0'){_charPos=charPos;if(_charsUsed==charPos){if(ReadData(true)==0){return;}}else{return;}}else if(ReadNumberCharIntoBuffer(currentChar,charPos)){return;}else{charPos++;}}}private bool ReadNumberCharIntoBuffer(char currentChar,int charPos){switch(currentChar){case'-':case'+':case'a':case'A':case'b':case'B':case'c':case'C':case'd':case'D':case'e':case'E':case'f':case'F':case'x':case'X':case'.':case'0':case'1':case'2':case'3':case'4':case'5':case'6':case'7':case'8':case'9':return false;default:_charPos=charPos;if(char.IsWhiteSpace(currentChar)||currentChar==','||currentChar=='}'||currentChar==']'||currentChar==')'||currentChar=='/'){return true;}throw JsonReaderException.Create(this,"Unexpected character encountered while parsing number: {0}.".FormatWith(CultureInfo.InvariantCulture,currentChar));}}private void ClearRecentString(){_stringBuffer.Position=0;_stringReference=new StringReference();}private bool ParsePostValue(bool ignoreComments){MiscellaneousUtils.Assert(_chars!=null);while(true){char currentChar=_chars[_charPos];switch(currentChar){case'\0':if(_charsUsed==_charPos){if(ReadData(false)==0){_currentState=State.Finished;return false;}}else{_charPos++;}break;case'}':_charPos++;SetToken(JsonToken.EndObject);return true;case']':_charPos++;SetToken(JsonToken.EndArray);return true;case')':_charPos++;SetToken(JsonToken.EndConstructor);return true;case'/':ParseComment(!ignoreComments);if(!ignoreComments){return true;}break;case',':_charPos++;SetStateBasedOnCurrent();return false;case' ':case StringUtils.Tab:_charPos++;break;case StringUtils.CarriageReturn:ProcessCarriageReturn(false);break;case StringUtils.LineFeed:ProcessLineFeed();break;default:if(char.IsWhiteSpace(currentChar)){_charPos++;}else{if(SupportMultipleContent&&Depth==0){SetStateBasedOnCurrent();return false;}throw JsonReaderException.Create(this,"After parsing a value an unexpected character was encountered: {0}.".FormatWith(CultureInfo.InvariantCulture,currentChar));}break;}}}private bool ParseObject(){MiscellaneousUtils.Assert(_chars!=null);while(true){char currentChar=_chars[_charPos];switch(currentChar){case'\0':if(_charsUsed==_charPos){if(ReadData(false)==0){return false;}}else{_charPos++;}break;case'}':SetToken(JsonToken.EndObject);_charPos++;return true;case'/':ParseComment(true);return true;case StringUtils.CarriageReturn:ProcessCarriageReturn(false);break;case StringUtils.LineFeed:ProcessLineFeed();break;case' ':case StringUtils.Tab:_charPos++;break;default:if(char.IsWhiteSpace(currentChar)){_charPos++;}else{return ParseProperty();}break;}}}private bool ParseProperty(){MiscellaneousUtils.Assert(_chars!=null);char firstChar=_chars[_charPos];char quoteChar;if(firstChar=='"'||firstChar=='\''){_charPos++;quoteChar=firstChar;ShiftBufferIfNeeded();ReadStringIntoBuffer(quoteChar);}else if(ValidIdentifierChar(firstChar)){quoteChar='\0';ShiftBufferIfNeeded();ParseUnquotedProperty();}else{throw JsonReaderException.Create(this,"Invalid property identifier character: {0}.".FormatWith(CultureInfo.InvariantCulture,_chars[_charPos]));}string?propertyName;if(PropertyNameTable!=null){propertyName=PropertyNameTable.Get(_stringReference.Chars,_stringReference.StartIndex,_stringReference.Length);if(propertyName==null){propertyName=_stringReference.ToString();}}else{propertyName=_stringReference.ToString();}EatWhitespace();if(_chars[_charPos]!=':'){throw JsonReaderException.Create(this,"Invalid character after parsing property name. Expected ':' but got: {0}.".FormatWith(CultureInfo.InvariantCulture,_chars[_charPos]));}_charPos++;SetToken(JsonToken.PropertyName,propertyName);_quoteChar=quoteChar;ClearRecentString();return true;}private bool ValidIdentifierChar(char value){return(char.IsLetterOrDigit(value)||value=='_'||value=='$');}private void ParseUnquotedProperty(){MiscellaneousUtils.Assert(_chars!=null);int initialPosition=_charPos;while(true){char currentChar=_chars[_charPos];if(currentChar=='\0'){if(_charsUsed==_charPos){if(ReadData(true)==0){throw JsonReaderException.Create(this,"Unexpected end while parsing unquoted property name.");}continue;}_stringReference=new StringReference(_chars,initialPosition,_charPos-initialPosition);return;}if(ReadUnquotedPropertyReportIfDone(currentChar,initialPosition)){return;}}}private bool ReadUnquotedPropertyReportIfDone(char currentChar,int initialPosition){MiscellaneousUtils.Assert(_chars!=null);if(ValidIdentifierChar(currentChar)){_charPos++;return false;}if(char.IsWhiteSpace(currentChar)||currentChar==':'){_stringReference=new StringReference(_chars,initialPosition,_charPos-initialPosition);return true;}throw JsonReaderException.Create(this,"Invalid JavaScript property identifier character: {0}.".FormatWith(CultureInfo.InvariantCulture,currentChar));}private bool ParseValue(){MiscellaneousUtils.Assert(_chars!=null);while(true){char currentChar=_chars[_charPos];switch(currentChar){case'\0':if(_charsUsed==_charPos){if(ReadData(false)==0){return false;}}else{_charPos++;}break;case'"':case'\'':ParseString(currentChar,ReadType.Read);return true;case't':ParseTrue();return true;case'f':ParseFalse();return true;case'n':if(EnsureChars(1,true)){char next=_chars[_charPos+1];if(next=='u'){ParseNull();}else if(next=='e'){ParseConstructor();}else{throw CreateUnexpectedCharacterException(_chars[_charPos]);}}else{_charPos++;throw CreateUnexpectedEndException();}return true;case'N':ParseNumberNaN(ReadType.Read);return true;case'I':ParseNumberPositiveInfinity(ReadType.Read);return true;case'-':if(EnsureChars(1,true)&&_chars[_charPos+1]=='I'){ParseNumberNegativeInfinity(ReadType.Read);}else{ParseNumber(ReadType.Read);}return true;case'/':ParseComment(true);return true;case'u':ParseUndefined();return true;case'{':_charPos++;SetToken(JsonToken.StartObject);return true;case'[':_charPos++;SetToken(JsonToken.StartArray);return true;case']':_charPos++;SetToken(JsonToken.EndArray);return true;case',':SetToken(JsonToken.Undefined);return true;case')':_charPos++;SetToken(JsonToken.EndConstructor);return true;case StringUtils.CarriageReturn:ProcessCarriageReturn(false);break;case StringUtils.LineFeed:ProcessLineFeed();break;case' ':case StringUtils.Tab:_charPos++;break;default:if(char.IsWhiteSpace(currentChar)){_charPos++;break;}if(char.IsNumber(currentChar)||currentChar=='-'||currentChar=='.'){ParseNumber(ReadType.Read);return true;}throw CreateUnexpectedCharacterException(currentChar);}}}private void ProcessLineFeed(){_charPos++;OnNewLine(_charPos);}private void ProcessCarriageReturn(bool append){_charPos++;SetNewLine(EnsureChars(1,append));}private void EatWhitespace(){MiscellaneousUtils.Assert(_chars!=null);while(true){char currentChar=_chars[_charPos];switch(currentChar){case'\0':if(_charsUsed==_charPos){if(ReadData(false)==0){return;}}else{_charPos++;}break;case StringUtils.CarriageReturn:ProcessCarriageReturn(false);break;case StringUtils.LineFeed:ProcessLineFeed();break;default:if(currentChar==' '||char.IsWhiteSpace(currentChar)){_charPos++;}else{return;}break;}}}private void ParseConstructor(){MiscellaneousUtils.Assert(_chars!=null);if(MatchValueWithTrailingSeparator("new")){EatWhitespace();int initialPosition=_charPos;int endPosition;while(true){char currentChar=_chars[_charPos];if(currentChar=='\0'){if(_charsUsed==_charPos){if(ReadData(true)==0){throw JsonReaderException.Create(this,"Unexpected end while parsing constructor.");}}else{endPosition=_charPos;_charPos++;break;}}else if(char.IsLetterOrDigit(currentChar)){_charPos++;}else if(currentChar==StringUtils.CarriageReturn){endPosition=_charPos;ProcessCarriageReturn(true);break;}else if(currentChar==StringUtils.LineFeed){endPosition=_charPos;ProcessLineFeed();break;}else if(char.IsWhiteSpace(currentChar)){endPosition=_charPos;_charPos++;break;}else if(currentChar=='('){endPosition=_charPos;break;}else{throw JsonReaderException.Create(this,"Unexpected character while parsing constructor: {0}.".FormatWith(CultureInfo.InvariantCulture,currentChar));}}_stringReference=new StringReference(_chars,initialPosition,endPosition-initialPosition);string constructorName=_stringReference.ToString();EatWhitespace();if(_chars[_charPos]!='('){throw JsonReaderException.Create(this,"Unexpected character while parsing constructor: {0}.".FormatWith(CultureInfo.InvariantCulture,_chars[_charPos]));}_charPos++;ClearRecentString();SetToken(JsonToken.StartConstructor,constructorName);}else{throw JsonReaderException.Create(this,"Unexpected content while parsing JSON.");}}private void ParseNumber(ReadType readType){ShiftBufferIfNeeded();MiscellaneousUtils.Assert(_chars!=null);char firstChar=_chars[_charPos];int initialPosition=_charPos;ReadNumberIntoBuffer();ParseReadNumber(readType,firstChar,initialPosition);}private void ParseReadNumber(ReadType readType,char firstChar,int initialPosition){MiscellaneousUtils.Assert(_chars!=null);SetPostValueState(true);_stringReference=new StringReference(_chars,initialPosition,_charPos-initialPosition);object numberValue;JsonToken numberType;bool singleDigit=(char.IsDigit(firstChar)&&_stringReference.Length==1);bool nonBase10=(firstChar=='0'&&_stringReference.Length>1&&_stringReference.Chars[_stringReference.StartIndex+1]!='.'&&_stringReference.Chars[_stringReference.StartIndex+1]!='e'&&_stringReference.Chars[_stringReference.StartIndex+1]!='E');switch(readType){case ReadType.ReadAsString:{string number=_stringReference.ToString();if(nonBase10){try{if(number.StartsWith("0x",StringComparison.OrdinalIgnoreCase)){Convert.ToInt64(number,16);}else{Convert.ToInt64(number,8);}}catch(Exception ex){throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture,number),ex);}}else{if(!double.TryParse(number,NumberStyles.Float,CultureInfo.InvariantCulture,out _)){throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture,_stringReference.ToString()));}}numberType=JsonToken.String;numberValue=number;}break;case ReadType.ReadAsInt32:{if(singleDigit){numberValue=firstChar-48;}else if(nonBase10){string number=_stringReference.ToString();try{int integer=number.StartsWith("0x",StringComparison.OrdinalIgnoreCase)?Convert.ToInt32(number,16):Convert.ToInt32(number,8);numberValue=integer;}catch(Exception ex){throw ThrowReaderError("Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture,number),ex);}}else{ParseResult parseResult=ConvertUtils.Int32TryParse(_stringReference.Chars,_stringReference.StartIndex,_stringReference.Length,out int value);if(parseResult==ParseResult.Success){numberValue=value;}else if(parseResult==ParseResult.Overflow){throw ThrowReaderError("JSON integer {0} is too large or small for an Int32.".FormatWith(CultureInfo.InvariantCulture,_stringReference.ToString()));}else{throw ThrowReaderError("Input string '{0}' is not a valid integer.".FormatWith(CultureInfo.InvariantCulture,_stringReference.ToString()));}}numberType=JsonToken.Integer;}break;case ReadType.ReadAsDecimal:{if(singleDigit){numberValue=(decimal)firstChar-48;}else if(nonBase10){string number=_stringReference.ToString();try{long integer=number.StartsWith("0x",StringComparison.OrdinalIgnoreCase)?Convert.ToInt64(number,16):Convert.ToInt64(number,8);numberValue=Convert.ToDecimal(integer);}catch(Exception ex){throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture,number),ex);}}else{ParseResult parseResult=ConvertUtils.DecimalTryParse(_stringReference.Chars,_stringReference.StartIndex,_stringReference.Length,out decimal value);if(parseResult==ParseResult.Success){numberValue=value;}else{throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture,_stringReference.ToString()));}}numberType=JsonToken.Float;}break;case ReadType.ReadAsDouble:{if(singleDigit){numberValue=(double)firstChar-48;}else if(nonBase10){string number=_stringReference.ToString();try{long integer=number.StartsWith("0x",StringComparison.OrdinalIgnoreCase)?Convert.ToInt64(number,16):Convert.ToInt64(number,8);numberValue=Convert.ToDouble(integer);}catch(Exception ex){throw ThrowReaderError("Input string '{0}' is not a valid double.".FormatWith(CultureInfo.InvariantCulture,number),ex);}}else{string number=_stringReference.ToString();if(double.TryParse(number,NumberStyles.Float,CultureInfo.InvariantCulture,out double value)){numberValue=value;}else{throw ThrowReaderError("Input string '{0}' is not a valid double.".FormatWith(CultureInfo.InvariantCulture,_stringReference.ToString()));}}numberType=JsonToken.Float;}break;case ReadType.Read:case ReadType.ReadAsInt64:{if(singleDigit){numberValue=(long)firstChar-48;numberType=JsonToken.Integer;}else if(nonBase10){string number=_stringReference.ToString();try{numberValue=number.StartsWith("0x",StringComparison.OrdinalIgnoreCase)?Convert.ToInt64(number,16):Convert.ToInt64(number,8);}catch(Exception ex){throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture,number),ex);}numberType=JsonToken.Integer;}else{ParseResult parseResult=ConvertUtils.Int64TryParse(_stringReference.Chars,_stringReference.StartIndex,_stringReference.Length,out long value);if(parseResult==ParseResult.Success){numberValue=value;numberType=JsonToken.Integer;}else if(parseResult==ParseResult.Overflow){
#if HAVE_BIG_INTEGER
string number=_stringReference.ToString();if(number.Length>MaximumJavascriptIntegerCharacterLength){throw ThrowReaderError("JSON integer {0} is too large to parse.".FormatWith(CultureInfo.InvariantCulture,_stringReference.ToString()));}numberValue=BigIntegerParse(number,CultureInfo.InvariantCulture);numberType=JsonToken.Integer;
#else
throw ThrowReaderError("JSON integer {0} is too large or small for an Int64.".FormatWith(CultureInfo.InvariantCulture,_stringReference.ToString()));
#endif
}else{if(_floatParseHandling==FloatParseHandling.Decimal){parseResult=ConvertUtils.DecimalTryParse(_stringReference.Chars,_stringReference.StartIndex,_stringReference.Length,out decimal d);if(parseResult==ParseResult.Success){numberValue=d;}else{throw ThrowReaderError("Input string '{0}' is not a valid decimal.".FormatWith(CultureInfo.InvariantCulture,_stringReference.ToString()));}}else{string number=_stringReference.ToString();if(double.TryParse(number,NumberStyles.Float,CultureInfo.InvariantCulture,out double d)){numberValue=d;}else{throw ThrowReaderError("Input string '{0}' is not a valid number.".FormatWith(CultureInfo.InvariantCulture,_stringReference.ToString()));}}numberType=JsonToken.Float;}}}break;default:throw JsonReaderException.Create(this,"Cannot read number value as type.");}ClearRecentString();SetToken(numberType,numberValue,false);}private JsonReaderException ThrowReaderError(string message,Exception?ex=null){SetToken(JsonToken.Undefined,null,false);return JsonReaderException.Create(this,message,ex);}
#if HAVE_BIG_INTEGER
[MethodImpl(MethodImplOptions.NoInlining)]private static object BigIntegerParse(string number,CultureInfo culture){return System.Numerics.BigInteger.Parse(number,culture);}
#endif
private void ParseComment(bool setToken){MiscellaneousUtils.Assert(_chars!=null);_charPos++;if(!EnsureChars(1,false)){throw JsonReaderException.Create(this,"Unexpected end while parsing comment.");}bool singlelineComment;if(_chars[_charPos]=='*'){singlelineComment=false;}else if(_chars[_charPos]=='/'){singlelineComment=true;}else{throw JsonReaderException.Create(this,"Error parsing comment. Expected: *, got {0}.".FormatWith(CultureInfo.InvariantCulture,_chars[_charPos]));}_charPos++;int initialPosition=_charPos;while(true){switch(_chars[_charPos]){case'\0':if(_charsUsed==_charPos){if(ReadData(true)==0){if(!singlelineComment){throw JsonReaderException.Create(this,"Unexpected end while parsing comment.");}EndComment(setToken,initialPosition,_charPos);return;}}else{_charPos++;}break;case'*':_charPos++;if(!singlelineComment){if(EnsureChars(0,true)){if(_chars[_charPos]=='/'){EndComment(setToken,initialPosition,_charPos-1);_charPos++;return;}}}break;case StringUtils.CarriageReturn:if(singlelineComment){EndComment(setToken,initialPosition,_charPos);return;}ProcessCarriageReturn(true);break;case StringUtils.LineFeed:if(singlelineComment){EndComment(setToken,initialPosition,_charPos);return;}ProcessLineFeed();break;default:_charPos++;break;}}}private void EndComment(bool setToken,int initialPosition,int endPosition){if(setToken){SetToken(JsonToken.Comment,new string(_chars,initialPosition,endPosition-initialPosition));}}private bool MatchValue(string value){return MatchValue(EnsureChars(value.Length-1,true),value);}private bool MatchValue(bool enoughChars,string value){MiscellaneousUtils.Assert(_chars!=null);if(!enoughChars){_charPos=_charsUsed;throw CreateUnexpectedEndException();}for(int i=0;i<value.Length;i++){if(_chars[_charPos+i]!=value[i]){_charPos+=i;return false;}}_charPos+=value.Length;return true;}private bool MatchValueWithTrailingSeparator(string value){MiscellaneousUtils.Assert(_chars!=null);bool match=MatchValue(value);if(!match){return false;}if(!EnsureChars(0,false)){return true;}return IsSeparator(_chars[_charPos])||_chars[_charPos]=='\0';}private bool IsSeparator(char c){MiscellaneousUtils.Assert(_chars!=null);switch(c){case'}':case']':case',':return true;case'/':if(!EnsureChars(1,false)){return false;}char nextChart=_chars[_charPos+1];return(nextChart=='*'||nextChart=='/');case')':if(CurrentState==State.Constructor||CurrentState==State.ConstructorStart){return true;}break;case' ':case StringUtils.Tab:case StringUtils.LineFeed:case StringUtils.CarriageReturn:return true;default:if(char.IsWhiteSpace(c)){return true;}break;}return false;}private void ParseTrue(){if(MatchValueWithTrailingSeparator(JsonConvert.True)){SetToken(JsonToken.Boolean,true);}else{throw JsonReaderException.Create(this,"Error parsing boolean value.");}}private void ParseNull(){if(MatchValueWithTrailingSeparator(JsonConvert.Null)){SetToken(JsonToken.Null);}else{throw JsonReaderException.Create(this,"Error parsing null value.");}}private void ParseUndefined(){if(MatchValueWithTrailingSeparator(JsonConvert.Undefined)){SetToken(JsonToken.Undefined);}else{throw JsonReaderException.Create(this,"Error parsing undefined value.");}}private void ParseFalse(){if(MatchValueWithTrailingSeparator(JsonConvert.False)){SetToken(JsonToken.Boolean,false);}else{throw JsonReaderException.Create(this,"Error parsing boolean value.");}}private object ParseNumberNegativeInfinity(ReadType readType){return ParseNumberNegativeInfinity(readType,MatchValueWithTrailingSeparator(JsonConvert.NegativeInfinity));}private object ParseNumberNegativeInfinity(ReadType readType,bool matched){if(matched){switch(readType){case ReadType.Read:case ReadType.ReadAsDouble:if(_floatParseHandling==FloatParseHandling.Double){SetToken(JsonToken.Float,double.NegativeInfinity);return double.NegativeInfinity;}break;case ReadType.ReadAsString:SetToken(JsonToken.String,JsonConvert.NegativeInfinity);return JsonConvert.NegativeInfinity;}throw JsonReaderException.Create(this,"Cannot read -Infinity value.");}throw JsonReaderException.Create(this,"Error parsing -Infinity value.");}private object ParseNumberPositiveInfinity(ReadType readType){return ParseNumberPositiveInfinity(readType,MatchValueWithTrailingSeparator(JsonConvert.PositiveInfinity));}private object ParseNumberPositiveInfinity(ReadType readType,bool matched){if(matched){switch(readType){case ReadType.Read:case ReadType.ReadAsDouble:if(_floatParseHandling==FloatParseHandling.Double){SetToken(JsonToken.Float,double.PositiveInfinity);return double.PositiveInfinity;}break;case ReadType.ReadAsString:SetToken(JsonToken.String,JsonConvert.PositiveInfinity);return JsonConvert.PositiveInfinity;}throw JsonReaderException.Create(this,"Cannot read Infinity value.");}throw JsonReaderException.Create(this,"Error parsing Infinity value.");}private object ParseNumberNaN(ReadType readType){return ParseNumberNaN(readType,MatchValueWithTrailingSeparator(JsonConvert.NaN));}private object ParseNumberNaN(ReadType readType,bool matched){if(matched){switch(readType){case ReadType.Read:case ReadType.ReadAsDouble:if(_floatParseHandling==FloatParseHandling.Double){SetToken(JsonToken.Float,double.NaN);return double.NaN;}break;case ReadType.ReadAsString:SetToken(JsonToken.String,JsonConvert.NaN);return JsonConvert.NaN;}throw JsonReaderException.Create(this,"Cannot read NaN value.");}throw JsonReaderException.Create(this,"Error parsing NaN value.");}public override void Close(){base.Close();if(_chars!=null){BufferUtils.ReturnBuffer(_arrayPool,_chars);_chars=null;}if(CloseInput){
#if HAVE_STREAM_READER_WRITER_CLOSE
_reader?.Close();
#else
_reader?.Dispose();
#endif
}_stringBuffer.Clear(_arrayPool);}public bool HasLineInfo(){return true;}public int LineNumber{get{if(CurrentState==State.Start&&LinePosition==0&&TokenType!=JsonToken.Comment){return 0;}return _lineNumber;}}public int LinePosition=>_charPos-_lineStartPos;}}
#if HAVE_ASYNC
#if HAVE_BIG_INTEGER
#endif
namespace Newtonsoft.Json{public partial class JsonTextWriter{
#if HAVE_ASYNC
private readonly bool _safeAsync;
#endif
public override Task FlushAsync(CancellationToken cancellationToken=default){return _safeAsync?DoFlushAsync(cancellationToken):base.FlushAsync(cancellationToken);}internal Task DoFlushAsync(CancellationToken cancellationToken){return cancellationToken.CancelIfRequestedAsync()??_writer.FlushAsync();}protected override Task WriteValueDelimiterAsync(CancellationToken cancellationToken){return _safeAsync?DoWriteValueDelimiterAsync(cancellationToken):base.WriteValueDelimiterAsync(cancellationToken);}internal Task DoWriteValueDelimiterAsync(CancellationToken cancellationToken){return _writer.WriteAsync(',',cancellationToken);}protected override Task WriteEndAsync(JsonToken token,CancellationToken cancellationToken){return _safeAsync?DoWriteEndAsync(token,cancellationToken):base.WriteEndAsync(token,cancellationToken);}internal Task DoWriteEndAsync(JsonToken token,CancellationToken cancellationToken){switch(token){case JsonToken.EndObject:return _writer.WriteAsync('}',cancellationToken);case JsonToken.EndArray:return _writer.WriteAsync(']',cancellationToken);case JsonToken.EndConstructor:return _writer.WriteAsync(')',cancellationToken);default:throw JsonWriterException.Create(this,"Invalid JsonToken: "+token,null);}}public override Task CloseAsync(CancellationToken cancellationToken=default){return _safeAsync?DoCloseAsync(cancellationToken):base.CloseAsync(cancellationToken);}internal async Task DoCloseAsync(CancellationToken cancellationToken){if(Top==0){cancellationToken.ThrowIfCancellationRequested();}while(Top>0){await WriteEndAsync(cancellationToken).ConfigureAwait(false);}CloseBufferAndWriter();}public override Task WriteEndAsync(CancellationToken cancellationToken=default){return _safeAsync?WriteEndInternalAsync(cancellationToken):base.WriteEndAsync(cancellationToken);}protected override Task WriteIndentAsync(CancellationToken cancellationToken){return _safeAsync?DoWriteIndentAsync(cancellationToken):base.WriteIndentAsync(cancellationToken);}internal Task DoWriteIndentAsync(CancellationToken cancellationToken){int currentIndentCount=Top*_indentation;int newLineLen=SetIndentChars();MiscellaneousUtils.Assert(_indentChars!=null);if(currentIndentCount<=IndentCharBufferSize){return _writer.WriteAsync(_indentChars,0,newLineLen+currentIndentCount,cancellationToken);}return WriteIndentAsync(currentIndentCount,newLineLen,cancellationToken);}private async Task WriteIndentAsync(int currentIndentCount,int newLineLen,CancellationToken cancellationToken){MiscellaneousUtils.Assert(_indentChars!=null);await _writer.WriteAsync(_indentChars,0,newLineLen+Math.Min(currentIndentCount,IndentCharBufferSize),cancellationToken).ConfigureAwait(false);while((currentIndentCount-=IndentCharBufferSize)>0){await _writer.WriteAsync(_indentChars,newLineLen,Math.Min(currentIndentCount,IndentCharBufferSize),cancellationToken).ConfigureAwait(false);}}private Task WriteValueInternalAsync(JsonToken token,string value,CancellationToken cancellationToken){Task task=InternalWriteValueAsync(token,cancellationToken);if(task.IsCompletedSucessfully()){return _writer.WriteAsync(value,cancellationToken);}return WriteValueInternalAsync(task,value,cancellationToken);}private async Task WriteValueInternalAsync(Task task,string value,CancellationToken cancellationToken){await task.ConfigureAwait(false);await _writer.WriteAsync(value,cancellationToken).ConfigureAwait(false);}protected override Task WriteIndentSpaceAsync(CancellationToken cancellationToken){return _safeAsync?DoWriteIndentSpaceAsync(cancellationToken):base.WriteIndentSpaceAsync(cancellationToken);}internal Task DoWriteIndentSpaceAsync(CancellationToken cancellationToken){return _writer.WriteAsync(' ',cancellationToken);}public override Task WriteRawAsync(string?json,CancellationToken cancellationToken=default){return _safeAsync?DoWriteRawAsync(json,cancellationToken):base.WriteRawAsync(json,cancellationToken);}internal Task DoWriteRawAsync(string?json,CancellationToken cancellationToken){return _writer.WriteAsync(json,cancellationToken);}public override Task WriteNullAsync(CancellationToken cancellationToken=default){return _safeAsync?DoWriteNullAsync(cancellationToken):base.WriteNullAsync(cancellationToken);}internal Task DoWriteNullAsync(CancellationToken cancellationToken){return WriteValueInternalAsync(JsonToken.Null,JsonConvert.Null,cancellationToken);}private Task WriteDigitsAsync(ulong uvalue,bool negative,CancellationToken cancellationToken){if(uvalue<=9&!negative){return _writer.WriteAsync((char)('0'+uvalue),cancellationToken);}int length=WriteNumberToBuffer(uvalue,negative);return _writer.WriteAsync(_writeBuffer!,0,length,cancellationToken);}private Task WriteIntegerValueAsync(ulong uvalue,bool negative,CancellationToken cancellationToken){Task task=InternalWriteValueAsync(JsonToken.Integer,cancellationToken);if(task.IsCompletedSucessfully()){return WriteDigitsAsync(uvalue,negative,cancellationToken);}return WriteIntegerValueAsync(task,uvalue,negative,cancellationToken);}private async Task WriteIntegerValueAsync(Task task,ulong uvalue,bool negative,CancellationToken cancellationToken){await task.ConfigureAwait(false);await WriteDigitsAsync(uvalue,negative,cancellationToken).ConfigureAwait(false);}internal Task WriteIntegerValueAsync(long value,CancellationToken cancellationToken){bool negative=value<0;if(negative){value=-value;}return WriteIntegerValueAsync((ulong)value,negative,cancellationToken);}internal Task WriteIntegerValueAsync(ulong uvalue,CancellationToken cancellationToken){return WriteIntegerValueAsync(uvalue,false,cancellationToken);}private Task WriteEscapedStringAsync(string value,bool quote,CancellationToken cancellationToken){return JavaScriptUtils.WriteEscapedJavaScriptStringAsync(_writer,value,_quoteChar,quote,_charEscapeFlags!,StringEscapeHandling,this,_writeBuffer!,cancellationToken);}public override Task WritePropertyNameAsync(string name,CancellationToken cancellationToken=default){return _safeAsync?DoWritePropertyNameAsync(name,cancellationToken):base.WritePropertyNameAsync(name,cancellationToken);}internal Task DoWritePropertyNameAsync(string name,CancellationToken cancellationToken){Task task=InternalWritePropertyNameAsync(name,cancellationToken);if(!task.IsCompletedSucessfully()){return DoWritePropertyNameAsync(task,name,cancellationToken);}task=WriteEscapedStringAsync(name,_quoteName,cancellationToken);if(task.IsCompletedSucessfully()){return _writer.WriteAsync(':',cancellationToken);}return JavaScriptUtils.WriteCharAsync(task,_writer,':',cancellationToken);}private async Task DoWritePropertyNameAsync(Task task,string name,CancellationToken cancellationToken){await task.ConfigureAwait(false);await WriteEscapedStringAsync(name,_quoteName,cancellationToken).ConfigureAwait(false);await _writer.WriteAsync(':').ConfigureAwait(false);}public override Task WritePropertyNameAsync(string name,bool escape,CancellationToken cancellationToken=default){return _safeAsync?DoWritePropertyNameAsync(name,escape,cancellationToken):base.WritePropertyNameAsync(name,escape,cancellationToken);}internal async Task DoWritePropertyNameAsync(string name,bool escape,CancellationToken cancellationToken){await InternalWritePropertyNameAsync(name,cancellationToken).ConfigureAwait(false);if(escape){await WriteEscapedStringAsync(name,_quoteName,cancellationToken).ConfigureAwait(false);}else{if(_quoteName){await _writer.WriteAsync(_quoteChar).ConfigureAwait(false);}await _writer.WriteAsync(name,cancellationToken).ConfigureAwait(false);if(_quoteName){await _writer.WriteAsync(_quoteChar).ConfigureAwait(false);}}await _writer.WriteAsync(':').ConfigureAwait(false);}public override Task WriteStartArrayAsync(CancellationToken cancellationToken=default){return _safeAsync?DoWriteStartArrayAsync(cancellationToken):base.WriteStartArrayAsync(cancellationToken);}internal Task DoWriteStartArrayAsync(CancellationToken cancellationToken){Task task=InternalWriteStartAsync(JsonToken.StartArray,JsonContainerType.Array,cancellationToken);if(task.IsCompletedSucessfully()){return _writer.WriteAsync('[',cancellationToken);}return DoWriteStartArrayAsync(task,cancellationToken);}internal async Task DoWriteStartArrayAsync(Task task,CancellationToken cancellationToken){await task.ConfigureAwait(false);await _writer.WriteAsync('[',cancellationToken).ConfigureAwait(false);}public override Task WriteStartObjectAsync(CancellationToken cancellationToken=default){return _safeAsync?DoWriteStartObjectAsync(cancellationToken):base.WriteStartObjectAsync(cancellationToken);}internal Task DoWriteStartObjectAsync(CancellationToken cancellationToken){Task task=InternalWriteStartAsync(JsonToken.StartObject,JsonContainerType.Object,cancellationToken);if(task.IsCompletedSucessfully()){return _writer.WriteAsync('{',cancellationToken);}return DoWriteStartObjectAsync(task,cancellationToken);}internal async Task DoWriteStartObjectAsync(Task task,CancellationToken cancellationToken){await task.ConfigureAwait(false);await _writer.WriteAsync('{',cancellationToken).ConfigureAwait(false);}public override Task WriteStartConstructorAsync(string name,CancellationToken cancellationToken=default){return _safeAsync?DoWriteStartConstructorAsync(name,cancellationToken):base.WriteStartConstructorAsync(name,cancellationToken);}internal async Task DoWriteStartConstructorAsync(string name,CancellationToken cancellationToken){await InternalWriteStartAsync(JsonToken.StartConstructor,JsonContainerType.Constructor,cancellationToken).ConfigureAwait(false);await _writer.WriteAsync("new ",cancellationToken).ConfigureAwait(false);await _writer.WriteAsync(name,cancellationToken).ConfigureAwait(false);await _writer.WriteAsync('(').ConfigureAwait(false);}public override Task WriteUndefinedAsync(CancellationToken cancellationToken=default){return _safeAsync?DoWriteUndefinedAsync(cancellationToken):base.WriteUndefinedAsync(cancellationToken);}internal Task DoWriteUndefinedAsync(CancellationToken cancellationToken){Task task=InternalWriteValueAsync(JsonToken.Undefined,cancellationToken);if(task.IsCompletedSucessfully()){return _writer.WriteAsync(JsonConvert.Undefined,cancellationToken);}return DoWriteUndefinedAsync(task,cancellationToken);}private async Task DoWriteUndefinedAsync(Task task,CancellationToken cancellationToken){await task.ConfigureAwait(false);await _writer.WriteAsync(JsonConvert.Undefined,cancellationToken).ConfigureAwait(false);}public override Task WriteWhitespaceAsync(string ws,CancellationToken cancellationToken=default){return _safeAsync?DoWriteWhitespaceAsync(ws,cancellationToken):base.WriteWhitespaceAsync(ws,cancellationToken);}internal Task DoWriteWhitespaceAsync(string ws,CancellationToken cancellationToken){InternalWriteWhitespace(ws);return _writer.WriteAsync(ws,cancellationToken);}public override Task WriteValueAsync(bool value,CancellationToken cancellationToken=default){return _safeAsync?DoWriteValueAsync(value,cancellationToken):base.WriteValueAsync(value,cancellationToken);}internal Task DoWriteValueAsync(bool value,CancellationToken cancellationToken){return WriteValueInternalAsync(JsonToken.Boolean,JsonConvert.ToString(value),cancellationToken);}public override Task WriteValueAsync(bool?value,CancellationToken cancellationToken=default){return _safeAsync?DoWriteValueAsync(value,cancellationToken):base.WriteValueAsync(value,cancellationToken);}internal Task DoWriteValueAsync(bool?value,CancellationToken cancellationToken){return value==null?DoWriteNullAsync(cancellationToken):DoWriteValueAsync(value.GetValueOrDefault(),cancellationToken);}public override Task WriteValueAsync(byte value,CancellationToken cancellationToken=default){return _safeAsync?WriteIntegerValueAsync(value,cancellationToken):base.WriteValueAsync(value,cancellationToken);}public override Task WriteValueAsync(byte?value,CancellationToken cancellationToken=default){return _safeAsync?DoWriteValueAsync(value,cancellationToken):base.WriteValueAsync(value,cancellationToken);}internal Task DoWriteValueAsync(byte?value,CancellationToken cancellationToken){return value==null?DoWriteNullAsync(cancellationToken):WriteIntegerValueAsync(value.GetValueOrDefault(),cancellationToken);}public override Task WriteValueAsync(byte[]?value,CancellationToken cancellationToken=default){return _safeAsync?(value==null?WriteNullAsync(cancellationToken):WriteValueNonNullAsync(value,cancellationToken)):base.WriteValueAsync(value,cancellationToken);}internal async Task WriteValueNonNullAsync(byte[]value,CancellationToken cancellationToken){await InternalWriteValueAsync(JsonToken.Bytes,cancellationToken).ConfigureAwait(false);await _writer.WriteAsync(_quoteChar).ConfigureAwait(false);await Base64Encoder.EncodeAsync(value,0,value.Length,cancellationToken).ConfigureAwait(false);await Base64Encoder.FlushAsync(cancellationToken).ConfigureAwait(false);await _writer.WriteAsync(_quoteChar).ConfigureAwait(false);}public override Task WriteValueAsync(char value,CancellationToken cancellationToken=default){return _safeAsync?DoWriteValueAsync(value,cancellationToken):base.WriteValueAsync(value,cancellationToken);}internal Task DoWriteValueAsync(char value,CancellationToken cancellationToken){return WriteValueInternalAsync(JsonToken.String,JsonConvert.ToString(value),cancellationToken);}public override Task WriteValueAsync(char?value,CancellationToken cancellationToken=default){return _safeAsync?DoWriteValueAsync(value,cancellationToken):base.WriteValueAsync(value,cancellationToken);}internal Task DoWriteValueAsync(char?value,CancellationToken cancellationToken){return value==null?DoWriteNullAsync(cancellationToken):DoWriteValueAsync(value.GetValueOrDefault(),cancellationToken);}public override Task WriteValueAsync(DateTime value,CancellationToken cancellationToken=default){return _safeAsync?DoWriteValueAsync(value,cancellationToken):base.WriteValueAsync(value,cancellationToken);}internal async Task DoWriteValueAsync(DateTime value,CancellationToken cancellationToken){await InternalWriteValueAsync(JsonToken.Date,cancellationToken).ConfigureAwait(false);value=DateTimeUtils.EnsureDateTime(value,DateTimeZoneHandling);if(StringUtils.IsNullOrEmpty(DateFormatString)){int length=WriteValueToBuffer(value);await _writer.WriteAsync(_writeBuffer!,0,length,cancellationToken).ConfigureAwait(false);}else{await _writer.WriteAsync(_quoteChar).ConfigureAwait(false);await _writer.WriteAsync(value.ToString(DateFormatString,Culture),cancellationToken).ConfigureAwait(false);await _writer.WriteAsync(_quoteChar).ConfigureAwait(false);}}public override Task WriteValueAsync(DateTime?value,CancellationToken cancellationToken=default){return _safeAsync?DoWriteValueAsync(value,cancellationToken):base.WriteValueAsync(value,cancellationToken);}internal Task DoWriteValueAsync(DateTime?value,CancellationToken cancellationToken){return value==null?DoWriteNullAsync(cancellationToken):DoWriteValueAsync(value.GetValueOrDefault(),cancellationToken);}public override Task WriteValueAsync(DateTimeOffset value,CancellationToken cancellationToken=default){return _safeAsync?DoWriteValueAsync(value,cancellationToken):base.WriteValueAsync(value,cancellationToken);}internal async Task DoWriteValueAsync(DateTimeOffset value,CancellationToken cancellationToken){await InternalWriteValueAsync(JsonToken.Date,cancellationToken).ConfigureAwait(false);if(StringUtils.IsNullOrEmpty(DateFormatString)){int length=WriteValueToBuffer(value);await _writer.WriteAsync(_writeBuffer!,0,length,cancellationToken).ConfigureAwait(false);}else{await _writer.WriteAsync(_quoteChar).ConfigureAwait(false);await _writer.WriteAsync(value.ToString(DateFormatString,Culture),cancellationToken).ConfigureAwait(false);await _writer.WriteAsync(_quoteChar).ConfigureAwait(false);}}public override Task WriteValueAsync(DateTimeOffset?value,CancellationToken cancellationToken=default){return _safeAsync?DoWriteValueAsync(value,cancellationToken):base.WriteValueAsync(value,cancellationToken);}internal Task DoWriteValueAsync(DateTimeOffset?value,CancellationToken cancellationToken){return value==null?DoWriteNullAsync(cancellationToken):DoWriteValueAsync(value.GetValueOrDefault(),cancellationToken);}public override Task WriteValueAsync(decimal value,CancellationToken cancellationToken=default){return _safeAsync?DoWriteValueAsync(value,cancellationToken):base.WriteValueAsync(value,cancellationToken);}internal Task DoWriteValueAsync(decimal value,CancellationToken cancellationToken){return WriteValueInternalAsync(JsonToken.Float,JsonConvert.ToString(value),cancellationToken);}public override Task WriteValueAsync(decimal?value,CancellationToken cancellationToken=default){return _safeAsync?DoWriteValueAsync(value,cancellationToken):base.WriteValueAsync(value,cancellationToken);}internal Task DoWriteValueAsync(decimal?value,CancellationToken cancellationToken){return value==null?DoWriteNullAsync(cancellationToken):DoWriteValueAsync(value.GetValueOrDefault(),cancellationToken);}public override Task WriteValueAsync(double value,CancellationToken cancellationToken=default){return _safeAsync?WriteValueAsync(value,false,cancellationToken):base.WriteValueAsync(value,cancellationToken);}internal Task WriteValueAsync(double value,bool nullable,CancellationToken cancellationToken){return WriteValueInternalAsync(JsonToken.Float,JsonConvert.ToString(value,FloatFormatHandling,QuoteChar,nullable),cancellationToken);}public override Task WriteValueAsync(double?value,CancellationToken cancellationToken=default){return _safeAsync?(value.HasValue?WriteValueAsync(value.GetValueOrDefault(),true,cancellationToken):WriteNullAsync(cancellationToken)):base.WriteValueAsync(value,cancellationToken);}public override Task WriteValueAsync(float value,CancellationToken cancellationToken=default){return _safeAsync?WriteValueAsync(value,false,cancellationToken):base.WriteValueAsync(value,cancellationToken);}internal Task WriteValueAsync(float value,bool nullable,CancellationToken cancellationToken){return WriteValueInternalAsync(JsonToken.Float,JsonConvert.ToString(value,FloatFormatHandling,QuoteChar,nullable),cancellationToken);}public override Task WriteValueAsync(float?value,CancellationToken cancellationToken=default){return _safeAsync?(value.HasValue?WriteValueAsync(value.GetValueOrDefault(),true,cancellationToken):WriteNullAsync(cancellationToken)):base.WriteValueAsync(value,cancellationToken);}public override Task WriteValueAsync(Guid value,CancellationToken cancellationToken=default){return _safeAsync?DoWriteValueAsync(value,cancellationToken):base.WriteValueAsync(value,cancellationToken);}internal async Task DoWriteValueAsync(Guid value,CancellationToken cancellationToken){await InternalWriteValueAsync(JsonToken.String,cancellationToken).ConfigureAwait(false);await _writer.WriteAsync(_quoteChar).ConfigureAwait(false);
#if HAVE_CHAR_TO_STRING_WITH_CULTURE
await _writer.WriteAsync(value.ToString("D",CultureInfo.InvariantCulture),cancellationToken).ConfigureAwait(false);
#else
await _writer.WriteAsync(value.ToString("D"),cancellationToken).ConfigureAwait(false);
#endif
await _writer.WriteAsync(_quoteChar).ConfigureAwait(false);}public override Task WriteValueAsync(Guid?value,CancellationToken cancellationToken=default){return _safeAsync?DoWriteValueAsync(value,cancellationToken):base.WriteValueAsync(value,cancellationToken);}internal Task DoWriteValueAsync(Guid?value,CancellationToken cancellationToken){return value==null?DoWriteNullAsync(cancellationToken):DoWriteValueAsync(value.GetValueOrDefault(),cancellationToken);}public override Task WriteValueAsync(int value,CancellationToken cancellationToken=default){return _safeAsync?WriteIntegerValueAsync(value,cancellationToken):base.WriteValueAsync(value,cancellationToken);}public override Task WriteValueAsync(int?value,CancellationToken cancellationToken=default){return _safeAsync?DoWriteValueAsync(value,cancellationToken):base.WriteValueAsync(value,cancellationToken);}internal Task DoWriteValueAsync(int?value,CancellationToken cancellationToken){return value==null?DoWriteNullAsync(cancellationToken):WriteIntegerValueAsync(value.GetValueOrDefault(),cancellationToken);}public override Task WriteValueAsync(long value,CancellationToken cancellationToken=default){return _safeAsync?WriteIntegerValueAsync(value,cancellationToken):base.WriteValueAsync(value,cancellationToken);}public override Task WriteValueAsync(long?value,CancellationToken cancellationToken=default){return _safeAsync?DoWriteValueAsync(value,cancellationToken):base.WriteValueAsync(value,cancellationToken);}internal Task DoWriteValueAsync(long?value,CancellationToken cancellationToken){return value==null?DoWriteNullAsync(cancellationToken):WriteIntegerValueAsync(value.GetValueOrDefault(),cancellationToken);}
#if HAVE_BIG_INTEGER
internal Task WriteValueAsync(BigInteger value,CancellationToken cancellationToken){return WriteValueInternalAsync(JsonToken.Integer,value.ToString(CultureInfo.InvariantCulture),cancellationToken);}
#endif
public override Task WriteValueAsync(object?value,CancellationToken cancellationToken=default){if(_safeAsync){if(value==null){return WriteNullAsync(cancellationToken);}
#if HAVE_BIG_INTEGER
if(value is BigInteger i){return WriteValueAsync(i,cancellationToken);}
#endif
return WriteValueAsync(this,ConvertUtils.GetTypeCode(value.GetType()),value,cancellationToken);}return base.WriteValueAsync(value,cancellationToken);}[CLSCompliant(false)]public override Task WriteValueAsync(sbyte value,CancellationToken cancellationToken=default){return _safeAsync?WriteIntegerValueAsync(value,cancellationToken):base.WriteValueAsync(value,cancellationToken);}[CLSCompliant(false)]public override Task WriteValueAsync(sbyte?value,CancellationToken cancellationToken=default){return _safeAsync?DoWriteValueAsync(value,cancellationToken):base.WriteValueAsync(value,cancellationToken);}internal Task DoWriteValueAsync(sbyte?value,CancellationToken cancellationToken){return value==null?DoWriteNullAsync(cancellationToken):WriteIntegerValueAsync(value.GetValueOrDefault(),cancellationToken);}public override Task WriteValueAsync(short value,CancellationToken cancellationToken=default){return _safeAsync?WriteIntegerValueAsync(value,cancellationToken):base.WriteValueAsync(value,cancellationToken);}public override Task WriteValueAsync(short?value,CancellationToken cancellationToken=default){return _safeAsync?DoWriteValueAsync(value,cancellationToken):base.WriteValueAsync(value,cancellationToken);}internal Task DoWriteValueAsync(short?value,CancellationToken cancellationToken){return value==null?DoWriteNullAsync(cancellationToken):WriteIntegerValueAsync(value.GetValueOrDefault(),cancellationToken);}public override Task WriteValueAsync(string?value,CancellationToken cancellationToken=default){return _safeAsync?DoWriteValueAsync(value,cancellationToken):base.WriteValueAsync(value,cancellationToken);}internal Task DoWriteValueAsync(string?value,CancellationToken cancellationToken){Task task=InternalWriteValueAsync(JsonToken.String,cancellationToken);if(task.IsCompletedSucessfully()){return value==null?_writer.WriteAsync(JsonConvert.Null,cancellationToken):WriteEscapedStringAsync(value,true,cancellationToken);}return DoWriteValueAsync(task,value,cancellationToken);}private async Task DoWriteValueAsync(Task task,string?value,CancellationToken cancellationToken){await task.ConfigureAwait(false);await(value==null?_writer.WriteAsync(JsonConvert.Null,cancellationToken):WriteEscapedStringAsync(value,true,cancellationToken)).ConfigureAwait(false);}public override Task WriteValueAsync(TimeSpan value,CancellationToken cancellationToken=default){return _safeAsync?DoWriteValueAsync(value,cancellationToken):base.WriteValueAsync(value,cancellationToken);}internal async Task DoWriteValueAsync(TimeSpan value,CancellationToken cancellationToken){await InternalWriteValueAsync(JsonToken.String,cancellationToken).ConfigureAwait(false);await _writer.WriteAsync(_quoteChar,cancellationToken).ConfigureAwait(false);await _writer.WriteAsync(value.ToString(null,CultureInfo.InvariantCulture),cancellationToken).ConfigureAwait(false);await _writer.WriteAsync(_quoteChar,cancellationToken).ConfigureAwait(false);}public override Task WriteValueAsync(TimeSpan?value,CancellationToken cancellationToken=default){return _safeAsync?DoWriteValueAsync(value,cancellationToken):base.WriteValueAsync(value,cancellationToken);}internal Task DoWriteValueAsync(TimeSpan?value,CancellationToken cancellationToken){return value==null?DoWriteNullAsync(cancellationToken):DoWriteValueAsync(value.GetValueOrDefault(),cancellationToken);}[CLSCompliant(false)]public override Task WriteValueAsync(uint value,CancellationToken cancellationToken=default){return _safeAsync?WriteIntegerValueAsync(value,cancellationToken):base.WriteValueAsync(value,cancellationToken);}[CLSCompliant(false)]public override Task WriteValueAsync(uint?value,CancellationToken cancellationToken=default){return _safeAsync?DoWriteValueAsync(value,cancellationToken):base.WriteValueAsync(value,cancellationToken);}internal Task DoWriteValueAsync(uint?value,CancellationToken cancellationToken){return value==null?DoWriteNullAsync(cancellationToken):WriteIntegerValueAsync(value.GetValueOrDefault(),cancellationToken);}[CLSCompliant(false)]public override Task WriteValueAsync(ulong value,CancellationToken cancellationToken=default){return _safeAsync?WriteIntegerValueAsync(value,cancellationToken):base.WriteValueAsync(value,cancellationToken);}[CLSCompliant(false)]public override Task WriteValueAsync(ulong?value,CancellationToken cancellationToken=default){return _safeAsync?DoWriteValueAsync(value,cancellationToken):base.WriteValueAsync(value,cancellationToken);}internal Task DoWriteValueAsync(ulong?value,CancellationToken cancellationToken){return value==null?DoWriteNullAsync(cancellationToken):WriteIntegerValueAsync(value.GetValueOrDefault(),cancellationToken);}public override Task WriteValueAsync(Uri?value,CancellationToken cancellationToken=default){return _safeAsync?(value==null?WriteNullAsync(cancellationToken):WriteValueNotNullAsync(value,cancellationToken)):base.WriteValueAsync(value,cancellationToken);}internal Task WriteValueNotNullAsync(Uri value,CancellationToken cancellationToken){Task task=InternalWriteValueAsync(JsonToken.String,cancellationToken);if(task.IsCompletedSucessfully()){return WriteEscapedStringAsync(value.OriginalString,true,cancellationToken);}return WriteValueNotNullAsync(task,value,cancellationToken);}internal async Task WriteValueNotNullAsync(Task task,Uri value,CancellationToken cancellationToken){await task.ConfigureAwait(false);await WriteEscapedStringAsync(value.OriginalString,true,cancellationToken).ConfigureAwait(false);}[CLSCompliant(false)]public override Task WriteValueAsync(ushort value,CancellationToken cancellationToken=default){return _safeAsync?WriteIntegerValueAsync(value,cancellationToken):base.WriteValueAsync(value,cancellationToken);}[CLSCompliant(false)]public override Task WriteValueAsync(ushort?value,CancellationToken cancellationToken=default){return _safeAsync?DoWriteValueAsync(value,cancellationToken):base.WriteValueAsync(value,cancellationToken);}internal Task DoWriteValueAsync(ushort?value,CancellationToken cancellationToken){return value==null?DoWriteNullAsync(cancellationToken):WriteIntegerValueAsync(value.GetValueOrDefault(),cancellationToken);}public override Task WriteCommentAsync(string?text,CancellationToken cancellationToken=default){return _safeAsync?DoWriteCommentAsync(text,cancellationToken):base.WriteCommentAsync(text,cancellationToken);}internal async Task DoWriteCommentAsync(string?text,CancellationToken cancellationToken){await InternalWriteCommentAsync(cancellationToken).ConfigureAwait(false);await _writer.WriteAsync("/*",cancellationToken).ConfigureAwait(false);await _writer.WriteAsync(text??string.Empty,cancellationToken).ConfigureAwait(false);await _writer.WriteAsync("*/",cancellationToken).ConfigureAwait(false);}public override Task WriteEndArrayAsync(CancellationToken cancellationToken=default){return _safeAsync?InternalWriteEndAsync(JsonContainerType.Array,cancellationToken):base.WriteEndArrayAsync(cancellationToken);}public override Task WriteEndConstructorAsync(CancellationToken cancellationToken=default){return _safeAsync?InternalWriteEndAsync(JsonContainerType.Constructor,cancellationToken):base.WriteEndConstructorAsync(cancellationToken);}public override Task WriteEndObjectAsync(CancellationToken cancellationToken=default){return _safeAsync?InternalWriteEndAsync(JsonContainerType.Object,cancellationToken):base.WriteEndObjectAsync(cancellationToken);}public override Task WriteRawValueAsync(string?json,CancellationToken cancellationToken=default){return _safeAsync?DoWriteRawValueAsync(json,cancellationToken):base.WriteRawValueAsync(json,cancellationToken);}internal Task DoWriteRawValueAsync(string?json,CancellationToken cancellationToken){UpdateScopeWithFinishedValue();Task task=AutoCompleteAsync(JsonToken.Undefined,cancellationToken);if(task.IsCompletedSucessfully()){return WriteRawAsync(json,cancellationToken);}return DoWriteRawValueAsync(task,json,cancellationToken);}private async Task DoWriteRawValueAsync(Task task,string?json,CancellationToken cancellationToken){await task.ConfigureAwait(false);await WriteRawAsync(json,cancellationToken).ConfigureAwait(false);}internal char[]EnsureWriteBuffer(int length,int copyTo){if(length<35){length=35;}char[]?buffer=_writeBuffer;if(buffer==null){return _writeBuffer=BufferUtils.RentBuffer(_arrayPool,length);}if(buffer.Length>=length){return buffer;}char[]newBuffer=BufferUtils.RentBuffer(_arrayPool,length);if(copyTo!=0){Array.Copy(buffer,newBuffer,copyTo);}BufferUtils.ReturnBuffer(_arrayPool,buffer);_writeBuffer=newBuffer;return newBuffer;}}}
#endif
#if HAVE_BIG_INTEGER
#endif
namespace Newtonsoft.Json{public partial class JsonTextWriter:JsonWriter{private const int IndentCharBufferSize=12;private readonly TextWriter _writer;private Base64Encoder?_base64Encoder;private char _indentChar;private int _indentation;private char _quoteChar;private bool _quoteName;private bool[]?_charEscapeFlags;private char[]?_writeBuffer;private IArrayPool<char>?_arrayPool;private char[]?_indentChars;private Base64Encoder Base64Encoder{get{if(_base64Encoder==null){_base64Encoder=new Base64Encoder(_writer);}return _base64Encoder;}}public IArrayPool<char>?ArrayPool{get=>_arrayPool;set{if(value==null){throw new ArgumentNullException(nameof(value));}_arrayPool=value;}}public int Indentation{get=>_indentation;set{if(value<0){throw new ArgumentException("Indentation value must be greater than 0.");}_indentation=value;}}public char QuoteChar{get=>_quoteChar;set{if(value!='"'&&value!='\''){throw new ArgumentException(@"Invalid JavaScript string quote character. Valid quote characters are ' and "".");}_quoteChar=value;UpdateCharEscapeFlags();}}public char IndentChar{get=>_indentChar;set{if(value!=_indentChar){_indentChar=value;_indentChars=null;}}}public bool QuoteName{get=>_quoteName;set=>_quoteName=value;}public JsonTextWriter(TextWriter textWriter){if(textWriter==null){throw new ArgumentNullException(nameof(textWriter));}_writer=textWriter;_quoteChar='"';_quoteName=true;_indentChar=' ';_indentation=2;UpdateCharEscapeFlags();
#if HAVE_ASYNC
_safeAsync=GetType()==typeof(JsonTextWriter);
#endif
}public override void Flush(){_writer.Flush();}public override void Close(){base.Close();CloseBufferAndWriter();}private void CloseBufferAndWriter(){if(_writeBuffer!=null){BufferUtils.ReturnBuffer(_arrayPool,_writeBuffer);_writeBuffer=null;}if(CloseOutput){
#if HAVE_STREAM_READER_WRITER_CLOSE
_writer?.Close();
#else
_writer?.Dispose();
#endif
}}public override void WriteStartObject(){InternalWriteStart(JsonToken.StartObject,JsonContainerType.Object);_writer.Write('{');}public override void WriteStartArray(){InternalWriteStart(JsonToken.StartArray,JsonContainerType.Array);_writer.Write('[');}public override void WriteStartConstructor(string name){InternalWriteStart(JsonToken.StartConstructor,JsonContainerType.Constructor);_writer.Write("new ");_writer.Write(name);_writer.Write('(');}protected override void WriteEnd(JsonToken token){switch(token){case JsonToken.EndObject:_writer.Write('}');break;case JsonToken.EndArray:_writer.Write(']');break;case JsonToken.EndConstructor:_writer.Write(')');break;default:throw JsonWriterException.Create(this,"Invalid JsonToken: "+token,null);}}public override void WritePropertyName(string name){InternalWritePropertyName(name);WriteEscapedString(name,_quoteName);_writer.Write(':');}public override void WritePropertyName(string name,bool escape){InternalWritePropertyName(name);if(escape){WriteEscapedString(name,_quoteName);}else{if(_quoteName){_writer.Write(_quoteChar);}_writer.Write(name);if(_quoteName){_writer.Write(_quoteChar);}}_writer.Write(':');}internal override void OnStringEscapeHandlingChanged(){UpdateCharEscapeFlags();}private void UpdateCharEscapeFlags(){_charEscapeFlags=JavaScriptUtils.GetCharEscapeFlags(StringEscapeHandling,_quoteChar);}protected override void WriteIndent(){int currentIndentCount=Top*_indentation;int newLineLen=SetIndentChars();_writer.Write(_indentChars,0,newLineLen+Math.Min(currentIndentCount,IndentCharBufferSize));while((currentIndentCount-=IndentCharBufferSize)>0){_writer.Write(_indentChars,newLineLen,Math.Min(currentIndentCount,IndentCharBufferSize));}}private int SetIndentChars(){string writerNewLine=_writer.NewLine;int newLineLen=writerNewLine.Length;bool match=_indentChars!=null&&_indentChars.Length==IndentCharBufferSize+newLineLen;if(match){for(int i=0;i!=newLineLen;++i){if(writerNewLine[i]!=_indentChars![i]){match=false;break;}}}if(!match){_indentChars=(writerNewLine+new string(_indentChar,IndentCharBufferSize)).ToCharArray();}return newLineLen;}protected override void WriteValueDelimiter(){_writer.Write(',');}protected override void WriteIndentSpace(){_writer.Write(' ');}private void WriteValueInternal(string value,JsonToken token){_writer.Write(value);}public override void WriteValue(object?value){
#if HAVE_BIG_INTEGER
if(value is BigInteger i){InternalWriteValue(JsonToken.Integer);WriteValueInternal(i.ToString(CultureInfo.InvariantCulture),JsonToken.String);}else
#endif
{base.WriteValue(value);}}public override void WriteNull(){InternalWriteValue(JsonToken.Null);WriteValueInternal(JsonConvert.Null,JsonToken.Null);}public override void WriteUndefined(){InternalWriteValue(JsonToken.Undefined);WriteValueInternal(JsonConvert.Undefined,JsonToken.Undefined);}public override void WriteRaw(string?json){InternalWriteRaw();_writer.Write(json);}public override void WriteValue(string?value){InternalWriteValue(JsonToken.String);if(value==null){WriteValueInternal(JsonConvert.Null,JsonToken.Null);}else{WriteEscapedString(value,true);}}private void WriteEscapedString(string value,bool quote){EnsureWriteBuffer();JavaScriptUtils.WriteEscapedJavaScriptString(_writer,value,_quoteChar,quote,_charEscapeFlags!,StringEscapeHandling,_arrayPool,ref _writeBuffer);}public override void WriteValue(int value){InternalWriteValue(JsonToken.Integer);WriteIntegerValue(value);}[CLSCompliant(false)]public override void WriteValue(uint value){InternalWriteValue(JsonToken.Integer);WriteIntegerValue(value);}public override void WriteValue(long value){InternalWriteValue(JsonToken.Integer);WriteIntegerValue(value);}[CLSCompliant(false)]public override void WriteValue(ulong value){InternalWriteValue(JsonToken.Integer);WriteIntegerValue(value,false);}public override void WriteValue(float value){InternalWriteValue(JsonToken.Float);WriteValueInternal(JsonConvert.ToString(value,FloatFormatHandling,QuoteChar,false),JsonToken.Float);}public override void WriteValue(float?value){if(value==null){WriteNull();}else{InternalWriteValue(JsonToken.Float);WriteValueInternal(JsonConvert.ToString(value.GetValueOrDefault(),FloatFormatHandling,QuoteChar,true),JsonToken.Float);}}public override void WriteValue(double value){InternalWriteValue(JsonToken.Float);WriteValueInternal(JsonConvert.ToString(value,FloatFormatHandling,QuoteChar,false),JsonToken.Float);}public override void WriteValue(double?value){if(value==null){WriteNull();}else{InternalWriteValue(JsonToken.Float);WriteValueInternal(JsonConvert.ToString(value.GetValueOrDefault(),FloatFormatHandling,QuoteChar,true),JsonToken.Float);}}public override void WriteValue(bool value){InternalWriteValue(JsonToken.Boolean);WriteValueInternal(JsonConvert.ToString(value),JsonToken.Boolean);}public override void WriteValue(short value){InternalWriteValue(JsonToken.Integer);WriteIntegerValue(value);}[CLSCompliant(false)]public override void WriteValue(ushort value){InternalWriteValue(JsonToken.Integer);WriteIntegerValue(value);}public override void WriteValue(char value){InternalWriteValue(JsonToken.String);WriteValueInternal(JsonConvert.ToString(value),JsonToken.String);}public override void WriteValue(byte value){InternalWriteValue(JsonToken.Integer);WriteIntegerValue(value);}[CLSCompliant(false)]public override void WriteValue(sbyte value){InternalWriteValue(JsonToken.Integer);WriteIntegerValue(value);}public override void WriteValue(decimal value){InternalWriteValue(JsonToken.Float);WriteValueInternal(JsonConvert.ToString(value),JsonToken.Float);}public override void WriteValue(DateTime value){InternalWriteValue(JsonToken.Date);value=DateTimeUtils.EnsureDateTime(value,DateTimeZoneHandling);if(StringUtils.IsNullOrEmpty(DateFormatString)){int length=WriteValueToBuffer(value);_writer.Write(_writeBuffer,0,length);}else{_writer.Write(_quoteChar);_writer.Write(value.ToString(DateFormatString,Culture));_writer.Write(_quoteChar);}}private int WriteValueToBuffer(DateTime value){EnsureWriteBuffer();MiscellaneousUtils.Assert(_writeBuffer!=null);int pos=0;_writeBuffer[pos++]=_quoteChar;pos=DateTimeUtils.WriteDateTimeString(_writeBuffer,pos,value,null,value.Kind,DateFormatHandling);_writeBuffer[pos++]=_quoteChar;return pos;}public override void WriteValue(byte[]?value){if(value==null){WriteNull();}else{InternalWriteValue(JsonToken.Bytes);_writer.Write(_quoteChar);Base64Encoder.Encode(value,0,value.Length);Base64Encoder.Flush();_writer.Write(_quoteChar);}}
#if HAVE_DATE_TIME_OFFSET
public override void WriteValue(DateTimeOffset value){InternalWriteValue(JsonToken.Date);if(StringUtils.IsNullOrEmpty(DateFormatString)){int length=WriteValueToBuffer(value);_writer.Write(_writeBuffer,0,length);}else{_writer.Write(_quoteChar);_writer.Write(value.ToString(DateFormatString,Culture));_writer.Write(_quoteChar);}}private int WriteValueToBuffer(DateTimeOffset value){EnsureWriteBuffer();MiscellaneousUtils.Assert(_writeBuffer!=null);int pos=0;_writeBuffer[pos++]=_quoteChar;pos=DateTimeUtils.WriteDateTimeString(_writeBuffer,pos,(DateFormatHandling==DateFormatHandling.IsoDateFormat)?value.DateTime:value.UtcDateTime,value.Offset,DateTimeKind.Local,DateFormatHandling);_writeBuffer[pos++]=_quoteChar;return pos;}
#endif
public override void WriteValue(Guid value){InternalWriteValue(JsonToken.String);string text;
#if HAVE_CHAR_TO_STRING_WITH_CULTURE
text=value.ToString("D",CultureInfo.InvariantCulture);
#else
text=value.ToString("D");
#endif
_writer.Write(_quoteChar);_writer.Write(text);_writer.Write(_quoteChar);}public override void WriteValue(TimeSpan value){InternalWriteValue(JsonToken.String);string text;
#if !HAVE_TIME_SPAN_TO_STRING_WITH_CULTURE
text=value.ToString();
#else
text=value.ToString(null,CultureInfo.InvariantCulture);
#endif
_writer.Write(_quoteChar);_writer.Write(text);_writer.Write(_quoteChar);}public override void WriteValue(Uri?value){if(value==null){WriteNull();}else{InternalWriteValue(JsonToken.String);WriteEscapedString(value.OriginalString,true);}}public override void WriteComment(string?text){InternalWriteComment();_writer.Write("/*");_writer.Write(text);_writer.Write("*/");}public override void WriteWhitespace(string ws){InternalWriteWhitespace(ws);_writer.Write(ws);}private void EnsureWriteBuffer(){if(_writeBuffer==null){_writeBuffer=BufferUtils.RentBuffer(_arrayPool,35);}}private void WriteIntegerValue(long value){if(value>=0&&value<=9){_writer.Write((char)('0'+value));}else{bool negative=value<0;WriteIntegerValue(negative?(ulong)-value:(ulong)value,negative);}}private void WriteIntegerValue(ulong value,bool negative){if(!negative&value<=9){_writer.Write((char)('0'+value));}else{int length=WriteNumberToBuffer(value,negative);_writer.Write(_writeBuffer,0,length);}}private int WriteNumberToBuffer(ulong value,bool negative){if(value<=uint.MaxValue){return WriteNumberToBuffer((uint)value,negative);}EnsureWriteBuffer();MiscellaneousUtils.Assert(_writeBuffer!=null);int totalLength=MathUtils.IntLength(value);if(negative){totalLength++;_writeBuffer[0]='-';}int index=totalLength;do{ulong quotient=value/10;ulong digit=value-(quotient*10);_writeBuffer[--index]=(char)('0'+digit);value=quotient;}while(value!=0);return totalLength;}private void WriteIntegerValue(int value){if(value>=0&&value<=9){_writer.Write((char)('0'+value));}else{bool negative=value<0;WriteIntegerValue(negative?(uint)-value:(uint)value,negative);}}private void WriteIntegerValue(uint value,bool negative){if(!negative&value<=9){_writer.Write((char)('0'+value));}else{int length=WriteNumberToBuffer(value,negative);_writer.Write(_writeBuffer,0,length);}}private int WriteNumberToBuffer(uint value,bool negative){EnsureWriteBuffer();MiscellaneousUtils.Assert(_writeBuffer!=null);int totalLength=MathUtils.IntLength(value);if(negative){totalLength++;_writeBuffer[0]='-';}int index=totalLength;do{uint quotient=value/10;uint digit=value-(quotient*10);_writeBuffer[--index]=(char)('0'+digit);value=quotient;}while(value!=0);return totalLength;}}}namespace Newtonsoft.Json{public enum JsonToken{None=0,StartObject=1,StartArray=2,StartConstructor=3,PropertyName=4,Comment=5,Raw=6,Integer=7,Float=8,String=9,Boolean=10,Null=11,Undefined=12,EndObject=13,EndArray=14,EndConstructor=15,Date=16,Bytes=17}}namespace Newtonsoft.Json.Utilities{internal static class JsonTokenUtils{internal static bool IsEndToken(JsonToken token){switch(token){case JsonToken.EndObject:case JsonToken.EndArray:case JsonToken.EndConstructor:return true;default:return false;}}internal static bool IsStartToken(JsonToken token){switch(token){case JsonToken.StartObject:case JsonToken.StartArray:case JsonToken.StartConstructor:return true;default:return false;}}internal static bool IsPrimitiveToken(JsonToken token){switch(token){case JsonToken.Integer:case JsonToken.Float:case JsonToken.String:case JsonToken.Boolean:case JsonToken.Undefined:case JsonToken.Null:case JsonToken.Date:case JsonToken.Bytes:return true;default:return false;}}}}
namespace Newtonsoft.Json.Serialization{internal static class JsonTypeReflector{private static bool?_dynamicCodeGeneration;private static bool?_fullyTrusted;public const string IdPropertyName="$id";public const string RefPropertyName="$ref";public const string TypePropertyName="$type";public const string ValuePropertyName="$value";public const string ArrayValuesPropertyName="$values";public const string ShouldSerializePrefix="ShouldSerialize";public const string SpecifiedPostfix="Specified";public const string ConcurrentDictionaryTypeName="System.Collections.Concurrent.ConcurrentDictionary`2";private static readonly ThreadSafeStore<Type,Func<object[]?,object>>CreatorCache=new ThreadSafeStore<Type,Func<object[]?,object>>(GetCreator);
#if !(NET20 || DOTNET)
private static readonly ThreadSafeStore<Type,Type?>AssociatedMetadataTypesCache=new ThreadSafeStore<Type,Type?>(GetAssociateMetadataTypeFromAttribute);private static ReflectionObject?_metadataTypeAttributeReflectionObject;
#endif
public static T?GetCachedAttribute<T>(object attributeProvider)where T:Attribute{return CachedAttributeGetter<T>.GetAttribute(attributeProvider);}
#if HAVE_TYPE_DESCRIPTOR
public static bool CanTypeDescriptorConvertString(Type type,out TypeConverter typeConverter){typeConverter=TypeDescriptor.GetConverter(type);if(typeConverter!=null){Type converterType=typeConverter.GetType();if(!string.Equals(converterType.FullName,"System.ComponentModel.ComponentConverter",StringComparison.Ordinal)&&!string.Equals(converterType.FullName,"System.ComponentModel.ReferenceConverter",StringComparison.Ordinal)&&!string.Equals(converterType.FullName,"System.Windows.Forms.Design.DataSourceConverter",StringComparison.Ordinal)&&converterType!=typeof(TypeConverter)){return typeConverter.CanConvertTo(typeof(string));}}return false;}
#endif
#if HAVE_DATA_CONTRACTS
public static DataContractAttribute?GetDataContractAttribute(Type type){Type currentType=type;while(currentType!=null){DataContractAttribute?result=CachedAttributeGetter<DataContractAttribute>.GetAttribute(currentType);if(result!=null){return result;}currentType=currentType.BaseType();}return null;}public static DataMemberAttribute?GetDataMemberAttribute(MemberInfo memberInfo){if(memberInfo.MemberType()==MemberTypes.Field){return CachedAttributeGetter<DataMemberAttribute>.GetAttribute(memberInfo);}PropertyInfo propertyInfo=(PropertyInfo)memberInfo;DataMemberAttribute?result=CachedAttributeGetter<DataMemberAttribute>.GetAttribute(propertyInfo);if(result==null){if(propertyInfo.IsVirtual()){Type currentType=propertyInfo.DeclaringType;while(result==null&&currentType!=null){PropertyInfo baseProperty=(PropertyInfo)ReflectionUtils.GetMemberInfoFromType(currentType,propertyInfo);if(baseProperty!=null&&baseProperty.IsVirtual()){result=CachedAttributeGetter<DataMemberAttribute>.GetAttribute(baseProperty);}currentType=currentType.BaseType();}}}return result;}
#endif
public static MemberSerialization GetObjectMemberSerialization(Type objectType,bool ignoreSerializableAttribute){JsonObjectAttribute?objectAttribute=GetCachedAttribute<JsonObjectAttribute>(objectType);if(objectAttribute!=null){return objectAttribute.MemberSerialization;}
#if HAVE_DATA_CONTRACTS
DataContractAttribute?dataContractAttribute=GetDataContractAttribute(objectType);if(dataContractAttribute!=null){return MemberSerialization.OptIn;}
#endif
#if HAVE_BINARY_SERIALIZATION
if(!ignoreSerializableAttribute&&IsSerializable(objectType)){return MemberSerialization.Fields;}
#endif
return MemberSerialization.OptOut;}public static JsonConverter?GetJsonConverter(object attributeProvider){JsonConverterAttribute?converterAttribute=GetCachedAttribute<JsonConverterAttribute>(attributeProvider);if(converterAttribute!=null){Func<object[]?,object>creator=CreatorCache.Get(converterAttribute.ConverterType);if(creator!=null){return(JsonConverter)creator(converterAttribute.ConverterParameters);}}return null;}public static JsonConverter CreateJsonConverterInstance(Type converterType,object[]?args){Func<object[]?,object>converterCreator=CreatorCache.Get(converterType);return(JsonConverter)converterCreator(args);}public static NamingStrategy CreateNamingStrategyInstance(Type namingStrategyType,object[]?args){Func<object[]?,object>converterCreator=CreatorCache.Get(namingStrategyType);return(NamingStrategy)converterCreator(args);}public static NamingStrategy?GetContainerNamingStrategy(JsonContainerAttribute containerAttribute){if(containerAttribute.NamingStrategyInstance==null){if(containerAttribute.NamingStrategyType==null){return null;}containerAttribute.NamingStrategyInstance=CreateNamingStrategyInstance(containerAttribute.NamingStrategyType,containerAttribute.NamingStrategyParameters);}return containerAttribute.NamingStrategyInstance;}private static Func<object[]?,object>GetCreator(Type type){Func<object>?defaultConstructor=(ReflectionUtils.HasDefaultConstructor(type,false))?ReflectionDelegateFactory.CreateDefaultConstructor<object>(type):null;return(parameters)=>{try{if(parameters!=null){Type[]paramTypes=parameters.Select(param=>{if(param==null){throw new InvalidOperationException("Cannot pass a null parameter to the constructor.");}return param.GetType();}).ToArray();ConstructorInfo parameterizedConstructorInfo=type.GetConstructor(paramTypes);if(parameterizedConstructorInfo!=null){ObjectConstructor<object>parameterizedConstructor=ReflectionDelegateFactory.CreateParameterizedConstructor(parameterizedConstructorInfo);return parameterizedConstructor(parameters);}else{throw new JsonException("No matching parameterized constructor found for '{0}'.".FormatWith(CultureInfo.InvariantCulture,type));}}if(defaultConstructor==null){throw new JsonException("No parameterless constructor defined for '{0}'.".FormatWith(CultureInfo.InvariantCulture,type));}return defaultConstructor();}catch(Exception ex){throw new JsonException("Error creating '{0}'.".FormatWith(CultureInfo.InvariantCulture,type),ex);}};}
#if !(NET20 || DOTNET)
private static Type?GetAssociatedMetadataType(Type type){return AssociatedMetadataTypesCache.Get(type);}private static Type?GetAssociateMetadataTypeFromAttribute(Type type){Attribute[]customAttributes=ReflectionUtils.GetAttributes(type,null,true);foreach(Attribute attribute in customAttributes){Type attributeType=attribute.GetType();if(string.Equals(attributeType.FullName,"System.ComponentModel.DataAnnotations.MetadataTypeAttribute",StringComparison.Ordinal)){const string metadataClassTypeName="MetadataClassType";if(_metadataTypeAttributeReflectionObject==null){_metadataTypeAttributeReflectionObject=ReflectionObject.Create(attributeType,metadataClassTypeName);}return(Type?)_metadataTypeAttributeReflectionObject.GetValue(attribute,metadataClassTypeName);}}return null;}
#endif
private static T?GetAttribute<T>(Type type)where T:Attribute{T?attribute;
#if !(NET20 || DOTNET)
Type?metadataType=GetAssociatedMetadataType(type);if(metadataType!=null){attribute=ReflectionUtils.GetAttribute<T>(metadataType,true);if(attribute!=null){return attribute;}}
#endif
attribute=ReflectionUtils.GetAttribute<T>(type,true);if(attribute!=null){return attribute;}foreach(Type typeInterface in type.GetInterfaces()){attribute=ReflectionUtils.GetAttribute<T>(typeInterface,true);if(attribute!=null){return attribute;}}return null;}private static T?GetAttribute<T>(MemberInfo memberInfo)where T:Attribute{T?attribute;
#if !(NET20 || DOTNET)
Type?metadataType=GetAssociatedMetadataType(memberInfo.DeclaringType);if(metadataType!=null){MemberInfo metadataTypeMemberInfo=ReflectionUtils.GetMemberInfoFromType(metadataType,memberInfo);if(metadataTypeMemberInfo!=null){attribute=ReflectionUtils.GetAttribute<T>(metadataTypeMemberInfo,true);if(attribute!=null){return attribute;}}}
#endif
attribute=ReflectionUtils.GetAttribute<T>(memberInfo,true);if(attribute!=null){return attribute;}if(memberInfo.DeclaringType!=null){foreach(Type typeInterface in memberInfo.DeclaringType.GetInterfaces()){MemberInfo interfaceTypeMemberInfo=ReflectionUtils.GetMemberInfoFromType(typeInterface,memberInfo);if(interfaceTypeMemberInfo!=null){attribute=ReflectionUtils.GetAttribute<T>(interfaceTypeMemberInfo,true);if(attribute!=null){return attribute;}}}}return null;}
#if HAVE_NON_SERIALIZED_ATTRIBUTE
public static bool IsNonSerializable(object provider){
#if HAVE_FULL_REFLECTION
return(ReflectionUtils.GetAttribute<NonSerializedAttribute>(provider,false)!=null);
#else
if(provider is FieldInfo fieldInfo&&(fieldInfo.Attributes&FieldAttributes.NotSerialized)==FieldAttributes.NotSerialized){return true;}return false;
#endif
}
#endif
#if HAVE_BINARY_SERIALIZATION
public static bool IsSerializable(object provider){
#if HAVE_FULL_REFLECTION
return(ReflectionUtils.GetAttribute<SerializableAttribute>(provider,false)!=null);
#else
if(provider is Type type&&(type.GetTypeInfo().Attributes&TypeAttributes.Serializable)==TypeAttributes.Serializable){return true;}return false;
#endif
}
#endif
public static T?GetAttribute<T>(object provider)where T:Attribute{if(provider is Type type){return GetAttribute<T>(type);}if(provider is MemberInfo memberInfo){return GetAttribute<T>(memberInfo);}return ReflectionUtils.GetAttribute<T>(provider,true);}
#if DEBUG
internal static void SetFullyTrusted(bool?fullyTrusted){_fullyTrusted=fullyTrusted;}internal static void SetDynamicCodeGeneration(bool dynamicCodeGeneration){_dynamicCodeGeneration=dynamicCodeGeneration;}
#endif
public static bool DynamicCodeGeneration{
#if HAVE_SECURITY_SAFE_CRITICAL_ATTRIBUTE
[SecuritySafeCritical]
#endif
get{if(_dynamicCodeGeneration==null){
#if HAVE_CAS
try{new ReflectionPermission(ReflectionPermissionFlag.MemberAccess).Demand();new ReflectionPermission(ReflectionPermissionFlag.RestrictedMemberAccess).Demand();new SecurityPermission(SecurityPermissionFlag.SkipVerification).Demand();new SecurityPermission(SecurityPermissionFlag.UnmanagedCode).Demand();new SecurityPermission(PermissionState.Unrestricted).Demand();_dynamicCodeGeneration=true;}catch(Exception){_dynamicCodeGeneration=false;}
#else
_dynamicCodeGeneration=false;
#endif
}return _dynamicCodeGeneration.GetValueOrDefault();}}public static bool FullyTrusted{get{if(_fullyTrusted==null){
#if (DOTNET || PORTABLE || PORTABLE40)
_fullyTrusted=true;
#elif !(NET20 || NET35 || PORTABLE40)
AppDomain appDomain=AppDomain.CurrentDomain;_fullyTrusted=appDomain.IsHomogenous&&appDomain.IsFullyTrusted;
#else
try{new SecurityPermission(PermissionState.Unrestricted).Demand();_fullyTrusted=true;}catch(Exception){_fullyTrusted=false;}
#endif
}return _fullyTrusted.GetValueOrDefault();}}public static ReflectionDelegateFactory ReflectionDelegateFactory{get{
#if !(PORTABLE40 || PORTABLE || DOTNET || NETSTANDARD2_0)
if(DynamicCodeGeneration){return null;}return LateBoundReflectionDelegateFactory.Instance;
#else
return ExpressionReflectionDelegateFactory.Instance;
#endif
}}}}
namespace Newtonsoft.Json{[Obsolete("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]public class JsonValidatingReader:JsonReader,IJsonLineInfo{private class SchemaScope{private readonly JTokenType _tokenType;private readonly IList<JsonSchemaModel>_schemas;private readonly Dictionary<string,bool>_requiredProperties;public string CurrentPropertyName{get;set;}public int ArrayItemCount{get;set;}public bool IsUniqueArray{get;}public IList<JToken>UniqueArrayItems{get;}public JTokenWriter CurrentItemWriter{get;set;}public IList<JsonSchemaModel>Schemas=>_schemas;public Dictionary<string,bool>RequiredProperties=>_requiredProperties;public JTokenType TokenType=>_tokenType;public SchemaScope(JTokenType tokenType,IList<JsonSchemaModel>schemas){_tokenType=tokenType;_schemas=schemas;_requiredProperties=schemas.SelectMany<JsonSchemaModel,string>(GetRequiredProperties).Distinct().ToDictionary(p=>p,p=>false);if(tokenType==JTokenType.Array&&schemas.Any(s=>s.UniqueItems)){IsUniqueArray=true;UniqueArrayItems=new List<JToken>();}}private IEnumerable<string>GetRequiredProperties(JsonSchemaModel schema){if(schema?.Properties==null){return Enumerable.Empty<string>();}return schema.Properties.Where(p=>p.Value.Required).Select(p=>p.Key);}}private readonly JsonReader _reader;private readonly Stack<SchemaScope>_stack;private JsonSchema _schema;private JsonSchemaModel _model;private SchemaScope _currentScope;public event ValidationEventHandler ValidationEventHandler;public override object Value=>_reader.Value;public override int Depth=>_reader.Depth;public override string Path=>_reader.Path;public override char QuoteChar{get{return _reader.QuoteChar;}protected internal set{}}public override JsonToken TokenType=>_reader.TokenType;public override Type ValueType=>_reader.ValueType;private void Push(SchemaScope scope){_stack.Push(scope);_currentScope=scope;}private SchemaScope Pop(){SchemaScope poppedScope=_stack.Pop();_currentScope=(_stack.Count!=0)?_stack.Peek():null;return poppedScope;}private IList<JsonSchemaModel>CurrentSchemas=>_currentScope.Schemas;private static readonly IList<JsonSchemaModel>EmptySchemaList=new List<JsonSchemaModel>();private IList<JsonSchemaModel>CurrentMemberSchemas{get{if(_currentScope==null){return new List<JsonSchemaModel>(new[]{_model});}if(_currentScope.Schemas==null||_currentScope.Schemas.Count==0){return EmptySchemaList;}switch(_currentScope.TokenType){case JTokenType.None:return _currentScope.Schemas;case JTokenType.Object:{if(_currentScope.CurrentPropertyName==null){throw new JsonReaderException("CurrentPropertyName has not been set on scope.");}IList<JsonSchemaModel>schemas=new List<JsonSchemaModel>();foreach(JsonSchemaModel schema in CurrentSchemas){if(schema.Properties!=null&&schema.Properties.TryGetValue(_currentScope.CurrentPropertyName,out JsonSchemaModel propertySchema)){schemas.Add(propertySchema);}if(schema.PatternProperties!=null){foreach(KeyValuePair<string,JsonSchemaModel>patternProperty in schema.PatternProperties){if(Regex.IsMatch(_currentScope.CurrentPropertyName,patternProperty.Key)){schemas.Add(patternProperty.Value);}}}if(schemas.Count==0&&schema.AllowAdditionalProperties&&schema.AdditionalProperties!=null){schemas.Add(schema.AdditionalProperties);}}return schemas;}case JTokenType.Array:{IList<JsonSchemaModel>schemas=new List<JsonSchemaModel>();foreach(JsonSchemaModel schema in CurrentSchemas){if(!schema.PositionalItemsValidation){if(schema.Items!=null&&schema.Items.Count>0){schemas.Add(schema.Items[0]);}}else{if(schema.Items!=null&&schema.Items.Count>0){if(schema.Items.Count>(_currentScope.ArrayItemCount-1)){schemas.Add(schema.Items[_currentScope.ArrayItemCount-1]);}}if(schema.AllowAdditionalItems&&schema.AdditionalItems!=null){schemas.Add(schema.AdditionalItems);}}}return schemas;}case JTokenType.Constructor:return EmptySchemaList;default:throw new ArgumentOutOfRangeException("TokenType","Unexpected token type: {0}".FormatWith(CultureInfo.InvariantCulture,_currentScope.TokenType));}}}private void RaiseError(string message,JsonSchemaModel schema){IJsonLineInfo lineInfo=this;string exceptionMessage=(lineInfo.HasLineInfo())?message+" Line {0}, position {1}.".FormatWith(CultureInfo.InvariantCulture,lineInfo.LineNumber,lineInfo.LinePosition):message;OnValidationEvent(new JsonSchemaException(exceptionMessage,null,Path,lineInfo.LineNumber,lineInfo.LinePosition));}private void OnValidationEvent(JsonSchemaException exception){ValidationEventHandler handler=ValidationEventHandler;if(handler!=null){handler(this,new ValidationEventArgs(exception));}else{throw exception;}}public JsonValidatingReader(JsonReader reader){ValidationUtils.ArgumentNotNull(reader,nameof(reader));_reader=reader;_stack=new Stack<SchemaScope>();}public JsonSchema Schema{get=>_schema;set{if(TokenType!=JsonToken.None){throw new InvalidOperationException("Cannot change schema while validating JSON.");}_schema=value;_model=null;}}public JsonReader Reader=>_reader;public override void Close(){base.Close();if(CloseInput){_reader?.Close();}}private void ValidateNotDisallowed(JsonSchemaModel schema){if(schema==null){return;}JsonSchemaType?currentNodeType=GetCurrentNodeSchemaType();if(currentNodeType!=null){if(JsonSchemaGenerator.HasFlag(schema.Disallow,currentNodeType.GetValueOrDefault())){RaiseError("Type {0} is disallowed.".FormatWith(CultureInfo.InvariantCulture,currentNodeType),schema);}}}private JsonSchemaType?GetCurrentNodeSchemaType(){switch(_reader.TokenType){case JsonToken.StartObject:return JsonSchemaType.Object;case JsonToken.StartArray:return JsonSchemaType.Array;case JsonToken.Integer:return JsonSchemaType.Integer;case JsonToken.Float:return JsonSchemaType.Float;case JsonToken.String:return JsonSchemaType.String;case JsonToken.Boolean:return JsonSchemaType.Boolean;case JsonToken.Null:return JsonSchemaType.Null;default:return null;}}public override int?ReadAsInt32(){int?i=_reader.ReadAsInt32();ValidateCurrentToken();return i;}public override byte[]ReadAsBytes(){byte[]data=_reader.ReadAsBytes();ValidateCurrentToken();return data;}public override decimal?ReadAsDecimal(){decimal?d=_reader.ReadAsDecimal();ValidateCurrentToken();return d;}public override double?ReadAsDouble(){double?d=_reader.ReadAsDouble();ValidateCurrentToken();return d;}public override bool?ReadAsBoolean(){bool?b=_reader.ReadAsBoolean();ValidateCurrentToken();return b;}public override string ReadAsString(){string s=_reader.ReadAsString();ValidateCurrentToken();return s;}public override DateTime?ReadAsDateTime(){DateTime?dateTime=_reader.ReadAsDateTime();ValidateCurrentToken();return dateTime;}
#if HAVE_DATE_TIME_OFFSET
public override DateTimeOffset?ReadAsDateTimeOffset(){DateTimeOffset?dateTimeOffset=_reader.ReadAsDateTimeOffset();ValidateCurrentToken();return dateTimeOffset;}
#endif
public override bool Read(){if(!_reader.Read()){return false;}if(_reader.TokenType==JsonToken.Comment){return true;}ValidateCurrentToken();return true;}private void ValidateCurrentToken(){if(_model==null){JsonSchemaModelBuilder builder=new JsonSchemaModelBuilder();_model=builder.Build(_schema);if(!JsonTokenUtils.IsStartToken(_reader.TokenType)){Push(new SchemaScope(JTokenType.None,CurrentMemberSchemas));}}switch(_reader.TokenType){case JsonToken.StartObject:ProcessValue();IList<JsonSchemaModel>objectSchemas=CurrentMemberSchemas.Where(ValidateObject).ToList();Push(new SchemaScope(JTokenType.Object,objectSchemas));WriteToken(CurrentSchemas);break;case JsonToken.StartArray:ProcessValue();IList<JsonSchemaModel>arraySchemas=CurrentMemberSchemas.Where(ValidateArray).ToList();Push(new SchemaScope(JTokenType.Array,arraySchemas));WriteToken(CurrentSchemas);break;case JsonToken.StartConstructor:ProcessValue();Push(new SchemaScope(JTokenType.Constructor,null));WriteToken(CurrentSchemas);break;case JsonToken.PropertyName:WriteToken(CurrentSchemas);foreach(JsonSchemaModel schema in CurrentSchemas){ValidatePropertyName(schema);}break;case JsonToken.Raw:ProcessValue();break;case JsonToken.Integer:ProcessValue();WriteToken(CurrentMemberSchemas);foreach(JsonSchemaModel schema in CurrentMemberSchemas){ValidateInteger(schema);}break;case JsonToken.Float:ProcessValue();WriteToken(CurrentMemberSchemas);foreach(JsonSchemaModel schema in CurrentMemberSchemas){ValidateFloat(schema);}break;case JsonToken.String:ProcessValue();WriteToken(CurrentMemberSchemas);foreach(JsonSchemaModel schema in CurrentMemberSchemas){ValidateString(schema);}break;case JsonToken.Boolean:ProcessValue();WriteToken(CurrentMemberSchemas);foreach(JsonSchemaModel schema in CurrentMemberSchemas){ValidateBoolean(schema);}break;case JsonToken.Null:ProcessValue();WriteToken(CurrentMemberSchemas);foreach(JsonSchemaModel schema in CurrentMemberSchemas){ValidateNull(schema);}break;case JsonToken.EndObject:WriteToken(CurrentSchemas);foreach(JsonSchemaModel schema in CurrentSchemas){ValidateEndObject(schema);}Pop();break;case JsonToken.EndArray:WriteToken(CurrentSchemas);foreach(JsonSchemaModel schema in CurrentSchemas){ValidateEndArray(schema);}Pop();break;case JsonToken.EndConstructor:WriteToken(CurrentSchemas);Pop();break;case JsonToken.Undefined:case JsonToken.Date:case JsonToken.Bytes:WriteToken(CurrentMemberSchemas);break;case JsonToken.None:break;default:throw new ArgumentOutOfRangeException();}}private void WriteToken(IList<JsonSchemaModel>schemas){foreach(SchemaScope schemaScope in _stack){bool isInUniqueArray=(schemaScope.TokenType==JTokenType.Array&&schemaScope.IsUniqueArray&&schemaScope.ArrayItemCount>0);if(isInUniqueArray||schemas.Any(s=>s.Enum!=null)){if(schemaScope.CurrentItemWriter==null){if(JsonTokenUtils.IsEndToken(_reader.TokenType)){continue;}schemaScope.CurrentItemWriter=new JTokenWriter();}schemaScope.CurrentItemWriter.WriteToken(_reader,false);if(schemaScope.CurrentItemWriter.Top==0&&_reader.TokenType!=JsonToken.PropertyName){JToken finishedItem=schemaScope.CurrentItemWriter.Token;schemaScope.CurrentItemWriter=null;if(isInUniqueArray){if(schemaScope.UniqueArrayItems.Contains(finishedItem,JToken.EqualityComparer)){RaiseError("Non-unique array item at index {0}.".FormatWith(CultureInfo.InvariantCulture,schemaScope.ArrayItemCount-1),schemaScope.Schemas.First(s=>s.UniqueItems));}schemaScope.UniqueArrayItems.Add(finishedItem);}else if(schemas.Any(s=>s.Enum!=null)){foreach(JsonSchemaModel schema in schemas){if(schema.Enum!=null){if(!schema.Enum.ContainsValue(finishedItem,JToken.EqualityComparer)){StringWriter sw=new StringWriter(CultureInfo.InvariantCulture);finishedItem.WriteTo(new JsonTextWriter(sw));RaiseError("Value {0} is not defined in enum.".FormatWith(CultureInfo.InvariantCulture,sw.ToString()),schema);}}}}}}}}private void ValidateEndObject(JsonSchemaModel schema){if(schema==null){return;}Dictionary<string,bool>requiredProperties=_currentScope.RequiredProperties;if(requiredProperties!=null&&requiredProperties.Values.Any(v=>!v)){IEnumerable<string>unmatchedRequiredProperties=requiredProperties.Where(kv=>!kv.Value).Select(kv=>kv.Key);RaiseError("Required properties are missing from object: {0}.".FormatWith(CultureInfo.InvariantCulture,string.Join(", ",unmatchedRequiredProperties
#if !HAVE_STRING_JOIN_WITH_ENUMERABLE
.ToArray()
#endif
)),schema);}}private void ValidateEndArray(JsonSchemaModel schema){if(schema==null){return;}int arrayItemCount=_currentScope.ArrayItemCount;if(schema.MaximumItems!=null&&arrayItemCount>schema.MaximumItems){RaiseError("Array item count {0} exceeds maximum count of {1}.".FormatWith(CultureInfo.InvariantCulture,arrayItemCount,schema.MaximumItems),schema);}if(schema.MinimumItems!=null&&arrayItemCount<schema.MinimumItems){RaiseError("Array item count {0} is less than minimum count of {1}.".FormatWith(CultureInfo.InvariantCulture,arrayItemCount,schema.MinimumItems),schema);}}private void ValidateNull(JsonSchemaModel schema){if(schema==null){return;}if(!TestType(schema,JsonSchemaType.Null)){return;}ValidateNotDisallowed(schema);}private void ValidateBoolean(JsonSchemaModel schema){if(schema==null){return;}if(!TestType(schema,JsonSchemaType.Boolean)){return;}ValidateNotDisallowed(schema);}private void ValidateString(JsonSchemaModel schema){if(schema==null){return;}if(!TestType(schema,JsonSchemaType.String)){return;}ValidateNotDisallowed(schema);string value=_reader.Value.ToString();if(schema.MaximumLength!=null&&value.Length>schema.MaximumLength){RaiseError("String '{0}' exceeds maximum length of {1}.".FormatWith(CultureInfo.InvariantCulture,value,schema.MaximumLength),schema);}if(schema.MinimumLength!=null&&value.Length<schema.MinimumLength){RaiseError("String '{0}' is less than minimum length of {1}.".FormatWith(CultureInfo.InvariantCulture,value,schema.MinimumLength),schema);}if(schema.Patterns!=null){foreach(string pattern in schema.Patterns){if(!Regex.IsMatch(value,pattern)){RaiseError("String '{0}' does not match regex pattern '{1}'.".FormatWith(CultureInfo.InvariantCulture,value,pattern),schema);}}}}private void ValidateInteger(JsonSchemaModel schema){if(schema==null){return;}if(!TestType(schema,JsonSchemaType.Integer)){return;}ValidateNotDisallowed(schema);object value=_reader.Value;if(schema.Maximum!=null){if(JValue.Compare(JTokenType.Integer,value,schema.Maximum)>0){RaiseError("Integer {0} exceeds maximum value of {1}.".FormatWith(CultureInfo.InvariantCulture,value,schema.Maximum),schema);}if(schema.ExclusiveMaximum&&JValue.Compare(JTokenType.Integer,value,schema.Maximum)==0){RaiseError("Integer {0} equals maximum value of {1} and exclusive maximum is true.".FormatWith(CultureInfo.InvariantCulture,value,schema.Maximum),schema);}}if(schema.Minimum!=null){if(JValue.Compare(JTokenType.Integer,value,schema.Minimum)<0){RaiseError("Integer {0} is less than minimum value of {1}.".FormatWith(CultureInfo.InvariantCulture,value,schema.Minimum),schema);}if(schema.ExclusiveMinimum&&JValue.Compare(JTokenType.Integer,value,schema.Minimum)==0){RaiseError("Integer {0} equals minimum value of {1} and exclusive minimum is true.".FormatWith(CultureInfo.InvariantCulture,value,schema.Minimum),schema);}}if(schema.DivisibleBy!=null){bool notDivisible;
#if HAVE_BIG_INTEGER
if(value is BigInteger i){bool divisibleNonInteger=!Math.Abs(schema.DivisibleBy.Value-Math.Truncate(schema.DivisibleBy.Value)).Equals(0);if(divisibleNonInteger){notDivisible=i!=0;}else{notDivisible=i%new BigInteger(schema.DivisibleBy.Value)!=0;}}else
#endif
{notDivisible=!IsZero(Convert.ToInt64(value,CultureInfo.InvariantCulture)%schema.DivisibleBy.GetValueOrDefault());}if(notDivisible){RaiseError("Integer {0} is not evenly divisible by {1}.".FormatWith(CultureInfo.InvariantCulture,JsonConvert.ToString(value),schema.DivisibleBy),schema);}}}private void ProcessValue(){if(_currentScope!=null&&_currentScope.TokenType==JTokenType.Array){_currentScope.ArrayItemCount++;foreach(JsonSchemaModel currentSchema in CurrentSchemas){if(currentSchema!=null&&currentSchema.PositionalItemsValidation&&!currentSchema.AllowAdditionalItems&&(currentSchema.Items==null||_currentScope.ArrayItemCount-1>=currentSchema.Items.Count)){RaiseError("Index {0} has not been defined and the schema does not allow additional items.".FormatWith(CultureInfo.InvariantCulture,_currentScope.ArrayItemCount),currentSchema);}}}}private void ValidateFloat(JsonSchemaModel schema){if(schema==null){return;}if(!TestType(schema,JsonSchemaType.Float)){return;}ValidateNotDisallowed(schema);double value=Convert.ToDouble(_reader.Value,CultureInfo.InvariantCulture);if(schema.Maximum!=null){if(value>schema.Maximum){RaiseError("Float {0} exceeds maximum value of {1}.".FormatWith(CultureInfo.InvariantCulture,JsonConvert.ToString(value),schema.Maximum),schema);}if(schema.ExclusiveMaximum&&value==schema.Maximum){RaiseError("Float {0} equals maximum value of {1} and exclusive maximum is true.".FormatWith(CultureInfo.InvariantCulture,JsonConvert.ToString(value),schema.Maximum),schema);}}if(schema.Minimum!=null){if(value<schema.Minimum){RaiseError("Float {0} is less than minimum value of {1}.".FormatWith(CultureInfo.InvariantCulture,JsonConvert.ToString(value),schema.Minimum),schema);}if(schema.ExclusiveMinimum&&value==schema.Minimum){RaiseError("Float {0} equals minimum value of {1} and exclusive minimum is true.".FormatWith(CultureInfo.InvariantCulture,JsonConvert.ToString(value),schema.Minimum),schema);}}if(schema.DivisibleBy!=null){double remainder=FloatingPointRemainder(value,schema.DivisibleBy.GetValueOrDefault());if(!IsZero(remainder)){RaiseError("Float {0} is not evenly divisible by {1}.".FormatWith(CultureInfo.InvariantCulture,JsonConvert.ToString(value),schema.DivisibleBy),schema);}}}private static double FloatingPointRemainder(double dividend,double divisor){return dividend-Math.Floor(dividend/divisor)*divisor;}private static bool IsZero(double value){const double epsilon=2.2204460492503131e-016;return Math.Abs(value)<20.0*epsilon;}private void ValidatePropertyName(JsonSchemaModel schema){if(schema==null){return;}string propertyName=Convert.ToString(_reader.Value,CultureInfo.InvariantCulture);if(_currentScope.RequiredProperties.ContainsKey(propertyName)){_currentScope.RequiredProperties[propertyName]=true;}if(!schema.AllowAdditionalProperties){bool propertyDefinied=IsPropertyDefinied(schema,propertyName);if(!propertyDefinied){RaiseError("Property '{0}' has not been defined and the schema does not allow additional properties.".FormatWith(CultureInfo.InvariantCulture,propertyName),schema);}}_currentScope.CurrentPropertyName=propertyName;}private bool IsPropertyDefinied(JsonSchemaModel schema,string propertyName){if(schema.Properties!=null&&schema.Properties.ContainsKey(propertyName)){return true;}if(schema.PatternProperties!=null){foreach(string pattern in schema.PatternProperties.Keys){if(Regex.IsMatch(propertyName,pattern)){return true;}}}return false;}private bool ValidateArray(JsonSchemaModel schema){if(schema==null){return true;}return(TestType(schema,JsonSchemaType.Array));}private bool ValidateObject(JsonSchemaModel schema){if(schema==null){return true;}return(TestType(schema,JsonSchemaType.Object));}private bool TestType(JsonSchemaModel currentSchema,JsonSchemaType currentType){if(!JsonSchemaGenerator.HasFlag(currentSchema.Type,currentType)){RaiseError("Invalid type. Expected {0} but got {1}.".FormatWith(CultureInfo.InvariantCulture,currentSchema.Type,currentType),currentSchema);return false;}return true;}bool IJsonLineInfo.HasLineInfo(){return _reader is IJsonLineInfo lineInfo&&lineInfo.HasLineInfo();}int IJsonLineInfo.LineNumber=>(_reader is IJsonLineInfo lineInfo)?lineInfo.LineNumber:0;int IJsonLineInfo.LinePosition=>(_reader is IJsonLineInfo lineInfo)?lineInfo.LinePosition:0;}}
#if HAVE_ASYNC
#if HAVE_BIG_INTEGER
#endif
namespace Newtonsoft.Json{public abstract partial class JsonWriter{internal Task AutoCompleteAsync(JsonToken tokenBeingWritten,CancellationToken cancellationToken){State oldState=_currentState;State newState=StateArray[(int)tokenBeingWritten][(int)oldState];if(newState==State.Error){throw JsonWriterException.Create(this,"Token {0} in state {1} would result in an invalid JSON object.".FormatWith(CultureInfo.InvariantCulture,tokenBeingWritten.ToString(),oldState.ToString()),null);}_currentState=newState;if(_formatting==Formatting.Indented){switch(oldState){case State.Start:break;case State.Property:return WriteIndentSpaceAsync(cancellationToken);case State.ArrayStart:case State.ConstructorStart:return WriteIndentAsync(cancellationToken);case State.Array:case State.Constructor:return tokenBeingWritten==JsonToken.Comment?WriteIndentAsync(cancellationToken):AutoCompleteAsync(cancellationToken);case State.Object:switch(tokenBeingWritten){case JsonToken.Comment:break;case JsonToken.PropertyName:return AutoCompleteAsync(cancellationToken);default:return WriteValueDelimiterAsync(cancellationToken);}break;default:if(tokenBeingWritten==JsonToken.PropertyName){return WriteIndentAsync(cancellationToken);}break;}}else if(tokenBeingWritten!=JsonToken.Comment){switch(oldState){case State.Object:case State.Array:case State.Constructor:return WriteValueDelimiterAsync(cancellationToken);}}return AsyncUtils.CompletedTask;}private async Task AutoCompleteAsync(CancellationToken cancellationToken){await WriteValueDelimiterAsync(cancellationToken).ConfigureAwait(false);await WriteIndentAsync(cancellationToken).ConfigureAwait(false);}public virtual Task CloseAsync(CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}Close();return AsyncUtils.CompletedTask;}public virtual Task FlushAsync(CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}Flush();return AsyncUtils.CompletedTask;}protected virtual Task WriteEndAsync(JsonToken token,CancellationToken cancellationToken){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteEnd(token);return AsyncUtils.CompletedTask;}protected virtual Task WriteIndentAsync(CancellationToken cancellationToken){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteIndent();return AsyncUtils.CompletedTask;}protected virtual Task WriteValueDelimiterAsync(CancellationToken cancellationToken){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteValueDelimiter();return AsyncUtils.CompletedTask;}protected virtual Task WriteIndentSpaceAsync(CancellationToken cancellationToken){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteIndentSpace();return AsyncUtils.CompletedTask;}public virtual Task WriteRawAsync(string?json,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteRaw(json);return AsyncUtils.CompletedTask;}public virtual Task WriteEndAsync(CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteEnd();return AsyncUtils.CompletedTask;}internal Task WriteEndInternalAsync(CancellationToken cancellationToken){JsonContainerType type=Peek();switch(type){case JsonContainerType.Object:return WriteEndObjectAsync(cancellationToken);case JsonContainerType.Array:return WriteEndArrayAsync(cancellationToken);case JsonContainerType.Constructor:return WriteEndConstructorAsync(cancellationToken);default:if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}throw JsonWriterException.Create(this,"Unexpected type when writing end: "+type,null);}}internal Task InternalWriteEndAsync(JsonContainerType type,CancellationToken cancellationToken){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}int levelsToComplete=CalculateLevelsToComplete(type);while(levelsToComplete-->0){JsonToken token=GetCloseTokenForType(Pop());Task t;if(_currentState==State.Property){t=WriteNullAsync(cancellationToken);if(!t.IsCompletedSucessfully()){return AwaitProperty(t,levelsToComplete,token,cancellationToken);}}if(_formatting==Formatting.Indented){if(_currentState!=State.ObjectStart&&_currentState!=State.ArrayStart){t=WriteIndentAsync(cancellationToken);if(!t.IsCompletedSucessfully()){return AwaitIndent(t,levelsToComplete,token,cancellationToken);}}}t=WriteEndAsync(token,cancellationToken);if(!t.IsCompletedSucessfully()){return AwaitEnd(t,levelsToComplete,cancellationToken);}UpdateCurrentState();}return AsyncUtils.CompletedTask;async Task AwaitProperty(Task task,int LevelsToComplete,JsonToken token,CancellationToken CancellationToken){await task.ConfigureAwait(false);if(_formatting==Formatting.Indented){if(_currentState!=State.ObjectStart&&_currentState!=State.ArrayStart){await WriteIndentAsync(CancellationToken).ConfigureAwait(false);}}await WriteEndAsync(token,CancellationToken).ConfigureAwait(false);UpdateCurrentState();await AwaitRemaining(LevelsToComplete,CancellationToken).ConfigureAwait(false);}async Task AwaitIndent(Task task,int LevelsToComplete,JsonToken token,CancellationToken CancellationToken){await task.ConfigureAwait(false);await WriteEndAsync(token,CancellationToken).ConfigureAwait(false);UpdateCurrentState();await AwaitRemaining(LevelsToComplete,CancellationToken).ConfigureAwait(false);}async Task AwaitEnd(Task task,int LevelsToComplete,CancellationToken CancellationToken){await task.ConfigureAwait(false);UpdateCurrentState();await AwaitRemaining(LevelsToComplete,CancellationToken).ConfigureAwait(false);}async Task AwaitRemaining(int LevelsToComplete,CancellationToken CancellationToken){while(LevelsToComplete-->0){JsonToken token=GetCloseTokenForType(Pop());if(_currentState==State.Property){await WriteNullAsync(CancellationToken).ConfigureAwait(false);}if(_formatting==Formatting.Indented){if(_currentState!=State.ObjectStart&&_currentState!=State.ArrayStart){await WriteIndentAsync(CancellationToken).ConfigureAwait(false);}}await WriteEndAsync(token,CancellationToken).ConfigureAwait(false);UpdateCurrentState();}}}public virtual Task WriteEndArrayAsync(CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteEndArray();return AsyncUtils.CompletedTask;}public virtual Task WriteEndConstructorAsync(CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteEndConstructor();return AsyncUtils.CompletedTask;}public virtual Task WriteEndObjectAsync(CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteEndObject();return AsyncUtils.CompletedTask;}public virtual Task WriteNullAsync(CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteNull();return AsyncUtils.CompletedTask;}public virtual Task WritePropertyNameAsync(string name,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WritePropertyName(name);return AsyncUtils.CompletedTask;}public virtual Task WritePropertyNameAsync(string name,bool escape,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WritePropertyName(name,escape);return AsyncUtils.CompletedTask;}internal Task InternalWritePropertyNameAsync(string name,CancellationToken cancellationToken){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}_currentPosition.PropertyName=name;return AutoCompleteAsync(JsonToken.PropertyName,cancellationToken);}public virtual Task WriteStartArrayAsync(CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteStartArray();return AsyncUtils.CompletedTask;}internal async Task InternalWriteStartAsync(JsonToken token,JsonContainerType container,CancellationToken cancellationToken){UpdateScopeWithFinishedValue();await AutoCompleteAsync(token,cancellationToken).ConfigureAwait(false);Push(container);}public virtual Task WriteCommentAsync(string?text,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteComment(text);return AsyncUtils.CompletedTask;}internal Task InternalWriteCommentAsync(CancellationToken cancellationToken){return AutoCompleteAsync(JsonToken.Comment,cancellationToken);}public virtual Task WriteRawValueAsync(string?json,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteRawValue(json);return AsyncUtils.CompletedTask;}public virtual Task WriteStartConstructorAsync(string name,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteStartConstructor(name);return AsyncUtils.CompletedTask;}public virtual Task WriteStartObjectAsync(CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteStartObject();return AsyncUtils.CompletedTask;}public Task WriteTokenAsync(JsonReader reader,CancellationToken cancellationToken=default){return WriteTokenAsync(reader,true,cancellationToken);}public Task WriteTokenAsync(JsonReader reader,bool writeChildren,CancellationToken cancellationToken=default){ValidationUtils.ArgumentNotNull(reader,nameof(reader));return WriteTokenAsync(reader,writeChildren,true,true,cancellationToken);}public Task WriteTokenAsync(JsonToken token,CancellationToken cancellationToken=default){return WriteTokenAsync(token,null,cancellationToken);}public Task WriteTokenAsync(JsonToken token,object?value,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}switch(token){case JsonToken.None:return AsyncUtils.CompletedTask;case JsonToken.StartObject:return WriteStartObjectAsync(cancellationToken);case JsonToken.StartArray:return WriteStartArrayAsync(cancellationToken);case JsonToken.StartConstructor:ValidationUtils.ArgumentNotNull(value,nameof(value));return WriteStartConstructorAsync(value.ToString(),cancellationToken);case JsonToken.PropertyName:ValidationUtils.ArgumentNotNull(value,nameof(value));return WritePropertyNameAsync(value.ToString(),cancellationToken);case JsonToken.Comment:return WriteCommentAsync(value?.ToString(),cancellationToken);case JsonToken.Integer:ValidationUtils.ArgumentNotNull(value,nameof(value));return
#if HAVE_BIG_INTEGER
value is BigInteger integer?WriteValueAsync(integer,cancellationToken):
#endif
WriteValueAsync(Convert.ToInt64(value,CultureInfo.InvariantCulture),cancellationToken);case JsonToken.Float:ValidationUtils.ArgumentNotNull(value,nameof(value));if(value is decimal dec){return WriteValueAsync(dec,cancellationToken);}if(value is double doub){return WriteValueAsync(doub,cancellationToken);}if(value is float f){return WriteValueAsync(f,cancellationToken);}return WriteValueAsync(Convert.ToDouble(value,CultureInfo.InvariantCulture),cancellationToken);case JsonToken.String:ValidationUtils.ArgumentNotNull(value,nameof(value));return WriteValueAsync(value.ToString(),cancellationToken);case JsonToken.Boolean:ValidationUtils.ArgumentNotNull(value,nameof(value));return WriteValueAsync(Convert.ToBoolean(value,CultureInfo.InvariantCulture),cancellationToken);case JsonToken.Null:return WriteNullAsync(cancellationToken);case JsonToken.Undefined:return WriteUndefinedAsync(cancellationToken);case JsonToken.EndObject:return WriteEndObjectAsync(cancellationToken);case JsonToken.EndArray:return WriteEndArrayAsync(cancellationToken);case JsonToken.EndConstructor:return WriteEndConstructorAsync(cancellationToken);case JsonToken.Date:ValidationUtils.ArgumentNotNull(value,nameof(value));if(value is DateTimeOffset offset){return WriteValueAsync(offset,cancellationToken);}return WriteValueAsync(Convert.ToDateTime(value,CultureInfo.InvariantCulture),cancellationToken);case JsonToken.Raw:return WriteRawValueAsync(value?.ToString(),cancellationToken);case JsonToken.Bytes:ValidationUtils.ArgumentNotNull(value,nameof(value));if(value is Guid guid){return WriteValueAsync(guid,cancellationToken);}return WriteValueAsync((byte[]?)value,cancellationToken);default:throw MiscellaneousUtils.CreateArgumentOutOfRangeException(nameof(token),token,"Unexpected token type.");}}internal virtual async Task WriteTokenAsync(JsonReader reader,bool writeChildren,bool writeDateConstructorAsDate,bool writeComments,CancellationToken cancellationToken){int initialDepth=CalculateWriteTokenInitialDepth(reader);do{if(writeDateConstructorAsDate&&reader.TokenType==JsonToken.StartConstructor&&string.Equals(reader.Value?.ToString(),"Date",StringComparison.Ordinal)){await WriteConstructorDateAsync(reader,cancellationToken).ConfigureAwait(false);}else{if(writeComments||reader.TokenType!=JsonToken.Comment){await WriteTokenAsync(reader.TokenType,reader.Value,cancellationToken).ConfigureAwait(false);}}}while(initialDepth-1<reader.Depth-(JsonTokenUtils.IsEndToken(reader.TokenType)?1:0)&&writeChildren&&await reader.ReadAsync(cancellationToken).ConfigureAwait(false));if(IsWriteTokenIncomplete(reader,writeChildren,initialDepth)){throw JsonWriterException.Create(this,"Unexpected end when reading token.",null);}}internal async Task WriteTokenSyncReadingAsync(JsonReader reader,CancellationToken cancellationToken){int initialDepth=CalculateWriteTokenInitialDepth(reader);do{if(reader.TokenType==JsonToken.StartConstructor&&string.Equals(reader.Value?.ToString(),"Date",StringComparison.Ordinal)){WriteConstructorDate(reader);}else{WriteToken(reader.TokenType,reader.Value);}}while(initialDepth-1<reader.Depth-(JsonTokenUtils.IsEndToken(reader.TokenType)?1:0)&&await reader.ReadAsync(cancellationToken).ConfigureAwait(false));if(initialDepth<CalculateWriteTokenFinalDepth(reader)){throw JsonWriterException.Create(this,"Unexpected end when reading token.",null);}}private async Task WriteConstructorDateAsync(JsonReader reader,CancellationToken cancellationToken){if(!await reader.ReadAsync(cancellationToken).ConfigureAwait(false)){throw JsonWriterException.Create(this,"Unexpected end when reading date constructor.",null);}if(reader.TokenType!=JsonToken.Integer){throw JsonWriterException.Create(this,"Unexpected token when reading date constructor. Expected Integer, got "+reader.TokenType,null);}DateTime date=DateTimeUtils.ConvertJavaScriptTicksToDateTime((long)reader.Value!);if(!await reader.ReadAsync(cancellationToken).ConfigureAwait(false)){throw JsonWriterException.Create(this,"Unexpected end when reading date constructor.",null);}if(reader.TokenType!=JsonToken.EndConstructor){throw JsonWriterException.Create(this,"Unexpected token when reading date constructor. Expected EndConstructor, got "+reader.TokenType,null);}await WriteValueAsync(date,cancellationToken).ConfigureAwait(false);}public virtual Task WriteValueAsync(bool value,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteValue(value);return AsyncUtils.CompletedTask;}public virtual Task WriteValueAsync(bool?value,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteValue(value);return AsyncUtils.CompletedTask;}public virtual Task WriteValueAsync(byte value,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteValue(value);return AsyncUtils.CompletedTask;}public virtual Task WriteValueAsync(byte?value,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteValue(value);return AsyncUtils.CompletedTask;}public virtual Task WriteValueAsync(byte[]?value,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteValue(value);return AsyncUtils.CompletedTask;}public virtual Task WriteValueAsync(char value,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteValue(value);return AsyncUtils.CompletedTask;}public virtual Task WriteValueAsync(char?value,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteValue(value);return AsyncUtils.CompletedTask;}public virtual Task WriteValueAsync(DateTime value,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteValue(value);return AsyncUtils.CompletedTask;}public virtual Task WriteValueAsync(DateTime?value,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteValue(value);return AsyncUtils.CompletedTask;}public virtual Task WriteValueAsync(DateTimeOffset value,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteValue(value);return AsyncUtils.CompletedTask;}public virtual Task WriteValueAsync(DateTimeOffset?value,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteValue(value);return AsyncUtils.CompletedTask;}public virtual Task WriteValueAsync(decimal value,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteValue(value);return AsyncUtils.CompletedTask;}public virtual Task WriteValueAsync(decimal?value,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteValue(value);return AsyncUtils.CompletedTask;}public virtual Task WriteValueAsync(double value,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteValue(value);return AsyncUtils.CompletedTask;}public virtual Task WriteValueAsync(double?value,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteValue(value);return AsyncUtils.CompletedTask;}public virtual Task WriteValueAsync(float value,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteValue(value);return AsyncUtils.CompletedTask;}public virtual Task WriteValueAsync(float?value,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteValue(value);return AsyncUtils.CompletedTask;}public virtual Task WriteValueAsync(Guid value,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteValue(value);return AsyncUtils.CompletedTask;}public virtual Task WriteValueAsync(Guid?value,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteValue(value);return AsyncUtils.CompletedTask;}public virtual Task WriteValueAsync(int value,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteValue(value);return AsyncUtils.CompletedTask;}public virtual Task WriteValueAsync(int?value,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteValue(value);return AsyncUtils.CompletedTask;}public virtual Task WriteValueAsync(long value,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteValue(value);return AsyncUtils.CompletedTask;}public virtual Task WriteValueAsync(long?value,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteValue(value);return AsyncUtils.CompletedTask;}public virtual Task WriteValueAsync(object?value,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteValue(value);return AsyncUtils.CompletedTask;}[CLSCompliant(false)]public virtual Task WriteValueAsync(sbyte value,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteValue(value);return AsyncUtils.CompletedTask;}[CLSCompliant(false)]public virtual Task WriteValueAsync(sbyte?value,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteValue(value);return AsyncUtils.CompletedTask;}public virtual Task WriteValueAsync(short value,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteValue(value);return AsyncUtils.CompletedTask;}public virtual Task WriteValueAsync(short?value,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteValue(value);return AsyncUtils.CompletedTask;}public virtual Task WriteValueAsync(string?value,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteValue(value);return AsyncUtils.CompletedTask;}public virtual Task WriteValueAsync(TimeSpan value,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteValue(value);return AsyncUtils.CompletedTask;}public virtual Task WriteValueAsync(TimeSpan?value,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteValue(value);return AsyncUtils.CompletedTask;}[CLSCompliant(false)]public virtual Task WriteValueAsync(uint value,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteValue(value);return AsyncUtils.CompletedTask;}[CLSCompliant(false)]public virtual Task WriteValueAsync(uint?value,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteValue(value);return AsyncUtils.CompletedTask;}[CLSCompliant(false)]public virtual Task WriteValueAsync(ulong value,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteValue(value);return AsyncUtils.CompletedTask;}[CLSCompliant(false)]public virtual Task WriteValueAsync(ulong?value,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteValue(value);return AsyncUtils.CompletedTask;}public virtual Task WriteValueAsync(Uri?value,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteValue(value);return AsyncUtils.CompletedTask;}[CLSCompliant(false)]public virtual Task WriteValueAsync(ushort value,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteValue(value);return AsyncUtils.CompletedTask;}[CLSCompliant(false)]public virtual Task WriteValueAsync(ushort?value,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteValue(value);return AsyncUtils.CompletedTask;}public virtual Task WriteUndefinedAsync(CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteUndefined();return AsyncUtils.CompletedTask;}public virtual Task WriteWhitespaceAsync(string ws,CancellationToken cancellationToken=default){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}WriteWhitespace(ws);return AsyncUtils.CompletedTask;}internal Task InternalWriteValueAsync(JsonToken token,CancellationToken cancellationToken){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}UpdateScopeWithFinishedValue();return AutoCompleteAsync(token,cancellationToken);}protected Task SetWriteStateAsync(JsonToken token,object value,CancellationToken cancellationToken){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}switch(token){case JsonToken.StartObject:return InternalWriteStartAsync(token,JsonContainerType.Object,cancellationToken);case JsonToken.StartArray:return InternalWriteStartAsync(token,JsonContainerType.Array,cancellationToken);case JsonToken.StartConstructor:return InternalWriteStartAsync(token,JsonContainerType.Constructor,cancellationToken);case JsonToken.PropertyName:if(!(value is string s)){throw new ArgumentException("A name is required when setting property name state.",nameof(value));}return InternalWritePropertyNameAsync(s,cancellationToken);case JsonToken.Comment:return InternalWriteCommentAsync(cancellationToken);case JsonToken.Raw:return AsyncUtils.CompletedTask;case JsonToken.Integer:case JsonToken.Float:case JsonToken.String:case JsonToken.Boolean:case JsonToken.Date:case JsonToken.Bytes:case JsonToken.Null:case JsonToken.Undefined:return InternalWriteValueAsync(token,cancellationToken);case JsonToken.EndObject:return InternalWriteEndAsync(JsonContainerType.Object,cancellationToken);case JsonToken.EndArray:return InternalWriteEndAsync(JsonContainerType.Array,cancellationToken);case JsonToken.EndConstructor:return InternalWriteEndAsync(JsonContainerType.Constructor,cancellationToken);default:throw new ArgumentOutOfRangeException(nameof(token));}}internal static Task WriteValueAsync(JsonWriter writer,PrimitiveTypeCode typeCode,object value,CancellationToken cancellationToken){while(true){switch(typeCode){case PrimitiveTypeCode.Char:return writer.WriteValueAsync((char)value,cancellationToken);case PrimitiveTypeCode.CharNullable:return writer.WriteValueAsync(value==null?(char?)null:(char)value,cancellationToken);case PrimitiveTypeCode.Boolean:return writer.WriteValueAsync((bool)value,cancellationToken);case PrimitiveTypeCode.BooleanNullable:return writer.WriteValueAsync(value==null?(bool?)null:(bool)value,cancellationToken);case PrimitiveTypeCode.SByte:return writer.WriteValueAsync((sbyte)value,cancellationToken);case PrimitiveTypeCode.SByteNullable:return writer.WriteValueAsync(value==null?(sbyte?)null:(sbyte)value,cancellationToken);case PrimitiveTypeCode.Int16:return writer.WriteValueAsync((short)value,cancellationToken);case PrimitiveTypeCode.Int16Nullable:return writer.WriteValueAsync(value==null?(short?)null:(short)value,cancellationToken);case PrimitiveTypeCode.UInt16:return writer.WriteValueAsync((ushort)value,cancellationToken);case PrimitiveTypeCode.UInt16Nullable:return writer.WriteValueAsync(value==null?(ushort?)null:(ushort)value,cancellationToken);case PrimitiveTypeCode.Int32:return writer.WriteValueAsync((int)value,cancellationToken);case PrimitiveTypeCode.Int32Nullable:return writer.WriteValueAsync(value==null?(int?)null:(int)value,cancellationToken);case PrimitiveTypeCode.Byte:return writer.WriteValueAsync((byte)value,cancellationToken);case PrimitiveTypeCode.ByteNullable:return writer.WriteValueAsync(value==null?(byte?)null:(byte)value,cancellationToken);case PrimitiveTypeCode.UInt32:return writer.WriteValueAsync((uint)value,cancellationToken);case PrimitiveTypeCode.UInt32Nullable:return writer.WriteValueAsync(value==null?(uint?)null:(uint)value,cancellationToken);case PrimitiveTypeCode.Int64:return writer.WriteValueAsync((long)value,cancellationToken);case PrimitiveTypeCode.Int64Nullable:return writer.WriteValueAsync(value==null?(long?)null:(long)value,cancellationToken);case PrimitiveTypeCode.UInt64:return writer.WriteValueAsync((ulong)value,cancellationToken);case PrimitiveTypeCode.UInt64Nullable:return writer.WriteValueAsync(value==null?(ulong?)null:(ulong)value,cancellationToken);case PrimitiveTypeCode.Single:return writer.WriteValueAsync((float)value,cancellationToken);case PrimitiveTypeCode.SingleNullable:return writer.WriteValueAsync(value==null?(float?)null:(float)value,cancellationToken);case PrimitiveTypeCode.Double:return writer.WriteValueAsync((double)value,cancellationToken);case PrimitiveTypeCode.DoubleNullable:return writer.WriteValueAsync(value==null?(double?)null:(double)value,cancellationToken);case PrimitiveTypeCode.DateTime:return writer.WriteValueAsync((DateTime)value,cancellationToken);case PrimitiveTypeCode.DateTimeNullable:return writer.WriteValueAsync(value==null?(DateTime?)null:(DateTime)value,cancellationToken);case PrimitiveTypeCode.DateTimeOffset:return writer.WriteValueAsync((DateTimeOffset)value,cancellationToken);case PrimitiveTypeCode.DateTimeOffsetNullable:return writer.WriteValueAsync(value==null?(DateTimeOffset?)null:(DateTimeOffset)value,cancellationToken);case PrimitiveTypeCode.Decimal:return writer.WriteValueAsync((decimal)value,cancellationToken);case PrimitiveTypeCode.DecimalNullable:return writer.WriteValueAsync(value==null?(decimal?)null:(decimal)value,cancellationToken);case PrimitiveTypeCode.Guid:return writer.WriteValueAsync((Guid)value,cancellationToken);case PrimitiveTypeCode.GuidNullable:return writer.WriteValueAsync(value==null?(Guid?)null:(Guid)value,cancellationToken);case PrimitiveTypeCode.TimeSpan:return writer.WriteValueAsync((TimeSpan)value,cancellationToken);case PrimitiveTypeCode.TimeSpanNullable:return writer.WriteValueAsync(value==null?(TimeSpan?)null:(TimeSpan)value,cancellationToken);
#if HAVE_BIG_INTEGER
case PrimitiveTypeCode.BigInteger:return writer.WriteValueAsync((BigInteger)value,cancellationToken);case PrimitiveTypeCode.BigIntegerNullable:return writer.WriteValueAsync(value==null?(BigInteger?)null:(BigInteger)value,cancellationToken);
#endif
case PrimitiveTypeCode.Uri:return writer.WriteValueAsync((Uri)value,cancellationToken);case PrimitiveTypeCode.String:return writer.WriteValueAsync((string)value,cancellationToken);case PrimitiveTypeCode.Bytes:return writer.WriteValueAsync((byte[])value,cancellationToken);
#if HAVE_DB_NULL_TYPE_CODE
case PrimitiveTypeCode.DBNull:return writer.WriteNullAsync(cancellationToken);
#endif
default:
#if HAVE_ICONVERTIBLE
if(value is IConvertible convertible){ResolveConvertibleValue(convertible,out typeCode,out value);continue;}
#endif
if(value==null){return writer.WriteNullAsync(cancellationToken);}throw CreateUnsupportedTypeException(writer,value);}}}}}
#endif
namespace Newtonsoft.Json{public abstract partial class JsonWriter:IDisposable{internal enum State{Start=0,Property=1,ObjectStart=2,Object=3,ArrayStart=4,Array=5,ConstructorStart=6,Constructor=7,Closed=8,Error=9}private static readonly State[][]StateArray;internal static readonly State[][]StateArrayTemplate=new[]{new[]{State.Error,State.Error,State.Error,State.Error,State.Error,State.Error,State.Error,State.Error,State.Error,State.Error},new[]{State.ObjectStart,State.ObjectStart,State.Error,State.Error,State.ObjectStart,State.ObjectStart,State.ObjectStart,State.ObjectStart,State.Error,State.Error},new[]{State.ArrayStart,State.ArrayStart,State.Error,State.Error,State.ArrayStart,State.ArrayStart,State.ArrayStart,State.ArrayStart,State.Error,State.Error},new[]{State.ConstructorStart,State.ConstructorStart,State.Error,State.Error,State.ConstructorStart,State.ConstructorStart,State.ConstructorStart,State.ConstructorStart,State.Error,State.Error},new[]{State.Property,State.Error,State.Property,State.Property,State.Error,State.Error,State.Error,State.Error,State.Error,State.Error},new[]{State.Start,State.Property,State.ObjectStart,State.Object,State.ArrayStart,State.Array,State.Constructor,State.Constructor,State.Error,State.Error},new[]{State.Start,State.Property,State.ObjectStart,State.Object,State.ArrayStart,State.Array,State.Constructor,State.Constructor,State.Error,State.Error},new[]{State.Start,State.Object,State.Error,State.Error,State.Array,State.Array,State.Constructor,State.Constructor,State.Error,State.Error}};internal static State[][]BuildStateArray(){List<State[]>allStates=StateArrayTemplate.ToList();State[]errorStates=StateArrayTemplate[0];State[]valueStates=StateArrayTemplate[7];EnumInfo enumValuesAndNames=EnumUtils.GetEnumValuesAndNames(typeof(JsonToken));foreach(ulong valueToken in enumValuesAndNames.Values){if(allStates.Count<=(int)valueToken){JsonToken token=(JsonToken)valueToken;switch(token){case JsonToken.Integer:case JsonToken.Float:case JsonToken.String:case JsonToken.Boolean:case JsonToken.Null:case JsonToken.Undefined:case JsonToken.Date:case JsonToken.Bytes:allStates.Add(valueStates);break;default:allStates.Add(errorStates);break;}}}return allStates.ToArray();}static JsonWriter(){StateArray=BuildStateArray();}private List<JsonPosition>?_stack;private JsonPosition _currentPosition;private State _currentState;private Formatting _formatting;public bool CloseOutput{get;set;}public bool AutoCompleteOnClose{get;set;}protected internal int Top{get{int depth=_stack?.Count??0;if(Peek()!=JsonContainerType.None){depth++;}return depth;}}public WriteState WriteState{get{switch(_currentState){case State.Error:return WriteState.Error;case State.Closed:return WriteState.Closed;case State.Object:case State.ObjectStart:return WriteState.Object;case State.Array:case State.ArrayStart:return WriteState.Array;case State.Constructor:case State.ConstructorStart:return WriteState.Constructor;case State.Property:return WriteState.Property;case State.Start:return WriteState.Start;default:throw JsonWriterException.Create(this,"Invalid state: "+_currentState,null);}}}internal string ContainerPath{get{if(_currentPosition.Type==JsonContainerType.None||_stack==null){return string.Empty;}return JsonPosition.BuildPath(_stack,null);}}public string Path{get{if(_currentPosition.Type==JsonContainerType.None){return string.Empty;}bool insideContainer=(_currentState!=State.ArrayStart&&_currentState!=State.ConstructorStart&&_currentState!=State.ObjectStart);JsonPosition?current=insideContainer?(JsonPosition?)_currentPosition:null;return JsonPosition.BuildPath(_stack!,current);}}private DateFormatHandling _dateFormatHandling;private DateTimeZoneHandling _dateTimeZoneHandling;private StringEscapeHandling _stringEscapeHandling;private FloatFormatHandling _floatFormatHandling;private string?_dateFormatString;private CultureInfo?_culture;public Formatting Formatting{get=>_formatting;set{if(value<Formatting.None||value>Formatting.Indented){throw new ArgumentOutOfRangeException(nameof(value));}_formatting=value;}}public DateFormatHandling DateFormatHandling{get=>_dateFormatHandling;set{if(value<DateFormatHandling.IsoDateFormat||value>DateFormatHandling.MicrosoftDateFormat){throw new ArgumentOutOfRangeException(nameof(value));}_dateFormatHandling=value;}}public DateTimeZoneHandling DateTimeZoneHandling{get=>_dateTimeZoneHandling;set{if(value<DateTimeZoneHandling.Local||value>DateTimeZoneHandling.RoundtripKind){throw new ArgumentOutOfRangeException(nameof(value));}_dateTimeZoneHandling=value;}}public StringEscapeHandling StringEscapeHandling{get=>_stringEscapeHandling;set{if(value<StringEscapeHandling.Default||value>StringEscapeHandling.EscapeHtml){throw new ArgumentOutOfRangeException(nameof(value));}_stringEscapeHandling=value;OnStringEscapeHandlingChanged();}}internal virtual void OnStringEscapeHandlingChanged(){}public FloatFormatHandling FloatFormatHandling{get=>_floatFormatHandling;set{if(value<FloatFormatHandling.String||value>FloatFormatHandling.DefaultValue){throw new ArgumentOutOfRangeException(nameof(value));}_floatFormatHandling=value;}}public string?DateFormatString{get=>_dateFormatString;set=>_dateFormatString=value;}public CultureInfo Culture{get=>_culture??CultureInfo.InvariantCulture;set=>_culture=value;}protected JsonWriter(){_currentState=State.Start;_formatting=Formatting.None;_dateTimeZoneHandling=DateTimeZoneHandling.RoundtripKind;CloseOutput=true;AutoCompleteOnClose=true;}internal void UpdateScopeWithFinishedValue(){if(_currentPosition.HasIndex){_currentPosition.Position++;}}private void Push(JsonContainerType value){if(_currentPosition.Type!=JsonContainerType.None){if(_stack==null){_stack=new List<JsonPosition>();}_stack.Add(_currentPosition);}_currentPosition=new JsonPosition(value);}private JsonContainerType Pop(){JsonPosition oldPosition=_currentPosition;if(_stack!=null&&_stack.Count>0){_currentPosition=_stack[_stack.Count-1];_stack.RemoveAt(_stack.Count-1);}else{_currentPosition=new JsonPosition();}return oldPosition.Type;}private JsonContainerType Peek(){return _currentPosition.Type;}public abstract void Flush();public virtual void Close(){if(AutoCompleteOnClose){AutoCompleteAll();}}public virtual void WriteStartObject(){InternalWriteStart(JsonToken.StartObject,JsonContainerType.Object);}public virtual void WriteEndObject(){InternalWriteEnd(JsonContainerType.Object);}public virtual void WriteStartArray(){InternalWriteStart(JsonToken.StartArray,JsonContainerType.Array);}public virtual void WriteEndArray(){InternalWriteEnd(JsonContainerType.Array);}public virtual void WriteStartConstructor(string name){InternalWriteStart(JsonToken.StartConstructor,JsonContainerType.Constructor);}public virtual void WriteEndConstructor(){InternalWriteEnd(JsonContainerType.Constructor);}public virtual void WritePropertyName(string name){InternalWritePropertyName(name);}public virtual void WritePropertyName(string name,bool escape){WritePropertyName(name);}public virtual void WriteEnd(){WriteEnd(Peek());}public void WriteToken(JsonReader reader){WriteToken(reader,true);}public void WriteToken(JsonReader reader,bool writeChildren){ValidationUtils.ArgumentNotNull(reader,nameof(reader));WriteToken(reader,writeChildren,true,true);}public void WriteToken(JsonToken token,object?value){switch(token){case JsonToken.None:break;case JsonToken.StartObject:WriteStartObject();break;case JsonToken.StartArray:WriteStartArray();break;case JsonToken.StartConstructor:ValidationUtils.ArgumentNotNull(value,nameof(value));WriteStartConstructor(value.ToString());break;case JsonToken.PropertyName:ValidationUtils.ArgumentNotNull(value,nameof(value));WritePropertyName(value.ToString());break;case JsonToken.Comment:WriteComment(value?.ToString());break;case JsonToken.Integer:ValidationUtils.ArgumentNotNull(value,nameof(value));
#if HAVE_BIG_INTEGER
if(value is BigInteger integer){WriteValue(integer);}else
#endif
{WriteValue(Convert.ToInt64(value,CultureInfo.InvariantCulture));}break;case JsonToken.Float:ValidationUtils.ArgumentNotNull(value,nameof(value));if(value is decimal decimalValue){WriteValue(decimalValue);}else if(value is double doubleValue){WriteValue(doubleValue);}else if(value is float floatValue){WriteValue(floatValue);}else{WriteValue(Convert.ToDouble(value,CultureInfo.InvariantCulture));}break;case JsonToken.String:WriteValue(value?.ToString());break;case JsonToken.Boolean:ValidationUtils.ArgumentNotNull(value,nameof(value));WriteValue(Convert.ToBoolean(value,CultureInfo.InvariantCulture));break;case JsonToken.Null:WriteNull();break;case JsonToken.Undefined:WriteUndefined();break;case JsonToken.EndObject:WriteEndObject();break;case JsonToken.EndArray:WriteEndArray();break;case JsonToken.EndConstructor:WriteEndConstructor();break;case JsonToken.Date:ValidationUtils.ArgumentNotNull(value,nameof(value));
#if HAVE_DATE_TIME_OFFSET
if(value is DateTimeOffset dt){WriteValue(dt);}else
#endif
{WriteValue(Convert.ToDateTime(value,CultureInfo.InvariantCulture));}break;case JsonToken.Raw:WriteRawValue(value?.ToString());break;case JsonToken.Bytes:ValidationUtils.ArgumentNotNull(value,nameof(value));if(value is Guid guid){WriteValue(guid);}else{WriteValue((byte[])value!);}break;default:throw MiscellaneousUtils.CreateArgumentOutOfRangeException(nameof(token),token,"Unexpected token type.");}}public void WriteToken(JsonToken token){WriteToken(token,null);}internal virtual void WriteToken(JsonReader reader,bool writeChildren,bool writeDateConstructorAsDate,bool writeComments){int initialDepth=CalculateWriteTokenInitialDepth(reader);do{if(writeDateConstructorAsDate&&reader.TokenType==JsonToken.StartConstructor&&string.Equals(reader.Value?.ToString(),"Date",StringComparison.Ordinal)){WriteConstructorDate(reader);}else{if(writeComments||reader.TokenType!=JsonToken.Comment){WriteToken(reader.TokenType,reader.Value);}}}while(initialDepth-1<reader.Depth-(JsonTokenUtils.IsEndToken(reader.TokenType)?1:0)&&writeChildren&&reader.Read());if(IsWriteTokenIncomplete(reader,writeChildren,initialDepth)){throw JsonWriterException.Create(this,"Unexpected end when reading token.",null);}}private bool IsWriteTokenIncomplete(JsonReader reader,bool writeChildren,int initialDepth){int finalDepth=CalculateWriteTokenFinalDepth(reader);return initialDepth<finalDepth||(writeChildren&&initialDepth==finalDepth&&JsonTokenUtils.IsStartToken(reader.TokenType));}private int CalculateWriteTokenInitialDepth(JsonReader reader){JsonToken type=reader.TokenType;if(type==JsonToken.None){return-1;}return JsonTokenUtils.IsStartToken(type)?reader.Depth:reader.Depth+1;}private int CalculateWriteTokenFinalDepth(JsonReader reader){JsonToken type=reader.TokenType;if(type==JsonToken.None){return-1;}return JsonTokenUtils.IsEndToken(type)?reader.Depth-1:reader.Depth;}private void WriteConstructorDate(JsonReader reader){if(!JavaScriptUtils.TryGetDateFromConstructorJson(reader,out DateTime dateTime,out string?errorMessage)){throw JsonWriterException.Create(this,errorMessage,null);}WriteValue(dateTime);}private void WriteEnd(JsonContainerType type){switch(type){case JsonContainerType.Object:WriteEndObject();break;case JsonContainerType.Array:WriteEndArray();break;case JsonContainerType.Constructor:WriteEndConstructor();break;default:throw JsonWriterException.Create(this,"Unexpected type when writing end: "+type,null);}}private void AutoCompleteAll(){while(Top>0){WriteEnd();}}private JsonToken GetCloseTokenForType(JsonContainerType type){switch(type){case JsonContainerType.Object:return JsonToken.EndObject;case JsonContainerType.Array:return JsonToken.EndArray;case JsonContainerType.Constructor:return JsonToken.EndConstructor;default:throw JsonWriterException.Create(this,"No close token for type: "+type,null);}}private void AutoCompleteClose(JsonContainerType type){int levelsToComplete=CalculateLevelsToComplete(type);for(int i=0;i<levelsToComplete;i++){JsonToken token=GetCloseTokenForType(Pop());if(_currentState==State.Property){WriteNull();}if(_formatting==Formatting.Indented){if(_currentState!=State.ObjectStart&&_currentState!=State.ArrayStart){WriteIndent();}}WriteEnd(token);UpdateCurrentState();}}private int CalculateLevelsToComplete(JsonContainerType type){int levelsToComplete=0;if(_currentPosition.Type==type){levelsToComplete=1;}else{int top=Top-2;for(int i=top;i>=0;i--){int currentLevel=top-i;if(_stack![currentLevel].Type==type){levelsToComplete=i+2;break;}}}if(levelsToComplete==0){throw JsonWriterException.Create(this,"No token to close.",null);}return levelsToComplete;}private void UpdateCurrentState(){JsonContainerType currentLevelType=Peek();switch(currentLevelType){case JsonContainerType.Object:_currentState=State.Object;break;case JsonContainerType.Array:_currentState=State.Array;break;case JsonContainerType.Constructor:_currentState=State.Array;break;case JsonContainerType.None:_currentState=State.Start;break;default:throw JsonWriterException.Create(this,"Unknown JsonType: "+currentLevelType,null);}}protected virtual void WriteEnd(JsonToken token){}protected virtual void WriteIndent(){}protected virtual void WriteValueDelimiter(){}protected virtual void WriteIndentSpace(){}internal void AutoComplete(JsonToken tokenBeingWritten){State newState=StateArray[(int)tokenBeingWritten][(int)_currentState];if(newState==State.Error){throw JsonWriterException.Create(this,"Token {0} in state {1} would result in an invalid JSON object.".FormatWith(CultureInfo.InvariantCulture,tokenBeingWritten.ToString(),_currentState.ToString()),null);}if((_currentState==State.Object||_currentState==State.Array||_currentState==State.Constructor)&&tokenBeingWritten!=JsonToken.Comment){WriteValueDelimiter();}if(_formatting==Formatting.Indented){if(_currentState==State.Property){WriteIndentSpace();}if((_currentState==State.Array||_currentState==State.ArrayStart||_currentState==State.Constructor||_currentState==State.ConstructorStart)||(tokenBeingWritten==JsonToken.PropertyName&&_currentState!=State.Start)){WriteIndent();}}_currentState=newState;}public virtual void WriteNull(){InternalWriteValue(JsonToken.Null);}public virtual void WriteUndefined(){InternalWriteValue(JsonToken.Undefined);}public virtual void WriteRaw(string?json){InternalWriteRaw();}public virtual void WriteRawValue(string?json){UpdateScopeWithFinishedValue();AutoComplete(JsonToken.Undefined);WriteRaw(json);}public virtual void WriteValue(string?value){InternalWriteValue(JsonToken.String);}public virtual void WriteValue(int value){InternalWriteValue(JsonToken.Integer);}[CLSCompliant(false)]public virtual void WriteValue(uint value){InternalWriteValue(JsonToken.Integer);}public virtual void WriteValue(long value){InternalWriteValue(JsonToken.Integer);}[CLSCompliant(false)]public virtual void WriteValue(ulong value){InternalWriteValue(JsonToken.Integer);}public virtual void WriteValue(float value){InternalWriteValue(JsonToken.Float);}public virtual void WriteValue(double value){InternalWriteValue(JsonToken.Float);}public virtual void WriteValue(bool value){InternalWriteValue(JsonToken.Boolean);}public virtual void WriteValue(short value){InternalWriteValue(JsonToken.Integer);}[CLSCompliant(false)]public virtual void WriteValue(ushort value){InternalWriteValue(JsonToken.Integer);}public virtual void WriteValue(char value){InternalWriteValue(JsonToken.String);}public virtual void WriteValue(byte value){InternalWriteValue(JsonToken.Integer);}[CLSCompliant(false)]public virtual void WriteValue(sbyte value){InternalWriteValue(JsonToken.Integer);}public virtual void WriteValue(decimal value){InternalWriteValue(JsonToken.Float);}public virtual void WriteValue(DateTime value){InternalWriteValue(JsonToken.Date);}
#if HAVE_DATE_TIME_OFFSET
public virtual void WriteValue(DateTimeOffset value){InternalWriteValue(JsonToken.Date);}
#endif
public virtual void WriteValue(Guid value){InternalWriteValue(JsonToken.String);}public virtual void WriteValue(TimeSpan value){InternalWriteValue(JsonToken.String);}public virtual void WriteValue(int?value){if(value==null){WriteNull();}else{WriteValue(value.GetValueOrDefault());}}[CLSCompliant(false)]public virtual void WriteValue(uint?value){if(value==null){WriteNull();}else{WriteValue(value.GetValueOrDefault());}}public virtual void WriteValue(long?value){if(value==null){WriteNull();}else{WriteValue(value.GetValueOrDefault());}}[CLSCompliant(false)]public virtual void WriteValue(ulong?value){if(value==null){WriteNull();}else{WriteValue(value.GetValueOrDefault());}}public virtual void WriteValue(float?value){if(value==null){WriteNull();}else{WriteValue(value.GetValueOrDefault());}}public virtual void WriteValue(double?value){if(value==null){WriteNull();}else{WriteValue(value.GetValueOrDefault());}}public virtual void WriteValue(bool?value){if(value==null){WriteNull();}else{WriteValue(value.GetValueOrDefault());}}public virtual void WriteValue(short?value){if(value==null){WriteNull();}else{WriteValue(value.GetValueOrDefault());}}[CLSCompliant(false)]public virtual void WriteValue(ushort?value){if(value==null){WriteNull();}else{WriteValue(value.GetValueOrDefault());}}public virtual void WriteValue(char?value){if(value==null){WriteNull();}else{WriteValue(value.GetValueOrDefault());}}public virtual void WriteValue(byte?value){if(value==null){WriteNull();}else{WriteValue(value.GetValueOrDefault());}}[CLSCompliant(false)]public virtual void WriteValue(sbyte?value){if(value==null){WriteNull();}else{WriteValue(value.GetValueOrDefault());}}public virtual void WriteValue(decimal?value){if(value==null){WriteNull();}else{WriteValue(value.GetValueOrDefault());}}public virtual void WriteValue(DateTime?value){if(value==null){WriteNull();}else{WriteValue(value.GetValueOrDefault());}}
#if HAVE_DATE_TIME_OFFSET
public virtual void WriteValue(DateTimeOffset?value){if(value==null){WriteNull();}else{WriteValue(value.GetValueOrDefault());}}
#endif
public virtual void WriteValue(Guid?value){if(value==null){WriteNull();}else{WriteValue(value.GetValueOrDefault());}}public virtual void WriteValue(TimeSpan?value){if(value==null){WriteNull();}else{WriteValue(value.GetValueOrDefault());}}public virtual void WriteValue(byte[]?value){if(value==null){WriteNull();}else{InternalWriteValue(JsonToken.Bytes);}}public virtual void WriteValue(Uri?value){if(value==null){WriteNull();}else{InternalWriteValue(JsonToken.String);}}public virtual void WriteValue(object?value){if(value==null){WriteNull();}else{
#if HAVE_BIG_INTEGER
if(value is BigInteger){throw CreateUnsupportedTypeException(this,value);}
#endif
WriteValue(this,ConvertUtils.GetTypeCode(value.GetType()),value);}}public virtual void WriteComment(string?text){InternalWriteComment();}public virtual void WriteWhitespace(string ws){InternalWriteWhitespace(ws);}void IDisposable.Dispose(){Dispose(true);GC.SuppressFinalize(this);}protected virtual void Dispose(bool disposing){if(_currentState!=State.Closed&&disposing){Close();}}internal static void WriteValue(JsonWriter writer,PrimitiveTypeCode typeCode,object value){while(true){switch(typeCode){case PrimitiveTypeCode.Char:writer.WriteValue((char)value);return;case PrimitiveTypeCode.CharNullable:writer.WriteValue((value==null)?(char?)null:(char)value);return;case PrimitiveTypeCode.Boolean:writer.WriteValue((bool)value);return;case PrimitiveTypeCode.BooleanNullable:writer.WriteValue((value==null)?(bool?)null:(bool)value);return;case PrimitiveTypeCode.SByte:writer.WriteValue((sbyte)value);return;case PrimitiveTypeCode.SByteNullable:writer.WriteValue((value==null)?(sbyte?)null:(sbyte)value);return;case PrimitiveTypeCode.Int16:writer.WriteValue((short)value);return;case PrimitiveTypeCode.Int16Nullable:writer.WriteValue((value==null)?(short?)null:(short)value);return;case PrimitiveTypeCode.UInt16:writer.WriteValue((ushort)value);return;case PrimitiveTypeCode.UInt16Nullable:writer.WriteValue((value==null)?(ushort?)null:(ushort)value);return;case PrimitiveTypeCode.Int32:writer.WriteValue((int)value);return;case PrimitiveTypeCode.Int32Nullable:writer.WriteValue((value==null)?(int?)null:(int)value);return;case PrimitiveTypeCode.Byte:writer.WriteValue((byte)value);return;case PrimitiveTypeCode.ByteNullable:writer.WriteValue((value==null)?(byte?)null:(byte)value);return;case PrimitiveTypeCode.UInt32:writer.WriteValue((uint)value);return;case PrimitiveTypeCode.UInt32Nullable:writer.WriteValue((value==null)?(uint?)null:(uint)value);return;case PrimitiveTypeCode.Int64:writer.WriteValue((long)value);return;case PrimitiveTypeCode.Int64Nullable:writer.WriteValue((value==null)?(long?)null:(long)value);return;case PrimitiveTypeCode.UInt64:writer.WriteValue((ulong)value);return;case PrimitiveTypeCode.UInt64Nullable:writer.WriteValue((value==null)?(ulong?)null:(ulong)value);return;case PrimitiveTypeCode.Single:writer.WriteValue((float)value);return;case PrimitiveTypeCode.SingleNullable:writer.WriteValue((value==null)?(float?)null:(float)value);return;case PrimitiveTypeCode.Double:writer.WriteValue((double)value);return;case PrimitiveTypeCode.DoubleNullable:writer.WriteValue((value==null)?(double?)null:(double)value);return;case PrimitiveTypeCode.DateTime:writer.WriteValue((DateTime)value);return;case PrimitiveTypeCode.DateTimeNullable:writer.WriteValue((value==null)?(DateTime?)null:(DateTime)value);return;
#if HAVE_DATE_TIME_OFFSET
case PrimitiveTypeCode.DateTimeOffset:writer.WriteValue((DateTimeOffset)value);return;case PrimitiveTypeCode.DateTimeOffsetNullable:writer.WriteValue((value==null)?(DateTimeOffset?)null:(DateTimeOffset)value);return;
#endif
case PrimitiveTypeCode.Decimal:writer.WriteValue((decimal)value);return;case PrimitiveTypeCode.DecimalNullable:writer.WriteValue((value==null)?(decimal?)null:(decimal)value);return;case PrimitiveTypeCode.Guid:writer.WriteValue((Guid)value);return;case PrimitiveTypeCode.GuidNullable:writer.WriteValue((value==null)?(Guid?)null:(Guid)value);return;case PrimitiveTypeCode.TimeSpan:writer.WriteValue((TimeSpan)value);return;case PrimitiveTypeCode.TimeSpanNullable:writer.WriteValue((value==null)?(TimeSpan?)null:(TimeSpan)value);return;
#if HAVE_BIG_INTEGER
case PrimitiveTypeCode.BigInteger:writer.WriteValue((BigInteger)value);return;case PrimitiveTypeCode.BigIntegerNullable:writer.WriteValue((value==null)?(BigInteger?)null:(BigInteger)value);return;
#endif
case PrimitiveTypeCode.Uri:writer.WriteValue((Uri)value);return;case PrimitiveTypeCode.String:writer.WriteValue((string)value);return;case PrimitiveTypeCode.Bytes:writer.WriteValue((byte[])value);return;
#if HAVE_DB_NULL_TYPE_CODE
case PrimitiveTypeCode.DBNull:writer.WriteNull();return;
#endif
default:
#if HAVE_ICONVERTIBLE
if(value is IConvertible convertible){ResolveConvertibleValue(convertible,out typeCode,out value);continue;}
#endif
if(value==null){writer.WriteNull();return;}throw CreateUnsupportedTypeException(writer,value);}}}
#if HAVE_ICONVERTIBLE
private static void ResolveConvertibleValue(IConvertible convertible,out PrimitiveTypeCode typeCode,out object value){TypeInformation typeInformation=ConvertUtils.GetTypeInformation(convertible);typeCode=typeInformation.TypeCode==PrimitiveTypeCode.Object?PrimitiveTypeCode.String:typeInformation.TypeCode;Type resolvedType=typeInformation.TypeCode==PrimitiveTypeCode.Object?typeof(string):typeInformation.Type;value=convertible.ToType(resolvedType,CultureInfo.InvariantCulture);}
#endif
private static JsonWriterException CreateUnsupportedTypeException(JsonWriter writer,object value){return JsonWriterException.Create(writer,"Unsupported type: {0}. Use the JsonSerializer class to get the object's JSON representation.".FormatWith(CultureInfo.InvariantCulture,value.GetType()),null);}protected void SetWriteState(JsonToken token,object value){switch(token){case JsonToken.StartObject:InternalWriteStart(token,JsonContainerType.Object);break;case JsonToken.StartArray:InternalWriteStart(token,JsonContainerType.Array);break;case JsonToken.StartConstructor:InternalWriteStart(token,JsonContainerType.Constructor);break;case JsonToken.PropertyName:if(!(value is string s)){throw new ArgumentException("A name is required when setting property name state.",nameof(value));}InternalWritePropertyName(s);break;case JsonToken.Comment:InternalWriteComment();break;case JsonToken.Raw:InternalWriteRaw();break;case JsonToken.Integer:case JsonToken.Float:case JsonToken.String:case JsonToken.Boolean:case JsonToken.Date:case JsonToken.Bytes:case JsonToken.Null:case JsonToken.Undefined:InternalWriteValue(token);break;case JsonToken.EndObject:InternalWriteEnd(JsonContainerType.Object);break;case JsonToken.EndArray:InternalWriteEnd(JsonContainerType.Array);break;case JsonToken.EndConstructor:InternalWriteEnd(JsonContainerType.Constructor);break;default:throw new ArgumentOutOfRangeException(nameof(token));}}internal void InternalWriteEnd(JsonContainerType container){AutoCompleteClose(container);}internal void InternalWritePropertyName(string name){_currentPosition.PropertyName=name;AutoComplete(JsonToken.PropertyName);}internal void InternalWriteRaw(){}internal void InternalWriteStart(JsonToken token,JsonContainerType container){UpdateScopeWithFinishedValue();AutoComplete(token);Push(container);}internal void InternalWriteValue(JsonToken token){UpdateScopeWithFinishedValue();AutoComplete(token);}internal void InternalWriteWhitespace(string ws){if(ws!=null){if(!StringUtils.IsWhiteSpace(ws)){throw JsonWriterException.Create(this,"Only white space characters should be used.",null);}}}internal void InternalWriteComment(){AutoComplete(JsonToken.Comment);}}}namespace Newtonsoft.Json{
#if HAVE_BINARY_EXCEPTION_SERIALIZATION
[Serializable]
#endif
public class JsonWriterException:JsonException{public string?Path{get;}public JsonWriterException(){}public JsonWriterException(string message):base(message){}public JsonWriterException(string message,Exception innerException):base(message,innerException){}
#if HAVE_BINARY_EXCEPTION_SERIALIZATION
public JsonWriterException(SerializationInfo info,StreamingContext context):base(info,context){}
#endif
public JsonWriterException(string message,string path,Exception?innerException):base(message,innerException){Path=path;}internal static JsonWriterException Create(JsonWriter writer,string message,Exception?ex){return Create(writer.ContainerPath,message,ex);}internal static JsonWriterException Create(string path,string message,Exception?ex){message=JsonPosition.FormatMessage(null,path,message);return new JsonWriterException(message,path,ex);}}}
#if HAVE_ASYNC
namespace Newtonsoft.Json.Linq{public abstract partial class JToken{public virtual Task WriteToAsync(JsonWriter writer,CancellationToken cancellationToken,params JsonConverter[]converters){throw new NotImplementedException();}public Task WriteToAsync(JsonWriter writer,params JsonConverter[]converters){return WriteToAsync(writer,default,converters);}public static Task<JToken>ReadFromAsync(JsonReader reader,CancellationToken cancellationToken=default){return ReadFromAsync(reader,null,cancellationToken);}public static async Task<JToken>ReadFromAsync(JsonReader reader,JsonLoadSettings?settings,CancellationToken cancellationToken=default){ValidationUtils.ArgumentNotNull(reader,nameof(reader));if(reader.TokenType==JsonToken.None){if(!await(settings!=null&&settings.CommentHandling==CommentHandling.Ignore?reader.ReadAndMoveToContentAsync(cancellationToken):reader.ReadAsync(cancellationToken)).ConfigureAwait(false)){throw JsonReaderException.Create(reader,"Error reading JToken from JsonReader.");}}IJsonLineInfo?lineInfo=reader as IJsonLineInfo;switch(reader.TokenType){case JsonToken.StartObject:return await JObject.LoadAsync(reader,settings,cancellationToken).ConfigureAwait(false);case JsonToken.StartArray:return await JArray.LoadAsync(reader,settings,cancellationToken).ConfigureAwait(false);case JsonToken.StartConstructor:return await JConstructor.LoadAsync(reader,settings,cancellationToken).ConfigureAwait(false);case JsonToken.PropertyName:return await JProperty.LoadAsync(reader,settings,cancellationToken).ConfigureAwait(false);case JsonToken.String:case JsonToken.Integer:case JsonToken.Float:case JsonToken.Date:case JsonToken.Boolean:case JsonToken.Bytes:JValue v=new JValue(reader.Value);v.SetLineInfo(lineInfo,settings);return v;case JsonToken.Comment:v=JValue.CreateComment(reader.Value?.ToString());v.SetLineInfo(lineInfo,settings);return v;case JsonToken.Null:v=JValue.CreateNull();v.SetLineInfo(lineInfo,settings);return v;case JsonToken.Undefined:v=JValue.CreateUndefined();v.SetLineInfo(lineInfo,settings);return v;default:throw JsonReaderException.Create(reader,"Error reading JToken from JsonReader. Unexpected token: {0}".FormatWith(CultureInfo.InvariantCulture,reader.TokenType));}}public static Task<JToken>LoadAsync(JsonReader reader,CancellationToken cancellationToken=default){return LoadAsync(reader,null,cancellationToken);}public static Task<JToken>LoadAsync(JsonReader reader,JsonLoadSettings?settings,CancellationToken cancellationToken=default){return ReadFromAsync(reader,settings,cancellationToken);}}}
#endif
namespace Newtonsoft.Json.Linq{public abstract partial class JToken:IJEnumerable<JToken>,IJsonLineInfo
#if HAVE_ICLONEABLE
,ICloneable
#endif
#if HAVE_DYNAMIC
,IDynamicMetaObjectProvider
#endif
{private static JTokenEqualityComparer?_equalityComparer;private JContainer?_parent;private JToken?_previous;private JToken?_next;private object?_annotations;private static readonly JTokenType[]BooleanTypes=new[]{JTokenType.Integer,JTokenType.Float,JTokenType.String,JTokenType.Comment,JTokenType.Raw,JTokenType.Boolean};private static readonly JTokenType[]NumberTypes=new[]{JTokenType.Integer,JTokenType.Float,JTokenType.String,JTokenType.Comment,JTokenType.Raw,JTokenType.Boolean};
#if HAVE_BIG_INTEGER
private static readonly JTokenType[]BigIntegerTypes=new[]{JTokenType.Integer,JTokenType.Float,JTokenType.String,JTokenType.Comment,JTokenType.Raw,JTokenType.Boolean,JTokenType.Bytes};
#endif
private static readonly JTokenType[]StringTypes=new[]{JTokenType.Date,JTokenType.Integer,JTokenType.Float,JTokenType.String,JTokenType.Comment,JTokenType.Raw,JTokenType.Boolean,JTokenType.Bytes,JTokenType.Guid,JTokenType.TimeSpan,JTokenType.Uri};private static readonly JTokenType[]GuidTypes=new[]{JTokenType.String,JTokenType.Comment,JTokenType.Raw,JTokenType.Guid,JTokenType.Bytes};private static readonly JTokenType[]TimeSpanTypes=new[]{JTokenType.String,JTokenType.Comment,JTokenType.Raw,JTokenType.TimeSpan};private static readonly JTokenType[]UriTypes=new[]{JTokenType.String,JTokenType.Comment,JTokenType.Raw,JTokenType.Uri};private static readonly JTokenType[]CharTypes=new[]{JTokenType.Integer,JTokenType.Float,JTokenType.String,JTokenType.Comment,JTokenType.Raw};private static readonly JTokenType[]DateTimeTypes=new[]{JTokenType.Date,JTokenType.String,JTokenType.Comment,JTokenType.Raw};private static readonly JTokenType[]BytesTypes=new[]{JTokenType.Bytes,JTokenType.String,JTokenType.Comment,JTokenType.Raw,JTokenType.Integer};public static JTokenEqualityComparer EqualityComparer{get{if(_equalityComparer==null){_equalityComparer=new JTokenEqualityComparer();}return _equalityComparer;}}public JContainer?Parent{[DebuggerStepThrough]get{return _parent;}internal set{_parent=value;}}public JToken Root{get{JContainer?parent=Parent;if(parent==null){return this;}while(parent.Parent!=null){parent=parent.Parent;}return parent;}}internal abstract JToken CloneToken();internal abstract bool DeepEquals(JToken node);public abstract JTokenType Type{get;}public abstract bool HasValues{get;}public static bool DeepEquals(JToken?t1,JToken?t2){return(t1==t2||(t1!=null&&t2!=null&&t1.DeepEquals(t2)));}public JToken?Next{get=>_next;internal set=>_next=value;}public JToken?Previous{get=>_previous;internal set=>_previous=value;}public string Path{get{if(Parent==null){return string.Empty;}List<JsonPosition>positions=new List<JsonPosition>();JToken?previous=null;for(JToken?current=this;current!=null;current=current.Parent){switch(current.Type){case JTokenType.Property:JProperty property=(JProperty)current;positions.Add(new JsonPosition(JsonContainerType.Object){PropertyName=property.Name});break;case JTokenType.Array:case JTokenType.Constructor:if(previous!=null){int index=((IList<JToken>)current).IndexOf(previous);positions.Add(new JsonPosition(JsonContainerType.Array){Position=index});}break;}previous=current;}
#if HAVE_FAST_REVERSE
positions.FastReverse();
#else
positions.Reverse();
#endif
return JsonPosition.BuildPath(positions,null);}}internal JToken(){}public void AddAfterSelf(object?content){if(_parent==null){throw new InvalidOperationException("The parent is missing.");}int index=_parent.IndexOfItem(this);_parent.TryAddInternal(index+1,content,false);}public void AddBeforeSelf(object?content){if(_parent==null){throw new InvalidOperationException("The parent is missing.");}int index=_parent.IndexOfItem(this);_parent.TryAddInternal(index,content,false);}public IEnumerable<JToken>Ancestors(){return GetAncestors(false);}public IEnumerable<JToken>AncestorsAndSelf(){return GetAncestors(true);}internal IEnumerable<JToken>GetAncestors(bool self){for(JToken?current=self?this:Parent;current!=null;current=current.Parent){yield return current;}}public IEnumerable<JToken>AfterSelf(){if(Parent==null){yield break;}for(JToken?o=Next;o!=null;o=o.Next){yield return o;}}public IEnumerable<JToken>BeforeSelf(){if(Parent==null){yield break;}for(JToken?o=Parent.First;o!=this&&o!=null;o=o.Next){yield return o;}}public virtual JToken?this[object key]{get=>throw new InvalidOperationException("Cannot access child value on {0}.".FormatWith(CultureInfo.InvariantCulture,GetType()));set=>throw new InvalidOperationException("Cannot set child value on {0}.".FormatWith(CultureInfo.InvariantCulture,GetType()));}public virtual T?Value<T>(object key){JToken?token=this[key];return token==null?default:Extensions.Convert<JToken,T>(token);}public virtual JToken?First=>throw new InvalidOperationException("Cannot access child value on {0}.".FormatWith(CultureInfo.InvariantCulture,GetType()));public virtual JToken?Last=>throw new InvalidOperationException("Cannot access child value on {0}.".FormatWith(CultureInfo.InvariantCulture,GetType()));public virtual JEnumerable<JToken>Children(){return JEnumerable<JToken>.Empty;}public JEnumerable<T>Children<T>()where T:JToken{return new JEnumerable<T>(Children().OfType<T>());}public virtual IEnumerable<T?>Values<T>(){throw new InvalidOperationException("Cannot access child value on {0}.".FormatWith(CultureInfo.InvariantCulture,GetType()));}public void Remove(){if(_parent==null){throw new InvalidOperationException("The parent is missing.");}_parent.RemoveItem(this);}public void Replace(JToken value){if(_parent==null){throw new InvalidOperationException("The parent is missing.");}_parent.ReplaceItem(this,value);}public abstract void WriteTo(JsonWriter writer,params JsonConverter[]converters);public override string ToString(){return ToString(Formatting.Indented);}public string ToString(Formatting formatting,params JsonConverter[]converters){using(StringWriter sw=new StringWriter(CultureInfo.InvariantCulture)){JsonTextWriter jw=new JsonTextWriter(sw);jw.Formatting=formatting;WriteTo(jw,converters);return sw.ToString();}}private static JValue?EnsureValue(JToken value){if(value==null){throw new ArgumentNullException(nameof(value));}if(value is JProperty property){value=property.Value;}JValue?v=value as JValue;return v;}private static string GetType(JToken token){ValidationUtils.ArgumentNotNull(token,nameof(token));if(token is JProperty p){token=p.Value;}return token.Type.ToString();}private static bool ValidateToken(JToken o,JTokenType[]validTypes,bool nullable){return(Array.IndexOf(validTypes,o.Type)!=-1)||(nullable&&(o.Type==JTokenType.Null||o.Type==JTokenType.Undefined));}public static explicit operator bool(JToken value){JValue?v=EnsureValue(value);if(v==null||!ValidateToken(v,BooleanTypes,false)){throw new ArgumentException("Can not convert {0} to Boolean.".FormatWith(CultureInfo.InvariantCulture,GetType(value)));}
#if HAVE_BIG_INTEGER
if(v.Value is BigInteger integer){return Convert.ToBoolean((int)integer);}
#endif
return Convert.ToBoolean(v.Value,CultureInfo.InvariantCulture);}
#if HAVE_DATE_TIME_OFFSET
public static explicit operator DateTimeOffset(JToken value){JValue?v=EnsureValue(value);if(v==null||!ValidateToken(v,DateTimeTypes,false)){throw new ArgumentException("Can not convert {0} to DateTimeOffset.".FormatWith(CultureInfo.InvariantCulture,GetType(value)));}if(v.Value is DateTimeOffset offset){return offset;}if(v.Value is string s){return DateTimeOffset.Parse(s,CultureInfo.InvariantCulture);}return new DateTimeOffset(Convert.ToDateTime(v.Value,CultureInfo.InvariantCulture));}
#endif
public static explicit operator bool?(JToken?value){if(value==null){return null;}JValue?v=EnsureValue(value);if(v==null||!ValidateToken(v,BooleanTypes,true)){throw new ArgumentException("Can not convert {0} to Boolean.".FormatWith(CultureInfo.InvariantCulture,GetType(value)));}
#if HAVE_BIG_INTEGER
if(v.Value is BigInteger integer){return Convert.ToBoolean((int)integer);}
#endif
return(v.Value!=null)?(bool?)Convert.ToBoolean(v.Value,CultureInfo.InvariantCulture):null;}public static explicit operator long(JToken value){JValue?v=EnsureValue(value);if(v==null||!ValidateToken(v,NumberTypes,false)){throw new ArgumentException("Can not convert {0} to Int64.".FormatWith(CultureInfo.InvariantCulture,GetType(value)));}
#if HAVE_BIG_INTEGER
if(v.Value is BigInteger integer){return(long)integer;}
#endif
return Convert.ToInt64(v.Value,CultureInfo.InvariantCulture);}public static explicit operator DateTime?(JToken?value){if(value==null){return null;}JValue?v=EnsureValue(value);if(v==null||!ValidateToken(v,DateTimeTypes,true)){throw new ArgumentException("Can not convert {0} to DateTime.".FormatWith(CultureInfo.InvariantCulture,GetType(value)));}
#if HAVE_DATE_TIME_OFFSET
if(v.Value is DateTimeOffset offset){return offset.DateTime;}
#endif
return(v.Value!=null)?(DateTime?)Convert.ToDateTime(v.Value,CultureInfo.InvariantCulture):null;}
#if HAVE_DATE_TIME_OFFSET
public static explicit operator DateTimeOffset?(JToken?value){if(value==null){return null;}JValue?v=EnsureValue(value);if(v==null||!ValidateToken(v,DateTimeTypes,true)){throw new ArgumentException("Can not convert {0} to DateTimeOffset.".FormatWith(CultureInfo.InvariantCulture,GetType(value)));}if(v.Value==null){return null;}if(v.Value is DateTimeOffset offset){return offset;}if(v.Value is string s){return DateTimeOffset.Parse(s,CultureInfo.InvariantCulture);}return new DateTimeOffset(Convert.ToDateTime(v.Value,CultureInfo.InvariantCulture));}
#endif
public static explicit operator decimal?(JToken?value){if(value==null){return null;}JValue?v=EnsureValue(value);if(v==null||!ValidateToken(v,NumberTypes,true)){throw new ArgumentException("Can not convert {0} to Decimal.".FormatWith(CultureInfo.InvariantCulture,GetType(value)));}
#if HAVE_BIG_INTEGER
if(v.Value is BigInteger integer){return(decimal?)integer;}
#endif
return(v.Value!=null)?(decimal?)Convert.ToDecimal(v.Value,CultureInfo.InvariantCulture):null;}public static explicit operator double?(JToken?value){if(value==null){return null;}JValue?v=EnsureValue(value);if(v==null||!ValidateToken(v,NumberTypes,true)){throw new ArgumentException("Can not convert {0} to Double.".FormatWith(CultureInfo.InvariantCulture,GetType(value)));}
#if HAVE_BIG_INTEGER
if(v.Value is BigInteger integer){return(double?)integer;}
#endif
return(v.Value!=null)?(double?)Convert.ToDouble(v.Value,CultureInfo.InvariantCulture):null;}public static explicit operator char?(JToken?value){if(value==null){return null;}JValue?v=EnsureValue(value);if(v==null||!ValidateToken(v,CharTypes,true)){throw new ArgumentException("Can not convert {0} to Char.".FormatWith(CultureInfo.InvariantCulture,GetType(value)));}
#if HAVE_BIG_INTEGER
if(v.Value is BigInteger integer){return(char?)integer;}
#endif
return(v.Value!=null)?(char?)Convert.ToChar(v.Value,CultureInfo.InvariantCulture):null;}public static explicit operator int(JToken value){JValue?v=EnsureValue(value);if(v==null||!ValidateToken(v,NumberTypes,false)){throw new ArgumentException("Can not convert {0} to Int32.".FormatWith(CultureInfo.InvariantCulture,GetType(value)));}
#if HAVE_BIG_INTEGER
if(v.Value is BigInteger integer){return(int)integer;}
#endif
return Convert.ToInt32(v.Value,CultureInfo.InvariantCulture);}public static explicit operator short(JToken value){JValue?v=EnsureValue(value);if(v==null||!ValidateToken(v,NumberTypes,false)){throw new ArgumentException("Can not convert {0} to Int16.".FormatWith(CultureInfo.InvariantCulture,GetType(value)));}
#if HAVE_BIG_INTEGER
if(v.Value is BigInteger integer){return(short)integer;}
#endif
return Convert.ToInt16(v.Value,CultureInfo.InvariantCulture);}[CLSCompliant(false)]public static explicit operator ushort(JToken value){JValue?v=EnsureValue(value);if(v==null||!ValidateToken(v,NumberTypes,false)){throw new ArgumentException("Can not convert {0} to UInt16.".FormatWith(CultureInfo.InvariantCulture,GetType(value)));}
#if HAVE_BIG_INTEGER
if(v.Value is BigInteger integer){return(ushort)integer;}
#endif
return Convert.ToUInt16(v.Value,CultureInfo.InvariantCulture);}[CLSCompliant(false)]public static explicit operator char(JToken value){JValue?v=EnsureValue(value);if(v==null||!ValidateToken(v,CharTypes,false)){throw new ArgumentException("Can not convert {0} to Char.".FormatWith(CultureInfo.InvariantCulture,GetType(value)));}
#if HAVE_BIG_INTEGER
if(v.Value is BigInteger integer){return(char)integer;}
#endif
return Convert.ToChar(v.Value,CultureInfo.InvariantCulture);}public static explicit operator byte(JToken value){JValue?v=EnsureValue(value);if(v==null||!ValidateToken(v,NumberTypes,false)){throw new ArgumentException("Can not convert {0} to Byte.".FormatWith(CultureInfo.InvariantCulture,GetType(value)));}
#if HAVE_BIG_INTEGER
if(v.Value is BigInteger integer){return(byte)integer;}
#endif
return Convert.ToByte(v.Value,CultureInfo.InvariantCulture);}[CLSCompliant(false)]public static explicit operator sbyte(JToken value){JValue?v=EnsureValue(value);if(v==null||!ValidateToken(v,NumberTypes,false)){throw new ArgumentException("Can not convert {0} to SByte.".FormatWith(CultureInfo.InvariantCulture,GetType(value)));}
#if HAVE_BIG_INTEGER
if(v.Value is BigInteger integer){return(sbyte)integer;}
#endif
return Convert.ToSByte(v.Value,CultureInfo.InvariantCulture);}public static explicit operator int?(JToken?value){if(value==null){return null;}JValue?v=EnsureValue(value);if(v==null||!ValidateToken(v,NumberTypes,true)){throw new ArgumentException("Can not convert {0} to Int32.".FormatWith(CultureInfo.InvariantCulture,GetType(value)));}
#if HAVE_BIG_INTEGER
if(v.Value is BigInteger integer){return(int?)integer;}
#endif
return(v.Value!=null)?(int?)Convert.ToInt32(v.Value,CultureInfo.InvariantCulture):null;}public static explicit operator short?(JToken?value){if(value==null){return null;}JValue?v=EnsureValue(value);if(v==null||!ValidateToken(v,NumberTypes,true)){throw new ArgumentException("Can not convert {0} to Int16.".FormatWith(CultureInfo.InvariantCulture,GetType(value)));}
#if HAVE_BIG_INTEGER
if(v.Value is BigInteger integer){return(short?)integer;}
#endif
return(v.Value!=null)?(short?)Convert.ToInt16(v.Value,CultureInfo.InvariantCulture):null;}[CLSCompliant(false)]public static explicit operator ushort?(JToken?value){if(value==null){return null;}JValue?v=EnsureValue(value);if(v==null||!ValidateToken(v,NumberTypes,true)){throw new ArgumentException("Can not convert {0} to UInt16.".FormatWith(CultureInfo.InvariantCulture,GetType(value)));}
#if HAVE_BIG_INTEGER
if(v.Value is BigInteger integer){return(ushort?)integer;}
#endif
return(v.Value!=null)?(ushort?)Convert.ToUInt16(v.Value,CultureInfo.InvariantCulture):null;}public static explicit operator byte?(JToken?value){if(value==null){return null;}JValue?v=EnsureValue(value);if(v==null||!ValidateToken(v,NumberTypes,true)){throw new ArgumentException("Can not convert {0} to Byte.".FormatWith(CultureInfo.InvariantCulture,GetType(value)));}
#if HAVE_BIG_INTEGER
if(v.Value is BigInteger integer){return(byte?)integer;}
#endif
return(v.Value!=null)?(byte?)Convert.ToByte(v.Value,CultureInfo.InvariantCulture):null;}[CLSCompliant(false)]public static explicit operator sbyte?(JToken?value){if(value==null){return null;}JValue?v=EnsureValue(value);if(v==null||!ValidateToken(v,NumberTypes,true)){throw new ArgumentException("Can not convert {0} to SByte.".FormatWith(CultureInfo.InvariantCulture,GetType(value)));}
#if HAVE_BIG_INTEGER
if(v.Value is BigInteger integer){return(sbyte?)integer;}
#endif
return(v.Value!=null)?(sbyte?)Convert.ToSByte(v.Value,CultureInfo.InvariantCulture):null;}public static explicit operator DateTime(JToken value){JValue?v=EnsureValue(value);if(v==null||!ValidateToken(v,DateTimeTypes,false)){throw new ArgumentException("Can not convert {0} to DateTime.".FormatWith(CultureInfo.InvariantCulture,GetType(value)));}
#if HAVE_DATE_TIME_OFFSET
if(v.Value is DateTimeOffset offset){return offset.DateTime;}
#endif
return Convert.ToDateTime(v.Value,CultureInfo.InvariantCulture);}public static explicit operator long?(JToken?value){if(value==null){return null;}JValue?v=EnsureValue(value);if(v==null||!ValidateToken(v,NumberTypes,true)){throw new ArgumentException("Can not convert {0} to Int64.".FormatWith(CultureInfo.InvariantCulture,GetType(value)));}
#if HAVE_BIG_INTEGER
if(v.Value is BigInteger integer){return(long?)integer;}
#endif
return(v.Value!=null)?(long?)Convert.ToInt64(v.Value,CultureInfo.InvariantCulture):null;}public static explicit operator float?(JToken?value){if(value==null){return null;}JValue?v=EnsureValue(value);if(v==null||!ValidateToken(v,NumberTypes,true)){throw new ArgumentException("Can not convert {0} to Single.".FormatWith(CultureInfo.InvariantCulture,GetType(value)));}
#if HAVE_BIG_INTEGER
if(v.Value is BigInteger integer){return(float?)integer;}
#endif
return(v.Value!=null)?(float?)Convert.ToSingle(v.Value,CultureInfo.InvariantCulture):null;}public static explicit operator decimal(JToken value){JValue?v=EnsureValue(value);if(v==null||!ValidateToken(v,NumberTypes,false)){throw new ArgumentException("Can not convert {0} to Decimal.".FormatWith(CultureInfo.InvariantCulture,GetType(value)));}
#if HAVE_BIG_INTEGER
if(v.Value is BigInteger integer){return(decimal)integer;}
#endif
return Convert.ToDecimal(v.Value,CultureInfo.InvariantCulture);}[CLSCompliant(false)]public static explicit operator uint?(JToken?value){if(value==null){return null;}JValue?v=EnsureValue(value);if(v==null||!ValidateToken(v,NumberTypes,true)){throw new ArgumentException("Can not convert {0} to UInt32.".FormatWith(CultureInfo.InvariantCulture,GetType(value)));}
#if HAVE_BIG_INTEGER
if(v.Value is BigInteger integer){return(uint?)integer;}
#endif
return(v.Value!=null)?(uint?)Convert.ToUInt32(v.Value,CultureInfo.InvariantCulture):null;}[CLSCompliant(false)]public static explicit operator ulong?(JToken?value){if(value==null){return null;}JValue?v=EnsureValue(value);if(v==null||!ValidateToken(v,NumberTypes,true)){throw new ArgumentException("Can not convert {0} to UInt64.".FormatWith(CultureInfo.InvariantCulture,GetType(value)));}
#if HAVE_BIG_INTEGER
if(v.Value is BigInteger integer){return(ulong?)integer;}
#endif
return(v.Value!=null)?(ulong?)Convert.ToUInt64(v.Value,CultureInfo.InvariantCulture):null;}public static explicit operator double(JToken value){JValue?v=EnsureValue(value);if(v==null||!ValidateToken(v,NumberTypes,false)){throw new ArgumentException("Can not convert {0} to Double.".FormatWith(CultureInfo.InvariantCulture,GetType(value)));}
#if HAVE_BIG_INTEGER
if(v.Value is BigInteger integer){return(double)integer;}
#endif
return Convert.ToDouble(v.Value,CultureInfo.InvariantCulture);}public static explicit operator float(JToken value){JValue?v=EnsureValue(value);if(v==null||!ValidateToken(v,NumberTypes,false)){throw new ArgumentException("Can not convert {0} to Single.".FormatWith(CultureInfo.InvariantCulture,GetType(value)));}
#if HAVE_BIG_INTEGER
if(v.Value is BigInteger integer){return(float)integer;}
#endif
return Convert.ToSingle(v.Value,CultureInfo.InvariantCulture);}public static explicit operator string?(JToken?value){if(value==null){return null;}JValue?v=EnsureValue(value);if(v==null||!ValidateToken(v,StringTypes,true)){throw new ArgumentException("Can not convert {0} to String.".FormatWith(CultureInfo.InvariantCulture,GetType(value)));}if(v.Value==null){return null;}if(v.Value is byte[]bytes){return Convert.ToBase64String(bytes);}
#if HAVE_BIG_INTEGER
if(v.Value is BigInteger integer){return integer.ToString(CultureInfo.InvariantCulture);}
#endif
return Convert.ToString(v.Value,CultureInfo.InvariantCulture);}[CLSCompliant(false)]public static explicit operator uint(JToken value){JValue?v=EnsureValue(value);if(v==null||!ValidateToken(v,NumberTypes,false)){throw new ArgumentException("Can not convert {0} to UInt32.".FormatWith(CultureInfo.InvariantCulture,GetType(value)));}
#if HAVE_BIG_INTEGER
if(v.Value is BigInteger integer){return(uint)integer;}
#endif
return Convert.ToUInt32(v.Value,CultureInfo.InvariantCulture);}[CLSCompliant(false)]public static explicit operator ulong(JToken value){JValue?v=EnsureValue(value);if(v==null||!ValidateToken(v,NumberTypes,false)){throw new ArgumentException("Can not convert {0} to UInt64.".FormatWith(CultureInfo.InvariantCulture,GetType(value)));}
#if HAVE_BIG_INTEGER
if(v.Value is BigInteger integer){return(ulong)integer;}
#endif
return Convert.ToUInt64(v.Value,CultureInfo.InvariantCulture);}public static explicit operator byte[]?(JToken?value){if(value==null){return null;}JValue?v=EnsureValue(value);if(v==null||!ValidateToken(v,BytesTypes,false)){throw new ArgumentException("Can not convert {0} to byte array.".FormatWith(CultureInfo.InvariantCulture,GetType(value)));}if(v.Value is string){return Convert.FromBase64String(Convert.ToString(v.Value,CultureInfo.InvariantCulture));}
#if HAVE_BIG_INTEGER
if(v.Value is BigInteger integer){return integer.ToByteArray();}
#endif
if(v.Value is byte[]bytes){return bytes;}throw new ArgumentException("Can not convert {0} to byte array.".FormatWith(CultureInfo.InvariantCulture,GetType(value)));}public static explicit operator Guid(JToken value){JValue?v=EnsureValue(value);if(v==null||!ValidateToken(v,GuidTypes,false)){throw new ArgumentException("Can not convert {0} to Guid.".FormatWith(CultureInfo.InvariantCulture,GetType(value)));}if(v.Value is byte[]bytes){return new Guid(bytes);}return(v.Value is Guid guid)?guid:new Guid(Convert.ToString(v.Value,CultureInfo.InvariantCulture));}public static explicit operator Guid?(JToken?value){if(value==null){return null;}JValue?v=EnsureValue(value);if(v==null||!ValidateToken(v,GuidTypes,true)){throw new ArgumentException("Can not convert {0} to Guid.".FormatWith(CultureInfo.InvariantCulture,GetType(value)));}if(v.Value==null){return null;}if(v.Value is byte[]bytes){return new Guid(bytes);}return(v.Value is Guid guid)?guid:new Guid(Convert.ToString(v.Value,CultureInfo.InvariantCulture));}public static explicit operator TimeSpan(JToken value){JValue?v=EnsureValue(value);if(v==null||!ValidateToken(v,TimeSpanTypes,false)){throw new ArgumentException("Can not convert {0} to TimeSpan.".FormatWith(CultureInfo.InvariantCulture,GetType(value)));}return(v.Value is TimeSpan span)?span:ConvertUtils.ParseTimeSpan(Convert.ToString(v.Value,CultureInfo.InvariantCulture));}public static explicit operator TimeSpan?(JToken?value){if(value==null){return null;}JValue?v=EnsureValue(value);if(v==null||!ValidateToken(v,TimeSpanTypes,true)){throw new ArgumentException("Can not convert {0} to TimeSpan.".FormatWith(CultureInfo.InvariantCulture,GetType(value)));}if(v.Value==null){return null;}return(v.Value is TimeSpan span)?span:ConvertUtils.ParseTimeSpan(Convert.ToString(v.Value,CultureInfo.InvariantCulture));}public static explicit operator Uri?(JToken?value){if(value==null){return null;}JValue?v=EnsureValue(value);if(v==null||!ValidateToken(v,UriTypes,true)){throw new ArgumentException("Can not convert {0} to Uri.".FormatWith(CultureInfo.InvariantCulture,GetType(value)));}if(v.Value==null){return null;}return(v.Value is Uri uri)?uri:new Uri(Convert.ToString(v.Value,CultureInfo.InvariantCulture));}
#if HAVE_BIG_INTEGER
private static BigInteger ToBigInteger(JToken value){JValue?v=EnsureValue(value);if(v==null||!ValidateToken(v,BigIntegerTypes,false)){throw new ArgumentException("Can not convert {0} to BigInteger.".FormatWith(CultureInfo.InvariantCulture,GetType(value)));}return ConvertUtils.ToBigInteger(v.Value!);}private static BigInteger?ToBigIntegerNullable(JToken value){JValue?v=EnsureValue(value);if(v==null||!ValidateToken(v,BigIntegerTypes,true)){throw new ArgumentException("Can not convert {0} to BigInteger.".FormatWith(CultureInfo.InvariantCulture,GetType(value)));}if(v.Value==null){return null;}return ConvertUtils.ToBigInteger(v.Value);}
#endif
public static implicit operator JToken(bool value){return new JValue(value);}
#if HAVE_DATE_TIME_OFFSET
public static implicit operator JToken(DateTimeOffset value){return new JValue(value);}
#endif
public static implicit operator JToken(byte value){return new JValue(value);}public static implicit operator JToken(byte?value){return new JValue(value);}[CLSCompliant(false)]public static implicit operator JToken(sbyte value){return new JValue(value);}[CLSCompliant(false)]public static implicit operator JToken(sbyte?value){return new JValue(value);}public static implicit operator JToken(bool?value){return new JValue(value);}public static implicit operator JToken(long value){return new JValue(value);}public static implicit operator JToken(DateTime?value){return new JValue(value);}
#if HAVE_DATE_TIME_OFFSET
public static implicit operator JToken(DateTimeOffset?value){return new JValue(value);}
#endif
public static implicit operator JToken(decimal?value){return new JValue(value);}public static implicit operator JToken(double?value){return new JValue(value);}[CLSCompliant(false)]public static implicit operator JToken(short value){return new JValue(value);}[CLSCompliant(false)]public static implicit operator JToken(ushort value){return new JValue(value);}public static implicit operator JToken(int value){return new JValue(value);}public static implicit operator JToken(int?value){return new JValue(value);}public static implicit operator JToken(DateTime value){return new JValue(value);}public static implicit operator JToken(long?value){return new JValue(value);}public static implicit operator JToken(float?value){return new JValue(value);}public static implicit operator JToken(decimal value){return new JValue(value);}[CLSCompliant(false)]public static implicit operator JToken(short?value){return new JValue(value);}[CLSCompliant(false)]public static implicit operator JToken(ushort?value){return new JValue(value);}[CLSCompliant(false)]public static implicit operator JToken(uint?value){return new JValue(value);}[CLSCompliant(false)]public static implicit operator JToken(ulong?value){return new JValue(value);}public static implicit operator JToken(double value){return new JValue(value);}public static implicit operator JToken(float value){return new JValue(value);}public static implicit operator JToken(string?value){return new JValue(value);}[CLSCompliant(false)]public static implicit operator JToken(uint value){return new JValue(value);}[CLSCompliant(false)]public static implicit operator JToken(ulong value){return new JValue(value);}public static implicit operator JToken(byte[]value){return new JValue(value);}public static implicit operator JToken(Uri?value){return new JValue(value);}public static implicit operator JToken(TimeSpan value){return new JValue(value);}public static implicit operator JToken(TimeSpan?value){return new JValue(value);}public static implicit operator JToken(Guid value){return new JValue(value);}public static implicit operator JToken(Guid?value){return new JValue(value);}IEnumerator IEnumerable.GetEnumerator(){return((IEnumerable<JToken>)this).GetEnumerator();}IEnumerator<JToken>IEnumerable<JToken>.GetEnumerator(){return Children().GetEnumerator();}internal abstract int GetDeepHashCode();IJEnumerable<JToken>IJEnumerable<JToken>.this[object key]=>this[key]!;public JsonReader CreateReader(){return new JTokenReader(this);}internal static JToken FromObjectInternal(object o,JsonSerializer jsonSD){ValidationUtils.ArgumentNotNull(o,nameof(o));ValidationUtils.ArgumentNotNull(jsonSD,nameof(jsonSD));JToken token;using(JTokenWriter jsonWriter=new JTokenWriter()){jsonSD.Serialize(jsonWriter,o);token=jsonWriter.Token!;}return token;}public static JToken FromObject(object o){return FromObjectInternal(o,JsonSerializer.CreateDefault());}public static JToken FromObject(object o,JsonSerializer jsonSD){return FromObjectInternal(o,jsonSD);}public T?ToObject<T>(){return(T?)ToObject(typeof(T));}public object?ToObject(Type objectType){if(JsonConvert.DefaultSettings==null){PrimitiveTypeCode typeCode=ConvertUtils.GetTypeCode(objectType,out bool isEnum);if(isEnum){if(Type==JTokenType.String){try{return ToObject(objectType,JsonSerializer.CreateDefault());}catch(Exception ex){Type enumType=objectType.IsEnum()?objectType:Nullable.GetUnderlyingType(objectType);throw new ArgumentException("Could not convert '{0}' to {1}.".FormatWith(CultureInfo.InvariantCulture,(string?)this,enumType.Name),ex);}}if(Type==JTokenType.Integer){Type enumType=objectType.IsEnum()?objectType:Nullable.GetUnderlyingType(objectType);return Enum.ToObject(enumType,((JValue)this).Value);}}switch(typeCode){case PrimitiveTypeCode.BooleanNullable:return(bool?)this;case PrimitiveTypeCode.Boolean:return(bool)this;case PrimitiveTypeCode.CharNullable:return(char?)this;case PrimitiveTypeCode.Char:return(char)this;case PrimitiveTypeCode.SByte:return(sbyte)this;case PrimitiveTypeCode.SByteNullable:return(sbyte?)this;case PrimitiveTypeCode.ByteNullable:return(byte?)this;case PrimitiveTypeCode.Byte:return(byte)this;case PrimitiveTypeCode.Int16Nullable:return(short?)this;case PrimitiveTypeCode.Int16:return(short)this;case PrimitiveTypeCode.UInt16Nullable:return(ushort?)this;case PrimitiveTypeCode.UInt16:return(ushort)this;case PrimitiveTypeCode.Int32Nullable:return(int?)this;case PrimitiveTypeCode.Int32:return(int)this;case PrimitiveTypeCode.UInt32Nullable:return(uint?)this;case PrimitiveTypeCode.UInt32:return(uint)this;case PrimitiveTypeCode.Int64Nullable:return(long?)this;case PrimitiveTypeCode.Int64:return(long)this;case PrimitiveTypeCode.UInt64Nullable:return(ulong?)this;case PrimitiveTypeCode.UInt64:return(ulong)this;case PrimitiveTypeCode.SingleNullable:return(float?)this;case PrimitiveTypeCode.Single:return(float)this;case PrimitiveTypeCode.DoubleNullable:return(double?)this;case PrimitiveTypeCode.Double:return(double)this;case PrimitiveTypeCode.DecimalNullable:return(decimal?)this;case PrimitiveTypeCode.Decimal:return(decimal)this;case PrimitiveTypeCode.DateTimeNullable:return(DateTime?)this;case PrimitiveTypeCode.DateTime:return(DateTime)this;
#if HAVE_DATE_TIME_OFFSET
case PrimitiveTypeCode.DateTimeOffsetNullable:return(DateTimeOffset?)this;case PrimitiveTypeCode.DateTimeOffset:return(DateTimeOffset)this;
#endif
case PrimitiveTypeCode.String:return(string?)this;case PrimitiveTypeCode.GuidNullable:return(Guid?)this;case PrimitiveTypeCode.Guid:return(Guid)this;case PrimitiveTypeCode.Uri:return(Uri?)this;case PrimitiveTypeCode.TimeSpanNullable:return(TimeSpan?)this;case PrimitiveTypeCode.TimeSpan:return(TimeSpan)this;
#if HAVE_BIG_INTEGER
case PrimitiveTypeCode.BigIntegerNullable:return ToBigIntegerNullable(this);case PrimitiveTypeCode.BigInteger:return ToBigInteger(this);
#endif
}}return ToObject(objectType,JsonSerializer.CreateDefault());}public T?ToObject<T>(JsonSerializer jsonSD){return(T?)ToObject(typeof(T),jsonSD);}public object?ToObject(Type?objectType,JsonSerializer jsonSD){ValidationUtils.ArgumentNotNull(jsonSD,nameof(jsonSD));using(JTokenReader jsonReader=new JTokenReader(this)){if(jsonSD is JsonSerializerProxy proxy){proxy._serializer.SetupReader(jsonReader,out _,out _,out _,out _,out _,out _);}return jsonSD.Deserialize(jsonReader,objectType);}}public static JToken ReadFrom(JsonReader reader){return ReadFrom(reader,null);}public static JToken ReadFrom(JsonReader reader,JsonLoadSettings?settings){ValidationUtils.ArgumentNotNull(reader,nameof(reader));bool hasContent;if(reader.TokenType==JsonToken.None){hasContent=(settings!=null&&settings.CommentHandling==CommentHandling.Ignore)?reader.ReadAndMoveToContent():reader.Read();}else if(reader.TokenType==JsonToken.Comment&&settings?.CommentHandling==CommentHandling.Ignore){hasContent=reader.ReadAndMoveToContent();}else{hasContent=true;}if(!hasContent){throw JsonReaderException.Create(reader,"Error reading JToken from JsonReader.");}IJsonLineInfo?lineInfo=reader as IJsonLineInfo;switch(reader.TokenType){case JsonToken.StartObject:return JObject.Load(reader,settings);case JsonToken.StartArray:return JArray.Load(reader,settings);case JsonToken.StartConstructor:return JConstructor.Load(reader,settings);case JsonToken.PropertyName:return JProperty.Load(reader,settings);case JsonToken.String:case JsonToken.Integer:case JsonToken.Float:case JsonToken.Date:case JsonToken.Boolean:case JsonToken.Bytes:JValue v=new JValue(reader.Value);v.SetLineInfo(lineInfo,settings);return v;case JsonToken.Comment:v=JValue.CreateComment(reader.Value!.ToString());v.SetLineInfo(lineInfo,settings);return v;case JsonToken.Null:v=JValue.CreateNull();v.SetLineInfo(lineInfo,settings);return v;case JsonToken.Undefined:v=JValue.CreateUndefined();v.SetLineInfo(lineInfo,settings);return v;default:throw JsonReaderException.Create(reader,"Error reading JToken from JsonReader. Unexpected token: {0}".FormatWith(CultureInfo.InvariantCulture,reader.TokenType));}}public static JToken Parse(string json){return Parse(json,null);}public static JToken Parse(string json,JsonLoadSettings?settings){using(JsonReader reader=new JsonTextReader(new StringReader(json))){JToken t=Load(reader,settings);while(reader.Read()){}return t;}}public static JToken Load(JsonReader reader,JsonLoadSettings?settings){return ReadFrom(reader,settings);}public static JToken Load(JsonReader reader){return Load(reader,null);}internal void SetLineInfo(IJsonLineInfo?lineInfo,JsonLoadSettings?settings){if(settings!=null&&settings.LineInfoHandling!=LineInfoHandling.Load){return;}if(lineInfo==null||!lineInfo.HasLineInfo()){return;}SetLineInfo(lineInfo.LineNumber,lineInfo.LinePosition);}private class LineInfoAnnotation{internal readonly int LineNumber;internal readonly int LinePosition;public LineInfoAnnotation(int lineNumber,int linePosition){LineNumber=lineNumber;LinePosition=linePosition;}}internal void SetLineInfo(int lineNumber,int linePosition){AddAnnotation(new LineInfoAnnotation(lineNumber,linePosition));}bool IJsonLineInfo.HasLineInfo(){return(Annotation<LineInfoAnnotation>()!=null);}int IJsonLineInfo.LineNumber{get{LineInfoAnnotation?annotation=Annotation<LineInfoAnnotation>();if(annotation!=null){return annotation.LineNumber;}return 0;}}int IJsonLineInfo.LinePosition{get{LineInfoAnnotation?annotation=Annotation<LineInfoAnnotation>();if(annotation!=null){return annotation.LinePosition;}return 0;}}public JToken?SelectToken(string path){return SelectToken(path,settings:null);}public JToken?SelectToken(string path,bool errorWhenNoMatch){JsonSelectSettings?settings=errorWhenNoMatch?new JsonSelectSettings{ErrorWhenNoMatch=true}:null;return SelectToken(path,settings);}public JToken?SelectToken(string path,JsonSelectSettings?settings){JPath p=new JPath(path);JToken?token=null;foreach(JToken t in p.Evaluate(this,this,settings)){if(token!=null){throw new JsonException("Path returned multiple tokens.");}token=t;}return token;}public IEnumerable<JToken>SelectTokens(string path){return SelectTokens(path,settings:null);}public IEnumerable<JToken>SelectTokens(string path,bool errorWhenNoMatch){JsonSelectSettings?settings=errorWhenNoMatch?new JsonSelectSettings{ErrorWhenNoMatch=true}:null;return SelectTokens(path,settings);}public IEnumerable<JToken>SelectTokens(string path,JsonSelectSettings?settings){var p=new JPath(path);return p.Evaluate(this,this,settings);}
#if HAVE_DYNAMIC
protected virtual DynamicMetaObject GetMetaObject(Expression parameter){return new DynamicProxyMetaObject<JToken>(parameter,this,new DynamicProxy<JToken>());}DynamicMetaObject IDynamicMetaObjectProvider.GetMetaObject(Expression parameter){return GetMetaObject(parameter);}
#endif
#if HAVE_ICLONEABLE
object ICloneable.Clone(){return DeepClone();}
#endif
public JToken DeepClone(){return CloneToken();}public void AddAnnotation(object annotation){if(annotation==null){throw new ArgumentNullException(nameof(annotation));}if(_annotations==null){_annotations=(annotation is object[])?new[]{annotation}:annotation;}else{if(!(_annotations is object[]annotations)){_annotations=new[]{_annotations,annotation};}else{int index=0;while(index<annotations.Length&&annotations[index]!=null){index++;}if(index==annotations.Length){Array.Resize(ref annotations,index*2);_annotations=annotations;}annotations[index]=annotation;}}}public T?Annotation<T>()where T:class{if(_annotations!=null){if(!(_annotations is object[]annotations)){return(_annotations as T);}for(int i=0;i<annotations.Length;i++){object annotation=annotations[i];if(annotation==null){break;}if(annotation is T local){return local;}}}return default;}public object?Annotation(Type type){if(type==null){throw new ArgumentNullException(nameof(type));}if(_annotations!=null){if(!(_annotations is object[]annotations)){if(type.IsInstanceOfType(_annotations)){return _annotations;}}else{for(int i=0;i<annotations.Length;i++){object o=annotations[i];if(o==null){break;}if(type.IsInstanceOfType(o)){return o;}}}}return null;}public IEnumerable<T>Annotations<T>()where T:class{if(_annotations==null){yield break;}if(_annotations is object[]annotations){for(int i=0;i<annotations.Length;i++){object o=annotations[i];if(o==null){break;}if(o is T casted){yield return casted;}}yield break;}if(!(_annotations is T annotation)){yield break;}yield return annotation;}public IEnumerable<object>Annotations(Type type){if(type==null){throw new ArgumentNullException(nameof(type));}if(_annotations==null){yield break;}if(_annotations is object[]annotations){for(int i=0;i<annotations.Length;i++){object o=annotations[i];if(o==null){break;}if(type.IsInstanceOfType(o)){yield return o;}}yield break;}if(!type.IsInstanceOfType(_annotations)){yield break;}yield return _annotations;}public void RemoveAnnotations<T>()where T:class{if(_annotations!=null){if(!(_annotations is object?[]annotations)){if(_annotations is T){_annotations=null;}}else{int index=0;int keepCount=0;while(index<annotations.Length){object?obj2=annotations[index];if(obj2==null){break;}if(!(obj2 is T)){annotations[keepCount++]=obj2;}index++;}if(keepCount!=0){while(keepCount<index){annotations[keepCount++]=null;}}else{_annotations=null;}}}}public void RemoveAnnotations(Type type){if(type==null){throw new ArgumentNullException(nameof(type));}if(_annotations!=null){if(!(_annotations is object?[]annotations)){if(type.IsInstanceOfType(_annotations)){_annotations=null;}}else{int index=0;int keepCount=0;while(index<annotations.Length){object?o=annotations[index];if(o==null){break;}if(!type.IsInstanceOfType(o)){annotations[keepCount++]=o;}index++;}if(keepCount!=0){while(keepCount<index){annotations[keepCount++]=null;}}else{_annotations=null;}}}}internal void CopyAnnotations(JToken target,JToken source){if(source._annotations is object[]annotations){target._annotations=annotations.ToArray();}else{target._annotations=source._annotations;}}}}namespace Newtonsoft.Json.Linq{public class JTokenEqualityComparer:IEqualityComparer<JToken>{public bool Equals(JToken x,JToken y){return JToken.DeepEquals(x,y);}public int GetHashCode(JToken obj){if(obj==null){return 0;}return obj.GetDeepHashCode();}}}namespace Newtonsoft.Json.Linq{public class JTokenReader:JsonReader,IJsonLineInfo{private readonly JToken _root;private string?_initialPath;private JToken?_parent;private JToken?_current;public JToken?CurrentToken=>_current;public JTokenReader(JToken token){ValidationUtils.ArgumentNotNull(token,nameof(token));_root=token;}public JTokenReader(JToken token,string initialPath):this(token){_initialPath=initialPath;}public override bool Read(){if(CurrentState!=State.Start){if(_current==null){return false;}if(_current is JContainer container&&_parent!=container){return ReadInto(container);}else{return ReadOver(_current);}}if(_current==_root){return false;}_current=_root;SetToken(_current);return true;}private bool ReadOver(JToken t){if(t==_root){return ReadToEnd();}JToken?next=t.Next;if((next==null||next==t)||t==t.Parent!.Last){if(t.Parent==null){return ReadToEnd();}return SetEnd(t.Parent);}else{_current=next;SetToken(_current);return true;}}private bool ReadToEnd(){_current=null;SetToken(JsonToken.None);return false;}private JsonToken?GetEndToken(JContainer c){switch(c.Type){case JTokenType.Object:return JsonToken.EndObject;case JTokenType.Array:return JsonToken.EndArray;case JTokenType.Constructor:return JsonToken.EndConstructor;case JTokenType.Property:return null;default:throw MiscellaneousUtils.CreateArgumentOutOfRangeException(nameof(c.Type),c.Type,"Unexpected JContainer type.");}}private bool ReadInto(JContainer c){JToken?firstChild=c.First;if(firstChild==null){return SetEnd(c);}else{SetToken(firstChild);_current=firstChild;_parent=c;return true;}}private bool SetEnd(JContainer c){JsonToken?endToken=GetEndToken(c);if(endToken!=null){SetToken(endToken.GetValueOrDefault());_current=c;_parent=c;return true;}else{return ReadOver(c);}}private void SetToken(JToken token){switch(token.Type){case JTokenType.Object:SetToken(JsonToken.StartObject);break;case JTokenType.Array:SetToken(JsonToken.StartArray);break;case JTokenType.Constructor:SetToken(JsonToken.StartConstructor,((JConstructor)token).Name);break;case JTokenType.Property:SetToken(JsonToken.PropertyName,((JProperty)token).Name);break;case JTokenType.Comment:SetToken(JsonToken.Comment,((JValue)token).Value);break;case JTokenType.Integer:SetToken(JsonToken.Integer,((JValue)token).Value);break;case JTokenType.Float:SetToken(JsonToken.Float,((JValue)token).Value);break;case JTokenType.String:SetToken(JsonToken.String,((JValue)token).Value);break;case JTokenType.Boolean:SetToken(JsonToken.Boolean,((JValue)token).Value);break;case JTokenType.Null:SetToken(JsonToken.Null,((JValue)token).Value);break;case JTokenType.Undefined:SetToken(JsonToken.Undefined,((JValue)token).Value);break;case JTokenType.Date:{object?v=((JValue)token).Value;if(v is DateTime dt){v=DateTimeUtils.EnsureDateTime(dt,DateTimeZoneHandling);}SetToken(JsonToken.Date,v);break;}case JTokenType.Raw:SetToken(JsonToken.Raw,((JValue)token).Value);break;case JTokenType.Bytes:SetToken(JsonToken.Bytes,((JValue)token).Value);break;case JTokenType.Guid:SetToken(JsonToken.String,SafeToString(((JValue)token).Value));break;case JTokenType.Uri:{object?v=((JValue)token).Value;SetToken(JsonToken.String,v is Uri uri?uri.OriginalString:SafeToString(v));break;}case JTokenType.TimeSpan:SetToken(JsonToken.String,SafeToString(((JValue)token).Value));break;default:throw MiscellaneousUtils.CreateArgumentOutOfRangeException(nameof(token.Type),token.Type,"Unexpected JTokenType.");}}private string?SafeToString(object?value){return value?.ToString();}bool IJsonLineInfo.HasLineInfo(){if(CurrentState==State.Start){return false;}IJsonLineInfo?info=_current;return(info!=null&&info.HasLineInfo());}int IJsonLineInfo.LineNumber{get{if(CurrentState==State.Start){return 0;}IJsonLineInfo?info=_current;if(info!=null){return info.LineNumber;}return 0;}}int IJsonLineInfo.LinePosition{get{if(CurrentState==State.Start){return 0;}IJsonLineInfo?info=_current;if(info!=null){return info.LinePosition;}return 0;}}public override string Path{get{string path=base.Path;if(_initialPath==null){_initialPath=_root.Path;}if(!StringUtils.IsNullOrEmpty(_initialPath)){if(StringUtils.IsNullOrEmpty(path)){return _initialPath;}if(path.StartsWith('[')){path=_initialPath+path;}else{path=_initialPath+"."+path;}}return path;}}}}namespace Newtonsoft.Json.Linq{public enum JTokenType{None=0,Object=1,Array=2,Constructor=3,Property=4,Comment=5,Integer=6,Float=7,String=8,Boolean=9,Null=10,Undefined=11,Date=12,Raw=13,Bytes=14,Guid=15,Uri=16,TimeSpan=17}}
#if HAVE_ASYNC
namespace Newtonsoft.Json.Linq{public partial class JTokenWriter{internal override Task WriteTokenAsync(JsonReader reader,bool writeChildren,bool writeDateConstructorAsDate,bool writeComments,CancellationToken cancellationToken){if(reader is JTokenReader){WriteToken(reader,writeChildren,writeDateConstructorAsDate,writeComments);return AsyncUtils.CompletedTask;}return WriteTokenSyncReadingAsync(reader,cancellationToken);}}}
#endif
namespace Newtonsoft.Json.Linq{public partial class JTokenWriter:JsonWriter{private JContainer?_token;private JContainer?_parent;private JValue?_value;private JToken?_current;public JToken?CurrentToken=>_current;public JToken?Token{get{if(_token!=null){return _token;}return _value;}}public JTokenWriter(JContainer container){ValidationUtils.ArgumentNotNull(container,nameof(container));_token=container;_parent=container;}public JTokenWriter(){}public override void Flush(){}public override void Close(){base.Close();}public override void WriteStartObject(){base.WriteStartObject();AddParent(new JObject());}private void AddParent(JContainer container){if(_parent==null){_token=container;}else{_parent.AddAndSkipParentCheck(container);}_parent=container;_current=container;}private void RemoveParent(){_current=_parent;_parent=_parent!.Parent;if(_parent!=null&&_parent.Type==JTokenType.Property){_parent=_parent.Parent;}}public override void WriteStartArray(){base.WriteStartArray();AddParent(new JArray());}public override void WriteStartConstructor(string name){base.WriteStartConstructor(name);AddParent(new JConstructor(name));}protected override void WriteEnd(JsonToken token){RemoveParent();}public override void WritePropertyName(string name){(_parent as JObject)?.Remove(name);AddParent(new JProperty(name));base.WritePropertyName(name);}private void AddValue(object?value,JsonToken token){AddValue(new JValue(value),token);}internal void AddValue(JValue?value,JsonToken token){if(_parent!=null){if(_parent.TryAdd(value)){_current=_parent.Last;if(_parent.Type==JTokenType.Property){_parent=_parent.Parent;}}}else{_value=value??JValue.CreateNull();_current=_value;}}public override void WriteValue(object?value){
#if HAVE_BIG_INTEGER
if(value is BigInteger){InternalWriteValue(JsonToken.Integer);AddValue(value,JsonToken.Integer);}else
#endif
{base.WriteValue(value);}}public override void WriteNull(){base.WriteNull();AddValue(null,JsonToken.Null);}public override void WriteUndefined(){base.WriteUndefined();AddValue(null,JsonToken.Undefined);}public override void WriteRaw(string?json){base.WriteRaw(json);AddValue(new JRaw(json),JsonToken.Raw);}public override void WriteComment(string?text){base.WriteComment(text);AddValue(JValue.CreateComment(text),JsonToken.Comment);}public override void WriteValue(string?value){base.WriteValue(value);AddValue(value,JsonToken.String);}public override void WriteValue(int value){base.WriteValue(value);AddValue(value,JsonToken.Integer);}[CLSCompliant(false)]public override void WriteValue(uint value){base.WriteValue(value);AddValue(value,JsonToken.Integer);}public override void WriteValue(long value){base.WriteValue(value);AddValue(value,JsonToken.Integer);}[CLSCompliant(false)]public override void WriteValue(ulong value){base.WriteValue(value);AddValue(value,JsonToken.Integer);}public override void WriteValue(float value){base.WriteValue(value);AddValue(value,JsonToken.Float);}public override void WriteValue(double value){base.WriteValue(value);AddValue(value,JsonToken.Float);}public override void WriteValue(bool value){base.WriteValue(value);AddValue(value,JsonToken.Boolean);}public override void WriteValue(short value){base.WriteValue(value);AddValue(value,JsonToken.Integer);}[CLSCompliant(false)]public override void WriteValue(ushort value){base.WriteValue(value);AddValue(value,JsonToken.Integer);}public override void WriteValue(char value){base.WriteValue(value);string s;
#if HAVE_CHAR_TO_STRING_WITH_CULTURE
s=value.ToString(CultureInfo.InvariantCulture);
#else
s=value.ToString();
#endif
AddValue(s,JsonToken.String);}public override void WriteValue(byte value){base.WriteValue(value);AddValue(value,JsonToken.Integer);}[CLSCompliant(false)]public override void WriteValue(sbyte value){base.WriteValue(value);AddValue(value,JsonToken.Integer);}public override void WriteValue(decimal value){base.WriteValue(value);AddValue(value,JsonToken.Float);}public override void WriteValue(DateTime value){base.WriteValue(value);value=DateTimeUtils.EnsureDateTime(value,DateTimeZoneHandling);AddValue(value,JsonToken.Date);}
#if HAVE_DATE_TIME_OFFSET
public override void WriteValue(DateTimeOffset value){base.WriteValue(value);AddValue(value,JsonToken.Date);}
#endif
public override void WriteValue(byte[]?value){base.WriteValue(value);AddValue(value,JsonToken.Bytes);}public override void WriteValue(TimeSpan value){base.WriteValue(value);AddValue(value,JsonToken.String);}public override void WriteValue(Guid value){base.WriteValue(value);AddValue(value,JsonToken.String);}public override void WriteValue(Uri?value){base.WriteValue(value);AddValue(value,JsonToken.String);}internal override void WriteToken(JsonReader reader,bool writeChildren,bool writeDateConstructorAsDate,bool writeComments){if(reader is JTokenReader tokenReader&&writeChildren&&writeDateConstructorAsDate&&writeComments){if(tokenReader.TokenType==JsonToken.None){if(!tokenReader.Read()){return;}}JToken value=tokenReader.CurrentToken!.CloneToken();if(_parent!=null){_parent.Add(value);_current=_parent.Last;if(_parent.Type==JTokenType.Property){_parent=_parent.Parent;InternalWriteValue(JsonToken.Null);}}else{_current=value;if(_token==null&&_value==null){_token=value as JContainer;_value=value as JValue;}}tokenReader.Skip();}else{base.WriteToken(reader,writeChildren,writeDateConstructorAsDate,writeComments);}}}}
#if HAVE_ASYNC
#if HAVE_BIG_INTEGER
#endif
namespace Newtonsoft.Json.Linq{public partial class JValue{public override Task WriteToAsync(JsonWriter writer,CancellationToken cancellationToken,params JsonConverter[]converters){if(converters!=null&&converters.Length>0&&_value!=null){JsonConverter?matchingConverter=JsonSerializer.GetMatchingConverter(converters,_value.GetType());if(matchingConverter!=null&&matchingConverter.CanWrite){matchingConverter.WriteJson(writer,_value,JsonSerializer.CreateDefault());return AsyncUtils.CompletedTask;}}switch(_valueType){case JTokenType.Comment:return writer.WriteCommentAsync(_value?.ToString(),cancellationToken);case JTokenType.Raw:return writer.WriteRawValueAsync(_value?.ToString(),cancellationToken);case JTokenType.Null:return writer.WriteNullAsync(cancellationToken);case JTokenType.Undefined:return writer.WriteUndefinedAsync(cancellationToken);case JTokenType.Integer:if(_value is int i){return writer.WriteValueAsync(i,cancellationToken);}if(_value is long l){return writer.WriteValueAsync(l,cancellationToken);}if(_value is ulong ul){return writer.WriteValueAsync(ul,cancellationToken);}
#if HAVE_BIG_INTEGER
if(_value is BigInteger integer){return writer.WriteValueAsync(integer,cancellationToken);}
#endif
return writer.WriteValueAsync(Convert.ToInt64(_value,CultureInfo.InvariantCulture),cancellationToken);case JTokenType.Float:if(_value is decimal dec){return writer.WriteValueAsync(dec,cancellationToken);}if(_value is double d){return writer.WriteValueAsync(d,cancellationToken);}if(_value is float f){return writer.WriteValueAsync(f,cancellationToken);}return writer.WriteValueAsync(Convert.ToDouble(_value,CultureInfo.InvariantCulture),cancellationToken);case JTokenType.String:return writer.WriteValueAsync(_value?.ToString(),cancellationToken);case JTokenType.Boolean:return writer.WriteValueAsync(Convert.ToBoolean(_value,CultureInfo.InvariantCulture),cancellationToken);case JTokenType.Date:if(_value is DateTimeOffset offset){return writer.WriteValueAsync(offset,cancellationToken);}return writer.WriteValueAsync(Convert.ToDateTime(_value,CultureInfo.InvariantCulture),cancellationToken);case JTokenType.Bytes:return writer.WriteValueAsync((byte[]?)_value,cancellationToken);case JTokenType.Guid:return writer.WriteValueAsync(_value!=null?(Guid?)_value:null,cancellationToken);case JTokenType.TimeSpan:return writer.WriteValueAsync(_value!=null?(TimeSpan?)_value:null,cancellationToken);case JTokenType.Uri:return writer.WriteValueAsync((Uri?)_value,cancellationToken);}throw MiscellaneousUtils.CreateArgumentOutOfRangeException(nameof(Type),_valueType,"Unexpected token type.");}}}
#endif
namespace Newtonsoft.Json.Linq{public partial class JValue:JToken,IEquatable<JValue>,IFormattable,IComparable,IComparable<JValue>
#if HAVE_ICONVERTIBLE
,IConvertible
#endif
{private JTokenType _valueType;private object?_value;internal JValue(object?value,JTokenType type){_value=value;_valueType=type;}public JValue(JValue other):this(other.Value,other.Type){CopyAnnotations(this,other);}public JValue(long value):this(value,JTokenType.Integer){}public JValue(decimal value):this(value,JTokenType.Float){}public JValue(char value):this(value,JTokenType.String){}[CLSCompliant(false)]public JValue(ulong value):this(value,JTokenType.Integer){}public JValue(double value):this(value,JTokenType.Float){}public JValue(float value):this(value,JTokenType.Float){}public JValue(DateTime value):this(value,JTokenType.Date){}
#if HAVE_DATE_TIME_OFFSET
public JValue(DateTimeOffset value):this(value,JTokenType.Date){}
#endif
public JValue(bool value):this(value,JTokenType.Boolean){}public JValue(string?value):this(value,JTokenType.String){}public JValue(Guid value):this(value,JTokenType.Guid){}public JValue(Uri?value):this(value,(value!=null)?JTokenType.Uri:JTokenType.Null){}public JValue(TimeSpan value):this(value,JTokenType.TimeSpan){}public JValue(object?value):this(value,GetValueType(null,value)){}internal override bool DeepEquals(JToken node){if(!(node is JValue other)){return false;}if(other==this){return true;}return ValuesEquals(this,other);}public override bool HasValues=>false;
#if HAVE_BIG_INTEGER
private static int CompareBigInteger(BigInteger i1,object i2){int result=i1.CompareTo(ConvertUtils.ToBigInteger(i2));if(result!=0){return result;}if(i2 is decimal d1){return(0m).CompareTo(Math.Abs(d1-Math.Truncate(d1)));}else if(i2 is double||i2 is float){double d=Convert.ToDouble(i2,CultureInfo.InvariantCulture);return(0d).CompareTo(Math.Abs(d-Math.Truncate(d)));}return result;}
#endif
internal static int Compare(JTokenType valueType,object?objA,object?objB){if(objA==objB){return 0;}if(objB==null){return 1;}if(objA==null){return-1;}switch(valueType){case JTokenType.Integer:{
#if HAVE_BIG_INTEGER
if(objA is BigInteger integerA){return CompareBigInteger(integerA,objB);}if(objB is BigInteger integerB){return-CompareBigInteger(integerB,objA);}
#endif
if(objA is ulong||objB is ulong||objA is decimal||objB is decimal){return Convert.ToDecimal(objA,CultureInfo.InvariantCulture).CompareTo(Convert.ToDecimal(objB,CultureInfo.InvariantCulture));}else if(objA is float||objB is float||objA is double||objB is double){return CompareFloat(objA,objB);}else{return Convert.ToInt64(objA,CultureInfo.InvariantCulture).CompareTo(Convert.ToInt64(objB,CultureInfo.InvariantCulture));}}case JTokenType.Float:{
#if HAVE_BIG_INTEGER
if(objA is BigInteger integerA){return CompareBigInteger(integerA,objB);}if(objB is BigInteger integerB){return-CompareBigInteger(integerB,objA);}
#endif
if(objA is ulong||objB is ulong||objA is decimal||objB is decimal){return Convert.ToDecimal(objA,CultureInfo.InvariantCulture).CompareTo(Convert.ToDecimal(objB,CultureInfo.InvariantCulture));}return CompareFloat(objA,objB);}case JTokenType.Comment:case JTokenType.String:case JTokenType.Raw:string s1=Convert.ToString(objA,CultureInfo.InvariantCulture);string s2=Convert.ToString(objB,CultureInfo.InvariantCulture);return string.CompareOrdinal(s1,s2);case JTokenType.Boolean:bool b1=Convert.ToBoolean(objA,CultureInfo.InvariantCulture);bool b2=Convert.ToBoolean(objB,CultureInfo.InvariantCulture);return b1.CompareTo(b2);case JTokenType.Date:
#if HAVE_DATE_TIME_OFFSET
if(objA is DateTime dateA){
#else
DateTime dateA=(DateTime)objA;
#endif
DateTime dateB;
#if HAVE_DATE_TIME_OFFSET
if(objB is DateTimeOffset offsetB){dateB=offsetB.DateTime;}else
#endif
{dateB=Convert.ToDateTime(objB,CultureInfo.InvariantCulture);}return dateA.CompareTo(dateB);
#if HAVE_DATE_TIME_OFFSET
}else{DateTimeOffset offsetA=(DateTimeOffset)objA;if(!(objB is DateTimeOffset offsetB)){offsetB=new DateTimeOffset(Convert.ToDateTime(objB,CultureInfo.InvariantCulture));}return offsetA.CompareTo(offsetB);}
#endif
case JTokenType.Bytes:if(!(objB is byte[]bytesB)){throw new ArgumentException("Object must be of type byte[].");}byte[]?bytesA=objA as byte[];MiscellaneousUtils.Assert(bytesA!=null);return MiscellaneousUtils.ByteArrayCompare(bytesA!,bytesB);case JTokenType.Guid:if(!(objB is Guid)){throw new ArgumentException("Object must be of type Guid.");}Guid guid1=(Guid)objA;Guid guid2=(Guid)objB;return guid1.CompareTo(guid2);case JTokenType.Uri:Uri?uri2=objB as Uri;if(uri2==null){throw new ArgumentException("Object must be of type Uri.");}Uri uri1=(Uri)objA;return Comparer<string>.Default.Compare(uri1.ToString(),uri2.ToString());case JTokenType.TimeSpan:if(!(objB is TimeSpan)){throw new ArgumentException("Object must be of type TimeSpan.");}TimeSpan ts1=(TimeSpan)objA;TimeSpan ts2=(TimeSpan)objB;return ts1.CompareTo(ts2);default:throw MiscellaneousUtils.CreateArgumentOutOfRangeException(nameof(valueType),valueType,"Unexpected value type: {0}".FormatWith(CultureInfo.InvariantCulture,valueType));}}private static int CompareFloat(object objA,object objB){double d1=Convert.ToDouble(objA,CultureInfo.InvariantCulture);double d2=Convert.ToDouble(objB,CultureInfo.InvariantCulture);if(MathUtils.ApproxEquals(d1,d2)){return 0;}return d1.CompareTo(d2);}
#if HAVE_EXPRESSIONS
private static bool Operation(ExpressionType operation,object?objA,object?objB,out object?result){if(objA is string||objB is string){if(operation==ExpressionType.Add||operation==ExpressionType.AddAssign){result=objA?.ToString()+objB?.ToString();return true;}}
#if HAVE_BIG_INTEGER
if(objA is BigInteger||objB is BigInteger){if(objA==null||objB==null){result=null;return true;}BigInteger i1=ConvertUtils.ToBigInteger(objA);BigInteger i2=ConvertUtils.ToBigInteger(objB);switch(operation){case ExpressionType.Add:case ExpressionType.AddAssign:result=i1+i2;return true;case ExpressionType.Subtract:case ExpressionType.SubtractAssign:result=i1-i2;return true;case ExpressionType.Multiply:case ExpressionType.MultiplyAssign:result=i1*i2;return true;case ExpressionType.Divide:case ExpressionType.DivideAssign:result=i1/i2;return true;}}else
#endif
if(objA is ulong||objB is ulong||objA is decimal||objB is decimal){if(objA==null||objB==null){result=null;return true;}decimal d1=Convert.ToDecimal(objA,CultureInfo.InvariantCulture);decimal d2=Convert.ToDecimal(objB,CultureInfo.InvariantCulture);switch(operation){case ExpressionType.Add:case ExpressionType.AddAssign:result=d1+d2;return true;case ExpressionType.Subtract:case ExpressionType.SubtractAssign:result=d1-d2;return true;case ExpressionType.Multiply:case ExpressionType.MultiplyAssign:result=d1*d2;return true;case ExpressionType.Divide:case ExpressionType.DivideAssign:result=d1/d2;return true;}}else if(objA is float||objB is float||objA is double||objB is double){if(objA==null||objB==null){result=null;return true;}double d1=Convert.ToDouble(objA,CultureInfo.InvariantCulture);double d2=Convert.ToDouble(objB,CultureInfo.InvariantCulture);switch(operation){case ExpressionType.Add:case ExpressionType.AddAssign:result=d1+d2;return true;case ExpressionType.Subtract:case ExpressionType.SubtractAssign:result=d1-d2;return true;case ExpressionType.Multiply:case ExpressionType.MultiplyAssign:result=d1*d2;return true;case ExpressionType.Divide:case ExpressionType.DivideAssign:result=d1/d2;return true;}}else if(objA is int||objA is uint||objA is long||objA is short||objA is ushort||objA is sbyte||objA is byte||objB is int||objB is uint||objB is long||objB is short||objB is ushort||objB is sbyte||objB is byte){if(objA==null||objB==null){result=null;return true;}long l1=Convert.ToInt64(objA,CultureInfo.InvariantCulture);long l2=Convert.ToInt64(objB,CultureInfo.InvariantCulture);switch(operation){case ExpressionType.Add:case ExpressionType.AddAssign:result=l1+l2;return true;case ExpressionType.Subtract:case ExpressionType.SubtractAssign:result=l1-l2;return true;case ExpressionType.Multiply:case ExpressionType.MultiplyAssign:result=l1*l2;return true;case ExpressionType.Divide:case ExpressionType.DivideAssign:result=l1/l2;return true;}}result=null;return false;}
#endif
internal override JToken CloneToken(){return new JValue(this);}public static JValue CreateComment(string?value){return new JValue(value,JTokenType.Comment);}public static JValue CreateString(string?value){return new JValue(value,JTokenType.String);}public static JValue CreateNull(){return new JValue(null,JTokenType.Null);}public static JValue CreateUndefined(){return new JValue(null,JTokenType.Undefined);}private static JTokenType GetValueType(JTokenType?current,object?value){if(value==null){return JTokenType.Null;}
#if HAVE_ADO_NET
else if(value==DBNull.Value){return JTokenType.Null;}
#endif
else if(value is string){return GetStringValueType(current);}else if(value is long||value is int||value is short||value is sbyte||value is ulong||value is uint||value is ushort||value is byte){return JTokenType.Integer;}else if(value is Enum){return JTokenType.Integer;}
#if HAVE_BIG_INTEGER
else if(value is BigInteger){return JTokenType.Integer;}
#endif
else if(value is double||value is float||value is decimal){return JTokenType.Float;}else if(value is DateTime){return JTokenType.Date;}
#if HAVE_DATE_TIME_OFFSET
else if(value is DateTimeOffset){return JTokenType.Date;}
#endif
else if(value is byte[]){return JTokenType.Bytes;}else if(value is bool){return JTokenType.Boolean;}else if(value is Guid){return JTokenType.Guid;}else if(value is Uri){return JTokenType.Uri;}else if(value is TimeSpan){return JTokenType.TimeSpan;}throw new ArgumentException("Could not determine JSON object type for type {0}.".FormatWith(CultureInfo.InvariantCulture,value.GetType()));}private static JTokenType GetStringValueType(JTokenType?current){if(current==null){return JTokenType.String;}switch(current.GetValueOrDefault()){case JTokenType.Comment:case JTokenType.String:case JTokenType.Raw:return current.GetValueOrDefault();default:return JTokenType.String;}}public override JTokenType Type=>_valueType;public object?Value{get=>_value;set{Type?currentType=_value?.GetType();Type?newType=value?.GetType();if(currentType!=newType){_valueType=GetValueType(_valueType,value);}_value=value;}}public override void WriteTo(JsonWriter writer,params JsonConverter[]converters){if(converters!=null&&converters.Length>0&&_value!=null){JsonConverter?matchingConverter=JsonSerializer.GetMatchingConverter(converters,_value.GetType());if(matchingConverter!=null&&matchingConverter.CanWrite){matchingConverter.WriteJson(writer,_value,JsonSerializer.CreateDefault());return;}}switch(_valueType){case JTokenType.Comment:writer.WriteComment(_value?.ToString());return;case JTokenType.Raw:writer.WriteRawValue(_value?.ToString());return;case JTokenType.Null:writer.WriteNull();return;case JTokenType.Undefined:writer.WriteUndefined();return;case JTokenType.Integer:if(_value is int i){writer.WriteValue(i);}else if(_value is long l){writer.WriteValue(l);}else if(_value is ulong ul){writer.WriteValue(ul);}
#if HAVE_BIG_INTEGER
else if(_value is BigInteger integer){writer.WriteValue(integer);}
#endif
else{writer.WriteValue(Convert.ToInt64(_value,CultureInfo.InvariantCulture));}return;case JTokenType.Float:if(_value is decimal dec){writer.WriteValue(dec);}else if(_value is double d){writer.WriteValue(d);}else if(_value is float f){writer.WriteValue(f);}else{writer.WriteValue(Convert.ToDouble(_value,CultureInfo.InvariantCulture));}return;case JTokenType.String:writer.WriteValue(_value?.ToString());return;case JTokenType.Boolean:writer.WriteValue(Convert.ToBoolean(_value,CultureInfo.InvariantCulture));return;case JTokenType.Date:
#if HAVE_DATE_TIME_OFFSET
if(_value is DateTimeOffset offset){writer.WriteValue(offset);}else
#endif
{writer.WriteValue(Convert.ToDateTime(_value,CultureInfo.InvariantCulture));}return;case JTokenType.Bytes:writer.WriteValue((byte[]?)_value);return;case JTokenType.Guid:writer.WriteValue((_value!=null)?(Guid?)_value:null);return;case JTokenType.TimeSpan:writer.WriteValue((_value!=null)?(TimeSpan?)_value:null);return;case JTokenType.Uri:writer.WriteValue((Uri?)_value);return;}throw MiscellaneousUtils.CreateArgumentOutOfRangeException(nameof(Type),_valueType,"Unexpected token type.");}internal override int GetDeepHashCode(){int valueHashCode=(_value!=null)?_value.GetHashCode():0;return((int)_valueType).GetHashCode()^valueHashCode;}private static bool ValuesEquals(JValue v1,JValue v2){return(v1==v2||(v1._valueType==v2._valueType&&Compare(v1._valueType,v1._value,v2._value)==0));}public bool Equals(JValue?other){if(other==null){return false;}return ValuesEquals(this,other);}public override bool Equals(object obj){if(obj is JValue v){return Equals(v);}return false;}public override int GetHashCode(){if(_value==null){return 0;}return _value.GetHashCode();}public override string ToString(){if(_value==null){return string.Empty;}return _value.ToString();}public string ToString(string format){return ToString(format,CultureInfo.CurrentCulture);}public string ToString(IFormatProvider formatProvider){return ToString(null,formatProvider);}public string ToString(string?format,IFormatProvider formatProvider){if(_value==null){return string.Empty;}if(_value is IFormattable formattable){return formattable.ToString(format,formatProvider);}else{return _value.ToString();}}
#if HAVE_DYNAMIC
protected override DynamicMetaObject GetMetaObject(Expression parameter){return new DynamicProxyMetaObject<JValue>(parameter,this,new JValueDynamicProxy());}private class JValueDynamicProxy:DynamicProxy<JValue>{public override bool TryConvert(JValue instance,ConvertBinder binder,[NotNullWhen(true)]out object?result){if(binder.Type==typeof(JValue)||binder.Type==typeof(JToken)){result=instance;return true;}object?value=instance.Value;if(value==null){result=null;return ReflectionUtils.IsNullable(binder.Type);}result=ConvertUtils.Convert(value,CultureInfo.InvariantCulture,binder.Type);return true;}public override bool TryBinaryOperation(JValue instance,BinaryOperationBinder binder,object arg,[NotNullWhen(true)]out object?result){object?compareValue=arg is JValue value?value.Value:arg;switch(binder.Operation){case ExpressionType.Equal:result=(Compare(instance.Type,instance.Value,compareValue)==0);return true;case ExpressionType.NotEqual:result=(Compare(instance.Type,instance.Value,compareValue)!=0);return true;case ExpressionType.GreaterThan:result=(Compare(instance.Type,instance.Value,compareValue)>0);return true;case ExpressionType.GreaterThanOrEqual:result=(Compare(instance.Type,instance.Value,compareValue)>=0);return true;case ExpressionType.LessThan:result=(Compare(instance.Type,instance.Value,compareValue)<0);return true;case ExpressionType.LessThanOrEqual:result=(Compare(instance.Type,instance.Value,compareValue)<=0);return true;case ExpressionType.Add:case ExpressionType.AddAssign:case ExpressionType.Subtract:case ExpressionType.SubtractAssign:case ExpressionType.Multiply:case ExpressionType.MultiplyAssign:case ExpressionType.Divide:case ExpressionType.DivideAssign:if(Operation(binder.Operation,instance.Value,compareValue,out result)){result=new JValue(result);return true;}break;}result=null;return false;}}
#endif
int IComparable.CompareTo(object obj){if(obj==null){return 1;}JTokenType comparisonType;object?otherValue;if(obj is JValue value){otherValue=value.Value;comparisonType=(_valueType==JTokenType.String&&_valueType!=value._valueType)?value._valueType:_valueType;}else{otherValue=obj;comparisonType=_valueType;}return Compare(comparisonType,_value,otherValue);}public int CompareTo(JValue obj){if(obj==null){return 1;}JTokenType comparisonType=(_valueType==JTokenType.String&&_valueType!=obj._valueType)?obj._valueType:_valueType;return Compare(comparisonType,_value,obj._value);}
#if HAVE_ICONVERTIBLE
TypeCode IConvertible.GetTypeCode(){if(_value==null){return TypeCode.Empty;}if(_value is IConvertible convertable){return convertable.GetTypeCode();}return TypeCode.Object;}bool IConvertible.ToBoolean(IFormatProvider provider){return(bool)this;}char IConvertible.ToChar(IFormatProvider provider){return(char)this;}sbyte IConvertible.ToSByte(IFormatProvider provider){return(sbyte)this;}byte IConvertible.ToByte(IFormatProvider provider){return(byte)this;}short IConvertible.ToInt16(IFormatProvider provider){return(short)this;}ushort IConvertible.ToUInt16(IFormatProvider provider){return(ushort)this;}int IConvertible.ToInt32(IFormatProvider provider){return(int)this;}uint IConvertible.ToUInt32(IFormatProvider provider){return(uint)this;}long IConvertible.ToInt64(IFormatProvider provider){return(long)this;}ulong IConvertible.ToUInt64(IFormatProvider provider){return(ulong)this;}float IConvertible.ToSingle(IFormatProvider provider){return(float)this;}double IConvertible.ToDouble(IFormatProvider provider){return(double)this;}decimal IConvertible.ToDecimal(IFormatProvider provider){return(decimal)this;}DateTime IConvertible.ToDateTime(IFormatProvider provider){return(DateTime)this;}object?IConvertible.ToType(Type conversionType,IFormatProvider provider){return ToObject(conversionType);}
#endif
}}namespace Newtonsoft.Json.Serialization{public class KebabCaseNamingStrategy:NamingStrategy{public KebabCaseNamingStrategy(bool processDictionaryKeys,bool overrideSpecifiedNames){ProcessDictionaryKeys=processDictionaryKeys;OverrideSpecifiedNames=overrideSpecifiedNames;}public KebabCaseNamingStrategy(bool processDictionaryKeys,bool overrideSpecifiedNames,bool processExtensionDataNames):this(processDictionaryKeys,overrideSpecifiedNames){ProcessExtensionDataNames=processExtensionDataNames;}public KebabCaseNamingStrategy(){}protected override string ResolvePropertyName(string name)=>StringUtils.ToKebabCase(name);}}namespace Newtonsoft.Json.Converters{public class KeyValuePairConverter:JsonConverter{private const string KeyName="Key";private const string ValueName="Value";private static readonly ThreadSafeStore<Type,ReflectionObject>ReflectionObjectPerType=new ThreadSafeStore<Type,ReflectionObject>(InitializeReflectionObject);private static ReflectionObject InitializeReflectionObject(Type t){IList<Type>genericArguments=t.GetGenericArguments();Type keyType=genericArguments[0];Type valueType=genericArguments[1];return ReflectionObject.Create(t,t.GetConstructor(new[]{keyType,valueType}),KeyName,ValueName);}public override void WriteJson(JsonWriter writer,object?value,JsonSerializer serializer){if(value==null){writer.WriteNull();return;}ReflectionObject reflectionObject=ReflectionObjectPerType.Get(value.GetType());DefaultContractResolver?resolver=serializer.ContractResolver as DefaultContractResolver;writer.WriteStartObject();writer.WritePropertyName((resolver!=null)?resolver.GetResolvedPropertyName(KeyName):KeyName);serializer.Serialize(writer,reflectionObject.GetValue(value,KeyName),reflectionObject.GetType(KeyName));writer.WritePropertyName((resolver!=null)?resolver.GetResolvedPropertyName(ValueName):ValueName);serializer.Serialize(writer,reflectionObject.GetValue(value,ValueName),reflectionObject.GetType(ValueName));writer.WriteEndObject();}public override object?ReadJson(JsonReader reader,Type objectType,object?existingValue,JsonSerializer serializer){if(reader.TokenType==JsonToken.Null){if(!ReflectionUtils.IsNullableType(objectType)){throw JsonSerializationException.Create(reader,"Cannot convert null value to KeyValuePair.");}return null;}object?key=null;object?value=null;reader.ReadAndAssert();Type t=ReflectionUtils.IsNullableType(objectType)?Nullable.GetUnderlyingType(objectType):objectType;ReflectionObject reflectionObject=ReflectionObjectPerType.Get(t);JsonContract keyContract=serializer.ContractResolver.ResolveContract(reflectionObject.GetType(KeyName));JsonContract valueContract=serializer.ContractResolver.ResolveContract(reflectionObject.GetType(ValueName));while(reader.TokenType==JsonToken.PropertyName){string propertyName=reader.Value!.ToString();if(string.Equals(propertyName,KeyName,StringComparison.OrdinalIgnoreCase)){reader.ReadForTypeAndAssert(keyContract,false);key=serializer.Deserialize(reader,keyContract.UnderlyingType);}else if(string.Equals(propertyName,ValueName,StringComparison.OrdinalIgnoreCase)){reader.ReadForTypeAndAssert(valueContract,false);value=serializer.Deserialize(reader,valueContract.UnderlyingType);}else{reader.Skip();}reader.ReadAndAssert();}return reflectionObject.Creator!(key,value);}public override bool CanConvert(Type objectType){Type t=(ReflectionUtils.IsNullableType(objectType))?Nullable.GetUnderlyingType(objectType):objectType;if(t.IsValueType()&&t.IsGenericType()){return(t.GetGenericTypeDefinition()==typeof(KeyValuePair<,>));}return false;}}}
namespace Newtonsoft.Json.Utilities{internal class LateBoundReflectionDelegateFactory:ReflectionDelegateFactory{private static readonly LateBoundReflectionDelegateFactory _instance=new LateBoundReflectionDelegateFactory();internal static ReflectionDelegateFactory Instance=>_instance;public override ObjectConstructor<object>CreateParameterizedConstructor(MethodBase method){ValidationUtils.ArgumentNotNull(method,nameof(method));if(method is ConstructorInfo c){return a=>c.Invoke(a);}return a=>method.Invoke(null,a);}public override MethodCall<T,object?>CreateMethodCall<T>(MethodBase method){ValidationUtils.ArgumentNotNull(method,nameof(method));if(method is ConstructorInfo c){return(o,a)=>c.Invoke(a);}return(o,a)=>method.Invoke(o,a);}public override Serialization.Func<T>CreateDefaultConstructor<T>(Type type){ValidationUtils.ArgumentNotNull(type,nameof(type));if(type.IsValueType()){return()=>(T)Activator.CreateInstance(type);}ConstructorInfo constructorInfo=ReflectionUtils.GetDefaultConstructor(type,true);return()=>(T)constructorInfo.Invoke(null);}public override Serialization.Func<T,object?>CreateGet<T>(PropertyInfo propertyInfo){ValidationUtils.ArgumentNotNull(propertyInfo,nameof(propertyInfo));return o=>propertyInfo.GetValue(o,null);}public override Serialization.Func<T,object?>CreateGet<T>(FieldInfo fieldInfo){ValidationUtils.ArgumentNotNull(fieldInfo,nameof(fieldInfo));return o=>fieldInfo.GetValue(o);}public override Serialization.Action<T,object?>CreateSet<T>(FieldInfo fieldInfo){ValidationUtils.ArgumentNotNull(fieldInfo,nameof(fieldInfo));return(o,v)=>fieldInfo.SetValue(o,v);}public override Serialization.Action<T,object?>CreateSet<T>(PropertyInfo propertyInfo){ValidationUtils.ArgumentNotNull(propertyInfo,nameof(propertyInfo));return(o,v)=>propertyInfo.SetValue(o,v,null);}}}namespace Newtonsoft.Json.Linq{public enum LineInfoHandling{Ignore=0,Load=1}}
namespace Newtonsoft.Json.Utilities.LinqBridge{internal static partial class Enumerable{public static IEnumerable<TSource>AsEnumerable<TSource>(IEnumerable<TSource>source){return source;}public static IEnumerable<TResult>Empty<TResult>(){return Sequence<TResult>.Empty;}public static IEnumerable<TResult>Cast<TResult>(this IEnumerable source){CheckNotNull(source,"source");var servesItself=source as IEnumerable<TResult>;if(servesItself!=null&&(!(servesItself is TResult[])||servesItself.GetType().GetElementType()==typeof(TResult))){return servesItself;}return CastYield<TResult>(source);}private static IEnumerable<TResult>CastYield<TResult>(IEnumerable source){foreach(var item in source)yield return(TResult)item;}public static IEnumerable<TResult>OfType<TResult>(this IEnumerable source){CheckNotNull(source,"source");return OfTypeYield<TResult>(source);}private static IEnumerable<TResult>OfTypeYield<TResult>(IEnumerable source){foreach(var item in source)if(item is TResult)yield return(TResult)item;}public static IEnumerable<int>Range(int start,int count){if(count<0)throw new ArgumentOutOfRangeException("count",count,null);var end=(long)start+count;if(end-1>=int.MaxValue)throw new ArgumentOutOfRangeException("count",count,null);return RangeYield(start,end);}private static IEnumerable<int>RangeYield(int start,long end){for(var i=start;i<end;i++)yield return i;}public static IEnumerable<TResult>Repeat<TResult>(TResult element,int count){if(count<0)throw new ArgumentOutOfRangeException("count",count,null);return RepeatYield(element,count);}private static IEnumerable<TResult>RepeatYield<TResult>(TResult element,int count){for(var i=0;i<count;i++)yield return element;}public static IEnumerable<TSource>Where<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,bool>predicate){CheckNotNull(source,"source");CheckNotNull(predicate,"predicate");return WhereYield(source,predicate);}private static IEnumerable<TSource>WhereYield<TSource>(IEnumerable<TSource>source,Serialization.Func<TSource,bool>predicate){foreach(var item in source)if(predicate(item))yield return item;}public static IEnumerable<TSource>Where<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,int,bool>predicate){CheckNotNull(source,"source");CheckNotNull(predicate,"predicate");return WhereYield(source,predicate);}private static IEnumerable<TSource>WhereYield<TSource>(IEnumerable<TSource>source,Serialization.Func<TSource,int,bool>predicate){var i=0;foreach(var item in source)if(predicate(item,i++))yield return item;}public static IEnumerable<TResult>Select<TSource,TResult>(this IEnumerable<TSource>source,Serialization.Func<TSource,TResult>selector){CheckNotNull(source,"source");CheckNotNull(selector,"selector");return SelectYield(source,selector);}private static IEnumerable<TResult>SelectYield<TSource,TResult>(IEnumerable<TSource>source,Serialization.Func<TSource,TResult>selector){foreach(var item in source)yield return selector(item);}public static IEnumerable<TResult>Select<TSource,TResult>(this IEnumerable<TSource>source,Serialization.Func<TSource,int,TResult>selector){CheckNotNull(source,"source");CheckNotNull(selector,"selector");return SelectYield(source,selector);}private static IEnumerable<TResult>SelectYield<TSource,TResult>(IEnumerable<TSource>source,Serialization.Func<TSource,int,TResult>selector){var i=0;foreach(var item in source)yield return selector(item,i++);}public static IEnumerable<TResult>SelectMany<TSource,TResult>(this IEnumerable<TSource>source,Serialization.Func<TSource,IEnumerable<TResult>>selector){CheckNotNull(selector,"selector");return source.SelectMany((item,i)=>selector(item));}public static IEnumerable<TResult>SelectMany<TSource,TResult>(this IEnumerable<TSource>source,Serialization.Func<TSource,int,IEnumerable<TResult>>selector){CheckNotNull(selector,"selector");return source.SelectMany(selector,(item,subitem)=>subitem);}public static IEnumerable<TResult>SelectMany<TSource,TCollection,TResult>(this IEnumerable<TSource>source,Serialization.Func<TSource,IEnumerable<TCollection>>collectionSelector,Serialization.Func<TSource,TCollection,TResult>resultSelector){CheckNotNull(collectionSelector,"collectionSelector");return source.SelectMany((item,i)=>collectionSelector(item),resultSelector);}public static IEnumerable<TResult>SelectMany<TSource,TCollection,TResult>(this IEnumerable<TSource>source,Serialization.Func<TSource,int,IEnumerable<TCollection>>collectionSelector,Serialization.Func<TSource,TCollection,TResult>resultSelector){CheckNotNull(source,"source");CheckNotNull(collectionSelector,"collectionSelector");CheckNotNull(resultSelector,"resultSelector");return SelectManyYield(source,collectionSelector,resultSelector);}private static IEnumerable<TResult>SelectManyYield<TSource,TCollection,TResult>(this IEnumerable<TSource>source,Serialization.Func<TSource,int,IEnumerable<TCollection>>collectionSelector,Serialization.Func<TSource,TCollection,TResult>resultSelector){var i=0;foreach(var item in source)foreach(var subitem in collectionSelector(item,i++))yield return resultSelector(item,subitem);}public static IEnumerable<TSource>TakeWhile<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,bool>predicate){CheckNotNull(predicate,"predicate");return source.TakeWhile((item,i)=>predicate(item));}public static IEnumerable<TSource>TakeWhile<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,int,bool>predicate){CheckNotNull(source,"source");CheckNotNull(predicate,"predicate");return TakeWhileYield(source,predicate);}private static IEnumerable<TSource>TakeWhileYield<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,int,bool>predicate){var i=0;foreach(var item in source)if(predicate(item,i++))yield return item;else break;}private static class Futures<T>{public static readonly Serialization.Func<T>Default=()=>default(T);public static readonly Serialization.Func<T>Undefined=()=>{throw new InvalidOperationException();};}private static TSource FirstImpl<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource>empty){CheckNotNull(source,"source");MiscellaneousUtils.Assert(empty!=null);var list=source as IList<TSource>;if(list!=null)return list.Count>0?list[0]:empty();using(var e=source.GetEnumerator())return e.MoveNext()?e.Current:empty();}public static TSource First<TSource>(this IEnumerable<TSource>source){return source.FirstImpl(Futures<TSource>.Undefined);}public static TSource First<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,bool>predicate){return First(source.Where(predicate));}public static TSource FirstOrDefault<TSource>(this IEnumerable<TSource>source){return source.FirstImpl(Futures<TSource>.Default);}public static TSource FirstOrDefault<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,bool>predicate){return FirstOrDefault(source.Where(predicate));}private static TSource LastImpl<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource>empty){CheckNotNull(source,"source");var list=source as IList<TSource>;if(list!=null)return list.Count>0?list[list.Count-1]:empty();using(var e=source.GetEnumerator()){if(!e.MoveNext())return empty();var last=e.Current;while(e.MoveNext())last=e.Current;return last;}}public static TSource Last<TSource>(this IEnumerable<TSource>source){return source.LastImpl(Futures<TSource>.Undefined);}public static TSource Last<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,bool>predicate){return Last(source.Where(predicate));}public static TSource LastOrDefault<TSource>(this IEnumerable<TSource>source){return source.LastImpl(Futures<TSource>.Default);}public static TSource LastOrDefault<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,bool>predicate){return LastOrDefault(source.Where(predicate));}private static TSource SingleImpl<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource>empty){CheckNotNull(source,"source");using(var e=source.GetEnumerator()){if(e.MoveNext()){var single=e.Current;if(!e.MoveNext())return single;throw new InvalidOperationException();}return empty();}}public static TSource Single<TSource>(this IEnumerable<TSource>source){return source.SingleImpl(Futures<TSource>.Undefined);}public static TSource Single<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,bool>predicate){return Single(source.Where(predicate));}public static TSource SingleOrDefault<TSource>(this IEnumerable<TSource>source){return source.SingleImpl(Futures<TSource>.Default);}public static TSource SingleOrDefault<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,bool>predicate){return SingleOrDefault(source.Where(predicate));}public static TSource ElementAt<TSource>(this IEnumerable<TSource>source,int index){CheckNotNull(source,"source");if(index<0)throw new ArgumentOutOfRangeException("index",index,null);var list=source as IList<TSource>;if(list!=null)return list[index];try{return source.SkipWhile((item,i)=>i<index).First();}catch(InvalidOperationException){throw new ArgumentOutOfRangeException("index",index,null);}}public static TSource ElementAtOrDefault<TSource>(this IEnumerable<TSource>source,int index){CheckNotNull(source,"source");if(index<0)return default(TSource);var list=source as IList<TSource>;if(list!=null)return index<list.Count?list[index]:default(TSource);return source.SkipWhile((item,i)=>i<index).FirstOrDefault();}public static IEnumerable<TSource>Reverse<TSource>(this IEnumerable<TSource>source){CheckNotNull(source,"source");return ReverseYield(source);}private static IEnumerable<TSource>ReverseYield<TSource>(IEnumerable<TSource>source){var stack=new Stack<TSource>(source);foreach(var item in stack)yield return item;}public static IEnumerable<TSource>Take<TSource>(this IEnumerable<TSource>source,int count){return source.Where((item,i)=>i<count);}public static IEnumerable<TSource>Skip<TSource>(this IEnumerable<TSource>source,int count){return source.Where((item,i)=>i>=count);}public static IEnumerable<TSource>SkipWhile<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,bool>predicate){CheckNotNull(predicate,"predicate");return source.SkipWhile((item,i)=>predicate(item));}public static IEnumerable<TSource>SkipWhile<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,int,bool>predicate){CheckNotNull(source,"source");CheckNotNull(predicate,"predicate");return SkipWhileYield(source,predicate);}private static IEnumerable<TSource>SkipWhileYield<TSource>(IEnumerable<TSource>source,Serialization.Func<TSource,int,bool>predicate){using(var e=source.GetEnumerator()){for(var i=0;;i++){if(!e.MoveNext())yield break;if(!predicate(e.Current,i))break;}do{yield return e.Current;}while(e.MoveNext());}}public static int Count<TSource>(this IEnumerable<TSource>source){CheckNotNull(source,"source");var collection=source as ICollection;if(collection!=null){return collection.Count;}using(var en=source.GetEnumerator()){int count=0;while(en.MoveNext()){++count;}return count;}}public static int Count<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,bool>predicate){return Count(source.Where(predicate));}public static long LongCount<TSource>(this IEnumerable<TSource>source){CheckNotNull(source,"source");var array=source as Array;return array!=null?array.LongLength:source.Aggregate(0L,(count,item)=>count+1);}public static long LongCount<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,bool>predicate){return LongCount(source.Where(predicate));}public static IEnumerable<TSource>Concat<TSource>(this IEnumerable<TSource>first,IEnumerable<TSource>second){CheckNotNull(first,"first");CheckNotNull(second,"second");return ConcatYield(first,second);}private static IEnumerable<TSource>ConcatYield<TSource>(IEnumerable<TSource>first,IEnumerable<TSource>second){foreach(var item in first)yield return item;foreach(var item in second)yield return item;}public static List<TSource>ToList<TSource>(this IEnumerable<TSource>source){CheckNotNull(source,"source");return new List<TSource>(source);}public static TSource[]ToArray<TSource>(this IEnumerable<TSource>source){IList<TSource>ilist=source as IList<TSource>;if(ilist!=null){TSource[]array=new TSource[ilist.Count];ilist.CopyTo(array,0);return array;}return source.ToList().ToArray();}public static IEnumerable<TSource>Distinct<TSource>(this IEnumerable<TSource>source){return Distinct(source,null);}public static IEnumerable<TSource>Distinct<TSource>(this IEnumerable<TSource>source,IEqualityComparer<TSource>comparer){CheckNotNull(source,"source");return DistinctYield(source,comparer);}private static IEnumerable<TSource>DistinctYield<TSource>(IEnumerable<TSource>source,IEqualityComparer<TSource>comparer){var set=new Dictionary<TSource,object>(comparer);var gotNull=false;foreach(var item in source){if(item==null){if(gotNull)continue;gotNull=true;}else{if(set.ContainsKey(item))continue;set.Add(item,null);}yield return item;}}public static ILookup<TKey,TSource>ToLookup<TSource,TKey>(this IEnumerable<TSource>source,Serialization.Func<TSource,TKey>keySelector){return ToLookup(source,keySelector,e=>e,null);}public static ILookup<TKey,TSource>ToLookup<TSource,TKey>(this IEnumerable<TSource>source,Serialization.Func<TSource,TKey>keySelector,IEqualityComparer<TKey>comparer){return ToLookup(source,keySelector,e=>e,comparer);}public static ILookup<TKey,TElement>ToLookup<TSource,TKey,TElement>(this IEnumerable<TSource>source,Serialization.Func<TSource,TKey>keySelector,Serialization.Func<TSource,TElement>elementSelector){return ToLookup(source,keySelector,elementSelector,null);}public static ILookup<TKey,TElement>ToLookup<TSource,TKey,TElement>(this IEnumerable<TSource>source,Serialization.Func<TSource,TKey>keySelector,Serialization.Func<TSource,TElement>elementSelector,IEqualityComparer<TKey>comparer){CheckNotNull(source,"source");CheckNotNull(keySelector,"keySelector");CheckNotNull(elementSelector,"elementSelector");var lookup=new Lookup<TKey,TElement>(comparer);foreach(var item in source){var key=keySelector(item);var grouping=(Grouping<TKey,TElement>)lookup.Find(key);if(grouping==null){grouping=new Grouping<TKey,TElement>(key);lookup.Add(grouping);}grouping.Add(elementSelector(item));}return lookup;}public static IEnumerable<IGrouping<TKey,TSource>>GroupBy<TSource,TKey>(this IEnumerable<TSource>source,Serialization.Func<TSource,TKey>keySelector){return GroupBy(source,keySelector,null);}public static IEnumerable<IGrouping<TKey,TSource>>GroupBy<TSource,TKey>(this IEnumerable<TSource>source,Serialization.Func<TSource,TKey>keySelector,IEqualityComparer<TKey>comparer){return GroupBy(source,keySelector,e=>e,comparer);}public static IEnumerable<IGrouping<TKey,TElement>>GroupBy<TSource,TKey,TElement>(this IEnumerable<TSource>source,Serialization.Func<TSource,TKey>keySelector,Serialization.Func<TSource,TElement>elementSelector){return GroupBy(source,keySelector,elementSelector,null);}public static IEnumerable<IGrouping<TKey,TElement>>GroupBy<TSource,TKey,TElement>(this IEnumerable<TSource>source,Serialization.Func<TSource,TKey>keySelector,Serialization.Func<TSource,TElement>elementSelector,IEqualityComparer<TKey>comparer){CheckNotNull(source,"source");CheckNotNull(keySelector,"keySelector");CheckNotNull(elementSelector,"elementSelector");return ToLookup(source,keySelector,elementSelector,comparer);}public static IEnumerable<TResult>GroupBy<TSource,TKey,TResult>(this IEnumerable<TSource>source,Serialization.Func<TSource,TKey>keySelector,Serialization.Func<TKey,IEnumerable<TSource>,TResult>resultSelector){return GroupBy(source,keySelector,resultSelector,null);}public static IEnumerable<TResult>GroupBy<TSource,TKey,TResult>(this IEnumerable<TSource>source,Serialization.Func<TSource,TKey>keySelector,Serialization.Func<TKey,IEnumerable<TSource>,TResult>resultSelector,IEqualityComparer<TKey>comparer){CheckNotNull(source,"source");CheckNotNull(keySelector,"keySelector");CheckNotNull(resultSelector,"resultSelector");return ToLookup(source,keySelector,comparer).Select(g=>resultSelector(g.Key,g));}public static IEnumerable<TResult>GroupBy<TSource,TKey,TElement,TResult>(this IEnumerable<TSource>source,Serialization.Func<TSource,TKey>keySelector,Serialization.Func<TSource,TElement>elementSelector,Serialization.Func<TKey,IEnumerable<TElement>,TResult>resultSelector){return GroupBy(source,keySelector,elementSelector,resultSelector,null);}public static IEnumerable<TResult>GroupBy<TSource,TKey,TElement,TResult>(this IEnumerable<TSource>source,Serialization.Func<TSource,TKey>keySelector,Serialization.Func<TSource,TElement>elementSelector,Serialization.Func<TKey,IEnumerable<TElement>,TResult>resultSelector,IEqualityComparer<TKey>comparer){CheckNotNull(source,"source");CheckNotNull(keySelector,"keySelector");CheckNotNull(elementSelector,"elementSelector");CheckNotNull(resultSelector,"resultSelector");return ToLookup(source,keySelector,elementSelector,comparer).Select(g=>resultSelector(g.Key,g));}public static TSource Aggregate<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,TSource,TSource>func){CheckNotNull(source,"source");CheckNotNull(func,"func");using(var e=source.GetEnumerator()){if(!e.MoveNext())throw new InvalidOperationException();return e.Renumerable().Skip(1).Aggregate(e.Current,func);}}public static TAccumulate Aggregate<TSource,TAccumulate>(this IEnumerable<TSource>source,TAccumulate seed,Serialization.Func<TAccumulate,TSource,TAccumulate>func){return Aggregate(source,seed,func,r=>r);}public static TResult Aggregate<TSource,TAccumulate,TResult>(this IEnumerable<TSource>source,TAccumulate seed,Serialization.Func<TAccumulate,TSource,TAccumulate>func,Serialization.Func<TAccumulate,TResult>resultSelector){CheckNotNull(source,"source");CheckNotNull(func,"func");CheckNotNull(resultSelector,"resultSelector");var result=seed;foreach(var item in source)result=func(result,item);return resultSelector(result);}public static IEnumerable<TSource>Union<TSource>(this IEnumerable<TSource>first,IEnumerable<TSource>second){return Union(first,second,null);}public static IEnumerable<TSource>Union<TSource>(this IEnumerable<TSource>first,IEnumerable<TSource>second,IEqualityComparer<TSource>comparer){return first.Concat(second).Distinct(comparer);}public static IEnumerable<TSource>DefaultIfEmpty<TSource>(this IEnumerable<TSource>source){return source.DefaultIfEmpty(default(TSource));}public static IEnumerable<TSource>DefaultIfEmpty<TSource>(this IEnumerable<TSource>source,TSource defaultValue){CheckNotNull(source,"source");return DefaultIfEmptyYield(source,defaultValue);}private static IEnumerable<TSource>DefaultIfEmptyYield<TSource>(IEnumerable<TSource>source,TSource defaultValue){using(var e=source.GetEnumerator()){if(!e.MoveNext())yield return defaultValue;else do{yield return e.Current;}while(e.MoveNext());}}public static bool All<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,bool>predicate){CheckNotNull(source,"source");CheckNotNull(predicate,"predicate");foreach(var item in source)if(!predicate(item))return false;return true;}public static bool Any<TSource>(this IEnumerable<TSource>source){CheckNotNull(source,"source");using(var e=source.GetEnumerator())return e.MoveNext();}public static bool Any<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,bool>predicate){foreach(TSource item in source){if(predicate(item)){return true;}}return false;}public static bool Contains<TSource>(this IEnumerable<TSource>source,TSource value){return source.Contains(value,null);}public static bool Contains<TSource>(this IEnumerable<TSource>source,TSource value,IEqualityComparer<TSource>comparer){CheckNotNull(source,"source");if(comparer==null){var collection=source as ICollection<TSource>;if(collection!=null)return collection.Contains(value);}comparer=comparer??EqualityComparer<TSource>.Default;return source.Any(item=>comparer.Equals(item,value));}public static bool SequenceEqual<TSource>(this IEnumerable<TSource>first,IEnumerable<TSource>second){return first.SequenceEqual(second,null);}public static bool SequenceEqual<TSource>(this IEnumerable<TSource>first,IEnumerable<TSource>second,IEqualityComparer<TSource>comparer){CheckNotNull(first,"first");CheckNotNull(second,"second");comparer=comparer??EqualityComparer<TSource>.Default;using(IEnumerator<TSource>lhs=first.GetEnumerator(),rhs=second.GetEnumerator()){do{if(!lhs.MoveNext())return!rhs.MoveNext();if(!rhs.MoveNext())return false;}while(comparer.Equals(lhs.Current,rhs.Current));}return false;}private static TSource MinMaxImpl<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,TSource,bool>lesser){CheckNotNull(source,"source");MiscellaneousUtils.Assert(lesser!=null);return source.Aggregate((a,item)=>lesser(a,item)?a:item);}private static TSource?MinMaxImpl<TSource>(this IEnumerable<TSource?>source,TSource?seed,Serialization.Func<TSource?,TSource?,bool>lesser)where TSource:struct{CheckNotNull(source,"source");MiscellaneousUtils.Assert(lesser!=null);return source.Aggregate(seed,(a,item)=>lesser(a,item)?a:item);}public static TSource Min<TSource>(this IEnumerable<TSource>source){var comparer=Comparer<TSource>.Default;return source.MinMaxImpl((x,y)=>comparer.Compare(x,y)<0);}public static TResult Min<TSource,TResult>(this IEnumerable<TSource>source,Serialization.Func<TSource,TResult>selector){return source.Select(selector).Min();}public static TSource Max<TSource>(this IEnumerable<TSource>source){var comparer=Comparer<TSource>.Default;return source.MinMaxImpl((x,y)=>comparer.Compare(x,y)>0);}public static TResult Max<TSource,TResult>(this IEnumerable<TSource>source,Serialization.Func<TSource,TResult>selector){return source.Select(selector).Max();}private static IEnumerable<T>Renumerable<T>(this IEnumerator<T>e){MiscellaneousUtils.Assert(e!=null);do{yield return e.Current;}while(e.MoveNext());}public static IOrderedEnumerable<TSource>OrderBy<TSource,TKey>(this IEnumerable<TSource>source,Serialization.Func<TSource,TKey>keySelector){return source.OrderBy(keySelector,null);}public static IOrderedEnumerable<TSource>OrderBy<TSource,TKey>(this IEnumerable<TSource>source,Serialization.Func<TSource,TKey>keySelector,IComparer<TKey>comparer){CheckNotNull(source,"source");CheckNotNull(keySelector,"keySelector");return new OrderedEnumerable<TSource,TKey>(source,keySelector,comparer,false);}public static IOrderedEnumerable<TSource>OrderByDescending<TSource,TKey>(this IEnumerable<TSource>source,Serialization.Func<TSource,TKey>keySelector){return source.OrderByDescending(keySelector,null);}public static IOrderedEnumerable<TSource>OrderByDescending<TSource,TKey>(this IEnumerable<TSource>source,Serialization.Func<TSource,TKey>keySelector,IComparer<TKey>comparer){CheckNotNull(source,"source");CheckNotNull(source,"keySelector");return new OrderedEnumerable<TSource,TKey>(source,keySelector,comparer,true);}public static IOrderedEnumerable<TSource>ThenBy<TSource,TKey>(this IOrderedEnumerable<TSource>source,Serialization.Func<TSource,TKey>keySelector){return source.ThenBy(keySelector,null);}public static IOrderedEnumerable<TSource>ThenBy<TSource,TKey>(this IOrderedEnumerable<TSource>source,Serialization.Func<TSource,TKey>keySelector,IComparer<TKey>comparer){CheckNotNull(source,"source");return source.CreateOrderedEnumerable(keySelector,comparer,false);}public static IOrderedEnumerable<TSource>ThenByDescending<TSource,TKey>(this IOrderedEnumerable<TSource>source,Serialization.Func<TSource,TKey>keySelector){return source.ThenByDescending(keySelector,null);}public static IOrderedEnumerable<TSource>ThenByDescending<TSource,TKey>(this IOrderedEnumerable<TSource>source,Serialization.Func<TSource,TKey>keySelector,IComparer<TKey>comparer){CheckNotNull(source,"source");return source.CreateOrderedEnumerable(keySelector,comparer,true);}private static IEnumerable<TSource>IntersectExceptImpl<TSource>(this IEnumerable<TSource>first,IEnumerable<TSource>second,IEqualityComparer<TSource>comparer,bool flag){CheckNotNull(first,"first");CheckNotNull(second,"second");var keys=new List<TSource>();var flags=new Dictionary<TSource,bool>(comparer);foreach(var item in first.Where(k=>!flags.ContainsKey(k))){flags.Add(item,!flag);keys.Add(item);}foreach(var item in second.Where(flags.ContainsKey))flags[item]=flag;return keys.Where(item=>flags[item]);}public static IEnumerable<TSource>Intersect<TSource>(this IEnumerable<TSource>first,IEnumerable<TSource>second){return first.Intersect(second,null);}public static IEnumerable<TSource>Intersect<TSource>(this IEnumerable<TSource>first,IEnumerable<TSource>second,IEqualityComparer<TSource>comparer){return IntersectExceptImpl(first,second,comparer,true);}public static IEnumerable<TSource>Except<TSource>(this IEnumerable<TSource>first,IEnumerable<TSource>second){return first.Except(second,null);}public static IEnumerable<TSource>Except<TSource>(this IEnumerable<TSource>first,IEnumerable<TSource>second,IEqualityComparer<TSource>comparer){return IntersectExceptImpl(first,second,comparer,false);}public static Dictionary<TKey,TSource>ToDictionary<TSource,TKey>(this IEnumerable<TSource>source,Serialization.Func<TSource,TKey>keySelector){return source.ToDictionary(keySelector,null);}public static Dictionary<TKey,TSource>ToDictionary<TSource,TKey>(this IEnumerable<TSource>source,Serialization.Func<TSource,TKey>keySelector,IEqualityComparer<TKey>comparer){return source.ToDictionary(keySelector,e=>e);}public static Dictionary<TKey,TElement>ToDictionary<TSource,TKey,TElement>(this IEnumerable<TSource>source,Serialization.Func<TSource,TKey>keySelector,Serialization.Func<TSource,TElement>elementSelector){return source.ToDictionary(keySelector,elementSelector,null);}public static Dictionary<TKey,TElement>ToDictionary<TSource,TKey,TElement>(this IEnumerable<TSource>source,Serialization.Func<TSource,TKey>keySelector,Serialization.Func<TSource,TElement>elementSelector,IEqualityComparer<TKey>comparer){CheckNotNull(source,"source");CheckNotNull(keySelector,"keySelector");CheckNotNull(elementSelector,"elementSelector");var dict=new Dictionary<TKey,TElement>(comparer);foreach(var item in source){dict.Add(keySelector(item),elementSelector(item));}return dict;}public static IEnumerable<TResult>Join<TOuter,TInner,TKey,TResult>(this IEnumerable<TOuter>outer,IEnumerable<TInner>inner,Serialization.Func<TOuter,TKey>outerKeySelector,Serialization.Func<TInner,TKey>innerKeySelector,Serialization.Func<TOuter,TInner,TResult>resultSelector){return outer.Join(inner,outerKeySelector,innerKeySelector,resultSelector,null);}public static IEnumerable<TResult>Join<TOuter,TInner,TKey,TResult>(this IEnumerable<TOuter>outer,IEnumerable<TInner>inner,Serialization.Func<TOuter,TKey>outerKeySelector,Serialization.Func<TInner,TKey>innerKeySelector,Serialization.Func<TOuter,TInner,TResult>resultSelector,IEqualityComparer<TKey>comparer){CheckNotNull(outer,"outer");CheckNotNull(inner,"inner");CheckNotNull(outerKeySelector,"outerKeySelector");CheckNotNull(innerKeySelector,"innerKeySelector");CheckNotNull(resultSelector,"resultSelector");var lookup=inner.ToLookup(innerKeySelector,comparer);return from o in outer from i in lookup[outerKeySelector(o)]select resultSelector(o,i);}public static IEnumerable<TResult>GroupJoin<TOuter,TInner,TKey,TResult>(this IEnumerable<TOuter>outer,IEnumerable<TInner>inner,Serialization.Func<TOuter,TKey>outerKeySelector,Serialization.Func<TInner,TKey>innerKeySelector,Serialization.Func<TOuter,IEnumerable<TInner>,TResult>resultSelector){return outer.GroupJoin(inner,outerKeySelector,innerKeySelector,resultSelector,null);}public static IEnumerable<TResult>GroupJoin<TOuter,TInner,TKey,TResult>(this IEnumerable<TOuter>outer,IEnumerable<TInner>inner,Serialization.Func<TOuter,TKey>outerKeySelector,Serialization.Func<TInner,TKey>innerKeySelector,Serialization.Func<TOuter,IEnumerable<TInner>,TResult>resultSelector,IEqualityComparer<TKey>comparer){CheckNotNull(outer,"outer");CheckNotNull(inner,"inner");CheckNotNull(outerKeySelector,"outerKeySelector");CheckNotNull(innerKeySelector,"innerKeySelector");CheckNotNull(resultSelector,"resultSelector");var lookup=inner.ToLookup(innerKeySelector,comparer);return outer.Select(o=>resultSelector(o,lookup[outerKeySelector(o)]));}[DebuggerStepThrough]private static void CheckNotNull<T>(T value,string name)where T:class{if(value==null)throw new ArgumentNullException(name);}private static class Sequence<T>{public static readonly IEnumerable<T>Empty=new T[0];}private sealed class Grouping<K,V>:List<V>,IGrouping<K,V>{internal Grouping(K key){Key=key;}public K Key{get;private set;}}}internal partial class Enumerable{public static int Sum(this IEnumerable<int>source){CheckNotNull(source,"source");int sum=0;foreach(var num in source)sum=checked(sum+num);return sum;}public static int Sum<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,int>selector){return source.Select(selector).Sum();}public static double Average(this IEnumerable<int>source){CheckNotNull(source,"source");long sum=0;long count=0;foreach(var num in source)checked{sum+=(int)num;count++;}if(count==0)throw new InvalidOperationException();return(double)sum/count;}public static double Average<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,int>selector){return source.Select(selector).Average();}public static int?Sum(this IEnumerable<int?>source){CheckNotNull(source,"source");int sum=0;foreach(var num in source)sum=checked(sum+(num??0));return sum;}public static int?Sum<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,int?>selector){return source.Select(selector).Sum();}public static double?Average(this IEnumerable<int?>source){CheckNotNull(source,"source");long sum=0;long count=0;foreach(var num in source.Where(n=>n!=null))checked{sum+=(int)num;count++;}if(count==0)return null;return(double?)sum/count;}public static double?Average<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,int?>selector){return source.Select(selector).Average();}public static int?Min(this IEnumerable<int?>source){CheckNotNull(source,"source");return MinMaxImpl(source.Where(x=>x!=null),null,(min,x)=>min<x);}public static int?Min<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,int?>selector){return source.Select(selector).Min();}public static int?Max(this IEnumerable<int?>source){CheckNotNull(source,"source");return MinMaxImpl(source.Where(x=>x!=null),null,(max,x)=>x==null||(max!=null&&x.Value<max.Value));}public static int?Max<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,int?>selector){return source.Select(selector).Max();}public static long Sum(this IEnumerable<long>source){CheckNotNull(source,"source");long sum=0;foreach(var num in source)sum=checked(sum+num);return sum;}public static long Sum<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,long>selector){return source.Select(selector).Sum();}public static double Average(this IEnumerable<long>source){CheckNotNull(source,"source");long sum=0;long count=0;foreach(var num in source)checked{sum+=(long)num;count++;}if(count==0)throw new InvalidOperationException();return(double)sum/count;}public static double Average<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,long>selector){return source.Select(selector).Average();}public static long?Sum(this IEnumerable<long?>source){CheckNotNull(source,"source");long sum=0;foreach(var num in source)sum=checked(sum+(num??0));return sum;}public static long?Sum<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,long?>selector){return source.Select(selector).Sum();}public static double?Average(this IEnumerable<long?>source){CheckNotNull(source,"source");long sum=0;long count=0;foreach(var num in source.Where(n=>n!=null))checked{sum+=(long)num;count++;}if(count==0)return null;return(double?)sum/count;}public static double?Average<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,long?>selector){return source.Select(selector).Average();}public static long?Min(this IEnumerable<long?>source){CheckNotNull(source,"source");return MinMaxImpl(source.Where(x=>x!=null),null,(min,x)=>min<x);}public static long?Min<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,long?>selector){return source.Select(selector).Min();}public static long?Max(this IEnumerable<long?>source){CheckNotNull(source,"source");return MinMaxImpl(source.Where(x=>x!=null),null,(max,x)=>x==null||(max!=null&&x.Value<max.Value));}public static long?Max<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,long?>selector){return source.Select(selector).Max();}public static float Sum(this IEnumerable<float>source){CheckNotNull(source,"source");float sum=0;foreach(var num in source)sum=checked(sum+num);return sum;}public static float Sum<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,float>selector){return source.Select(selector).Sum();}public static float Average(this IEnumerable<float>source){CheckNotNull(source,"source");float sum=0;long count=0;foreach(var num in source)checked{sum+=(float)num;count++;}if(count==0)throw new InvalidOperationException();return(float)sum/count;}public static float Average<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,float>selector){return source.Select(selector).Average();}public static float?Sum(this IEnumerable<float?>source){CheckNotNull(source,"source");float sum=0;foreach(var num in source)sum=checked(sum+(num??0));return sum;}public static float?Sum<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,float?>selector){return source.Select(selector).Sum();}public static float?Average(this IEnumerable<float?>source){CheckNotNull(source,"source");float sum=0;long count=0;foreach(var num in source.Where(n=>n!=null))checked{sum+=(float)num;count++;}if(count==0)return null;return(float?)sum/count;}public static float?Average<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,float?>selector){return source.Select(selector).Average();}public static float?Min(this IEnumerable<float?>source){CheckNotNull(source,"source");return MinMaxImpl(source.Where(x=>x!=null),null,(min,x)=>min<x);}public static float?Min<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,float?>selector){return source.Select(selector).Min();}public static float?Max(this IEnumerable<float?>source){CheckNotNull(source,"source");return MinMaxImpl(source.Where(x=>x!=null),null,(max,x)=>x==null||(max!=null&&x.Value<max.Value));}public static float?Max<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,float?>selector){return source.Select(selector).Max();}public static double Sum(this IEnumerable<double>source){CheckNotNull(source,"source");double sum=0;foreach(var num in source)sum=checked(sum+num);return sum;}public static double Sum<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,double>selector){return source.Select(selector).Sum();}public static double Average(this IEnumerable<double>source){CheckNotNull(source,"source");double sum=0;long count=0;foreach(var num in source)checked{sum+=(double)num;count++;}if(count==0)throw new InvalidOperationException();return(double)sum/count;}public static double Average<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,double>selector){return source.Select(selector).Average();}public static double?Sum(this IEnumerable<double?>source){CheckNotNull(source,"source");double sum=0;foreach(var num in source)sum=checked(sum+(num??0));return sum;}public static double?Sum<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,double?>selector){return source.Select(selector).Sum();}public static double?Average(this IEnumerable<double?>source){CheckNotNull(source,"source");double sum=0;long count=0;foreach(var num in source.Where(n=>n!=null))checked{sum+=(double)num;count++;}if(count==0)return null;return(double?)sum/count;}public static double?Average<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,double?>selector){return source.Select(selector).Average();}public static double?Min(this IEnumerable<double?>source){CheckNotNull(source,"source");return MinMaxImpl(source.Where(x=>x!=null),null,(min,x)=>min<x);}public static double?Min<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,double?>selector){return source.Select(selector).Min();}public static double?Max(this IEnumerable<double?>source){CheckNotNull(source,"source");return MinMaxImpl(source.Where(x=>x!=null),null,(max,x)=>x==null||(max!=null&&x.Value<max.Value));}public static double?Max<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,double?>selector){return source.Select(selector).Max();}public static decimal Sum(this IEnumerable<decimal>source){CheckNotNull(source,"source");decimal sum=0;foreach(var num in source)sum=checked(sum+num);return sum;}public static decimal Sum<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,decimal>selector){CheckNotNull(source,"source");CheckNotNull(selector,"selector");decimal sum=0;foreach(TSource item in source){sum+=selector(item);}return sum;}public static decimal Average(this IEnumerable<decimal>source){CheckNotNull(source,"source");decimal sum=0;long count=0;foreach(var num in source)checked{sum+=(decimal)num;count++;}if(count==0)throw new InvalidOperationException();return(decimal)sum/count;}public static decimal Average<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,decimal>selector){return source.Select(selector).Average();}public static decimal?Sum(this IEnumerable<decimal?>source){CheckNotNull(source,"source");decimal sum=0;foreach(var num in source)sum=checked(sum+(num??0));return sum;}public static decimal?Sum<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,decimal?>selector){return source.Select(selector).Sum();}public static decimal?Average(this IEnumerable<decimal?>source){CheckNotNull(source,"source");decimal sum=0;long count=0;foreach(var num in source.Where(n=>n!=null))checked{sum+=(decimal)num;count++;}if(count==0)return null;return(decimal?)sum/count;}public static decimal?Average<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,decimal?>selector){return source.Select(selector).Average();}public static decimal?Min(this IEnumerable<decimal?>source){CheckNotNull(source,"source");return MinMaxImpl(source.Where(x=>x!=null),null,(min,x)=>min<x);}public static decimal?Min<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,decimal?>selector){return source.Select(selector).Min();}public static decimal?Max(this IEnumerable<decimal?>source){CheckNotNull(source,"source");return MinMaxImpl(source.Where(x=>x!=null),null,(max,x)=>x==null||(max!=null&&x.Value<max.Value));}public static decimal?Max<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,decimal?>selector){return source.Select(selector).Max();}}internal partial interface IGrouping<TKey,TElement>:IEnumerable<TElement>{TKey Key{get;}}internal partial interface ILookup<TKey,TElement>:IEnumerable<IGrouping<TKey,TElement>>{bool Contains(TKey key);int Count{get;}IEnumerable<TElement>this[TKey key]{get;}}internal partial interface IOrderedEnumerable<TElement>:IEnumerable<TElement>{IOrderedEnumerable<TElement>CreateOrderedEnumerable<TKey>(Serialization.Func<TElement,TKey>keySelector,IComparer<TKey>comparer,bool descending);}internal sealed class Lookup<TKey,TElement>:ILookup<TKey,TElement>{private readonly Dictionary<TKey,IGrouping<TKey,TElement>>_map;internal Lookup(IEqualityComparer<TKey>comparer){_map=new Dictionary<TKey,IGrouping<TKey,TElement>>(comparer);}internal void Add(IGrouping<TKey,TElement>item){_map.Add(item.Key,item);}internal IEnumerable<TElement>Find(TKey key){IGrouping<TKey,TElement>grouping;return _map.TryGetValue(key,out grouping)?grouping:null;}public int Count=>_map.Count;public IEnumerable<TElement>this[TKey key]{get{IGrouping<TKey,TElement>result;return _map.TryGetValue(key,out result)?result:Enumerable.Empty<TElement>();}}public bool Contains(TKey key){return _map.ContainsKey(key);}public IEnumerable<TResult>ApplyResultSelector<TResult>(Serialization.Func<TKey,IEnumerable<TElement>,TResult>resultSelector){if(resultSelector==null)throw new ArgumentNullException("resultSelector");foreach(var pair in _map)yield return resultSelector(pair.Key,pair.Value);}public IEnumerator<IGrouping<TKey,TElement>>GetEnumerator(){return _map.Values.GetEnumerator();}IEnumerator IEnumerable.GetEnumerator(){return GetEnumerator();}}internal sealed class OrderedEnumerable<T,K>:IOrderedEnumerable<T>{private readonly IEnumerable<T>_source;private readonly List<Comparison<T>>_comparisons;public OrderedEnumerable(IEnumerable<T>source,Serialization.Func<T,K>keySelector,IComparer<K>comparer,bool descending):this(source,null,keySelector,comparer,descending){}private OrderedEnumerable(IEnumerable<T>source,List<Comparison<T>>comparisons,Serialization.Func<T,K>keySelector,IComparer<K>comparer,bool descending){if(source==null)throw new ArgumentNullException("source");if(keySelector==null)throw new ArgumentNullException("keySelector");_source=source;comparer=comparer??Comparer<K>.Default;if(comparisons==null)comparisons=new List<Comparison<T>>(4);comparisons.Add((x,y)=>(descending?-1:1)*comparer.Compare(keySelector(x),keySelector(y)));_comparisons=comparisons;}public IOrderedEnumerable<T>CreateOrderedEnumerable<KK>(Serialization.Func<T,KK>keySelector,IComparer<KK>comparer,bool descending){return new OrderedEnumerable<T,KK>(_source,_comparisons,keySelector,comparer,descending);}public IEnumerator<T>GetEnumerator(){var list=_source.Select(new Serialization.Func<T,int,Tuple<T,int>>(TagPosition)).ToList();list.Sort((x,y)=>{var comparisons=_comparisons;for(var i=0;i<comparisons.Count;i++){var result=comparisons[i](x.First,y.First);if(result!=0)return result;}return x.Second.CompareTo(y.Second);});return list.Select(new Serialization.Func<Tuple<T,int>,T>(GetFirst)).GetEnumerator();}private static Tuple<T,int>TagPosition(T e,int i){return new Tuple<T,int>(e,i);}private static T GetFirst(Tuple<T,int>pv){return pv.First;}IEnumerator IEnumerable.GetEnumerator(){return GetEnumerator();}}[Serializable]internal readonly struct Tuple<TFirst,TSecond>:IEquatable<Tuple<TFirst,TSecond>>{public TFirst First{get;}public TSecond Second{get;}public Tuple(TFirst first,TSecond second):this(){First=first;Second=second;}public override bool Equals(object obj){return obj!=null&&obj is Tuple<TFirst,TSecond>&&base.Equals((Tuple<TFirst,TSecond>)obj);}public bool Equals(Tuple<TFirst,TSecond>other){return EqualityComparer<TFirst>.Default.Equals(other.First,First)&&EqualityComparer<TSecond>.Default.Equals(other.Second,Second);}public override int GetHashCode(){var num=0x7a2f0b42;num=(-1521134295*num)+EqualityComparer<TFirst>.Default.GetHashCode(First);return(-1521134295*num)+EqualityComparer<TSecond>.Default.GetHashCode(Second);}public override string ToString(){return string.Format(CultureInfo.InvariantCulture,@"{{ First = {0}, Second = {1} }}",First,Second);}}}namespace Newtonsoft.Json.Serialization{
public delegate TResult Func<TResult>();public delegate TResult Func<T,TResult>(T a);public delegate TResult Func<T1,T2,TResult>(T1 arg1,T2 arg2);public delegate TResult Func<T1,T2,T3,TResult>(T1 arg1,T2 arg2,T3 arg3);public delegate TResult Func<T1,T2,T3,T4,TResult>(T1 arg1,T2 arg2,T3 arg3,T4 arg4);public delegate void Action();public delegate void Action<T1,T2>(T1 arg1,T2 arg2);public delegate void Action<T1,T2,T3>(T1 arg1,T2 arg2,T3 arg3);public delegate void Action<T1,T2,T3,T4>(T1 arg1,T2 arg2,T3 arg3,T4 arg4);
}namespace System.Runtime.CompilerServices{[AttributeUsage(AttributeTargets.Method|AttributeTargets.Class|AttributeTargets.Assembly)]internal sealed class ExtensionAttribute:Attribute{}}
namespace Newtonsoft.Json.Linq{public static class Extensions{public static IJEnumerable<JToken>Ancestors<T>(this IEnumerable<T>source)where T:JToken{ValidationUtils.ArgumentNotNull(source,nameof(source));return source.SelectMany(j=>j.Ancestors()).AsJEnumerable();}public static IJEnumerable<JToken>AncestorsAndSelf<T>(this IEnumerable<T>source)where T:JToken{ValidationUtils.ArgumentNotNull(source,nameof(source));return source.SelectMany(j=>j.AncestorsAndSelf()).AsJEnumerable();}public static IJEnumerable<JToken>Descendants<T>(this IEnumerable<T>source)where T:JContainer{ValidationUtils.ArgumentNotNull(source,nameof(source));return source.SelectMany(j=>j.Descendants()).AsJEnumerable();}public static IJEnumerable<JToken>DescendantsAndSelf<T>(this IEnumerable<T>source)where T:JContainer{ValidationUtils.ArgumentNotNull(source,nameof(source));return source.SelectMany(j=>j.DescendantsAndSelf()).AsJEnumerable();}public static IJEnumerable<JProperty>Properties(this IEnumerable<JObject>source){ValidationUtils.ArgumentNotNull(source,nameof(source));return source.SelectMany(d=>d.Properties()).AsJEnumerable();}public static IJEnumerable<JToken>Values(this IEnumerable<JToken>source,object?key){return Values<JToken,JToken>(source,key)!.AsJEnumerable();}public static IJEnumerable<JToken>Values(this IEnumerable<JToken>source){return source.Values(null);}public static IEnumerable<U?>Values<U>(this IEnumerable<JToken>source,object key){return Values<JToken,U>(source,key);}public static IEnumerable<U?>Values<U>(this IEnumerable<JToken>source){return Values<JToken,U>(source,null);}public static U?Value<U>(this IEnumerable<JToken>value){return value.Value<JToken,U>();}public static U?Value<T,U>(this IEnumerable<T>value)where T:JToken{ValidationUtils.ArgumentNotNull(value,nameof(value));if(!(value is JToken token)){throw new ArgumentException("Source value must be a JToken.");}return token.Convert<JToken,U>();}internal static IEnumerable<U?>Values<T,U>(this IEnumerable<T>source,object?key)where T:JToken{ValidationUtils.ArgumentNotNull(source,nameof(source));if(key==null){foreach(T token in source){if(token is JValue value){yield return Convert<JValue,U>(value);}else{foreach(JToken t in token.Children()){yield return t.Convert<JToken,U>();}}}}else{foreach(T token in source){JToken?value=token[key];if(value!=null){yield return value.Convert<JToken,U>();}}}}public static IJEnumerable<JToken>Children<T>(this IEnumerable<T>source)where T:JToken{return Children<T,JToken>(source)!.AsJEnumerable();}public static IEnumerable<U?>Children<T,U>(this IEnumerable<T>source)where T:JToken{ValidationUtils.ArgumentNotNull(source,nameof(source));return source.SelectMany(c=>c.Children()).Convert<JToken,U>();}internal static IEnumerable<U?>Convert<T,U>(this IEnumerable<T>source)where T:JToken{ValidationUtils.ArgumentNotNull(source,nameof(source));foreach(T token in source){yield return Convert<JToken,U>(token);}}internal static U?Convert<T,U>(this T token)where T:JToken?{if(token==null){
return default;
}if(token is U castValue&&typeof(U)!=typeof(IComparable)&&typeof(U)!=typeof(IFormattable)){return castValue;}else{if(!(token is JValue value)){throw new InvalidCastException("Cannot cast {0} to {1}.".FormatWith(CultureInfo.InvariantCulture,token.GetType(),typeof(T)));}if(value.Value is U u){return u;}Type targetType=typeof(U);if(ReflectionUtils.IsNullableType(targetType)){if(value.Value==null){
return default;
}targetType=Nullable.GetUnderlyingType(targetType);}return(U)System.Convert.ChangeType(value.Value,targetType,CultureInfo.InvariantCulture);}}public static IJEnumerable<JToken>AsJEnumerable(this IEnumerable<JToken>source){return source.AsJEnumerable<JToken>();}public static IJEnumerable<T>AsJEnumerable<T>(this IEnumerable<T>source)where T:JToken{if(source==null){return null!;}else if(source is IJEnumerable<T>customEnumerable){return customEnumerable;}else{return new JEnumerable<T>(source);}}}}namespace Newtonsoft.Json.Utilities{internal static class MathUtils{public static int IntLength(ulong i){if(i<10000000000){if(i<10){return 1;}if(i<100){return 2;}if(i<1000){return 3;}if(i<10000){return 4;}if(i<100000){return 5;}if(i<1000000){return 6;}if(i<10000000){return 7;}if(i<100000000){return 8;}if(i<1000000000){return 9;}return 10;}else{if(i<100000000000){return 11;}if(i<1000000000000){return 12;}if(i<10000000000000){return 13;}if(i<100000000000000){return 14;}if(i<1000000000000000){return 15;}if(i<10000000000000000){return 16;}if(i<100000000000000000){return 17;}if(i<1000000000000000000){return 18;}if(i<10000000000000000000){return 19;}return 20;}}public static char IntToHex(int n){if(n<=9){return(char)(n+48);}return(char)((n-10)+97);}public static int?Min(int?val1,int?val2){if(val1==null){return val2;}if(val2==null){return val1;}return Math.Min(val1.GetValueOrDefault(),val2.GetValueOrDefault());}public static int?Max(int?val1,int?val2){if(val1==null){return val2;}if(val2==null){return val1;}return Math.Max(val1.GetValueOrDefault(),val2.GetValueOrDefault());}public static double?Max(double?val1,double?val2){if(val1==null){return val2;}if(val2==null){return val1;}return Math.Max(val1.GetValueOrDefault(),val2.GetValueOrDefault());}public static bool ApproxEquals(double d1,double d2){const double epsilon=2.2204460492503131E-16;if(d1==d2){return true;}double tolerance=((Math.Abs(d1)+Math.Abs(d2))+10.0)*epsilon;double difference=d1-d2;return(-tolerance<difference&&tolerance>difference);}}}namespace Newtonsoft.Json{public enum MemberSerialization{
OptOut=0,OptIn=1,Fields=2
}}namespace Newtonsoft.Json.Serialization{public class MemoryTraceWriter:ITraceWriter{private readonly Queue<string>_traceMessages;private readonly object _lock;public TraceLevel LevelFilter{get;set;}public MemoryTraceWriter(){LevelFilter=TraceLevel.Verbose;_traceMessages=new Queue<string>();_lock=new object();}public void Trace(TraceLevel level,string message,Exception?ex){StringBuilder sb=new StringBuilder();sb.Append(DateTime.Now.ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fff",CultureInfo.InvariantCulture));sb.Append(" ");sb.Append(level.ToString("g"));sb.Append(" ");sb.Append(message);string s=sb.ToString();lock(_lock){if(_traceMessages.Count>=1000){_traceMessages.Dequeue();}_traceMessages.Enqueue(s);}}public IEnumerable<string>GetTraceMessages(){return _traceMessages;}public override string ToString(){lock(_lock){StringBuilder sb=new StringBuilder();foreach(string traceMessage in _traceMessages){if(sb.Length>0){sb.AppendLine();}sb.Append(traceMessage);}return sb.ToString();}}}}namespace Newtonsoft.Json.Linq{public enum MergeArrayHandling{Concat=0,Union=1,Replace=2,Merge=3}}namespace Newtonsoft.Json.Linq{[Flags]public enum MergeNullValueHandling{Ignore=0,Merge=1}}namespace Newtonsoft.Json{public enum MetadataPropertyHandling{Default=0,ReadAhead=1,Ignore=2}}
#if !HAVE_LINQ
#else
#endif
namespace Newtonsoft.Json.Utilities{
#if PORTABLE
internal static class MethodBinder{private static readonly Type[]PrimitiveTypes=new Type[]{typeof(bool),typeof(char),typeof(sbyte),typeof(byte),typeof(short),typeof(ushort),typeof(int),typeof(uint),typeof(long),typeof(ulong),typeof(float),typeof(double)};private static readonly int[]WideningMasks=new int[]{0x0001,0x0FE2,0x0D54,0x0FFA,0x0D50,0x0FE2,0x0D40,0x0F80,0x0D00,0x0E00,0x0C00,0x0800};private static bool CanConvertPrimitive(Type from,Type to){if(from==to){return true;}int fromMask=0;int toMask=0;for(int i=0;i<PrimitiveTypes.Length;i++){if(PrimitiveTypes[i]==from){fromMask=WideningMasks[i];}else if(PrimitiveTypes[i]==to){toMask=1<<i;}if(fromMask!=0&&toMask!=0){break;}}return(fromMask&toMask)!=0;}private static bool FilterParameters(ParameterInfo[]parameters,IList<Type>types,bool enableParamArray){ValidationUtils.ArgumentNotNull(parameters,nameof(parameters));ValidationUtils.ArgumentNotNull(types,nameof(types));if(parameters.Length==0){return types.Count==0;}if(parameters.Length>types.Count){return false;}Type?paramArrayType=null;if(enableParamArray){ParameterInfo lastParam=parameters[parameters.Length-1];if(lastParam.ParameterType.IsArray&&lastParam.IsDefined(typeof(ParamArrayAttribute))){paramArrayType=lastParam.ParameterType.GetElementType();}}if(paramArrayType==null&&parameters.Length!=types.Count){return false;}for(int i=0;i<types.Count;i++){Type paramType=(paramArrayType!=null&&i>=parameters.Length-1)?paramArrayType:parameters[i].ParameterType;if(paramType==types[i]){continue;}if(paramType==typeof(object)){continue;}if(paramType.IsPrimitive()){if(!types[i].IsPrimitive()||!CanConvertPrimitive(types[i],paramType)){return false;}}else{if(!paramType.IsAssignableFrom(types[i])){return false;}}}return true;}private class ParametersMatchComparer:IComparer<ParameterInfo[]>{private readonly IList<Type>_types;private readonly bool _enableParamArray;public ParametersMatchComparer(IList<Type>types,bool enableParamArray){ValidationUtils.ArgumentNotNull(types,nameof(types));_types=types;_enableParamArray=enableParamArray;}public int Compare(ParameterInfo[]parameters1,ParameterInfo[]parameters2){ValidationUtils.ArgumentNotNull(parameters1,nameof(parameters1));ValidationUtils.ArgumentNotNull(parameters2,nameof(parameters2));if(parameters1.Length==0){return-1;}if(parameters2.Length==0){return 1;}Type?paramArrayType1=null,paramArrayType2=null;if(_enableParamArray){ParameterInfo lastParam1=parameters1[parameters1.Length-1];if(lastParam1.ParameterType.IsArray&&lastParam1.IsDefined(typeof(ParamArrayAttribute))){paramArrayType1=lastParam1.ParameterType.GetElementType();}ParameterInfo lastParam2=parameters2[parameters2.Length-1];if(lastParam2.ParameterType.IsArray&&lastParam2.IsDefined(typeof(ParamArrayAttribute))){paramArrayType2=lastParam2.ParameterType.GetElementType();}if(paramArrayType1!=null&&paramArrayType2==null){return 1;}if(paramArrayType2!=null&&paramArrayType1==null){return-1;}}for(int i=0;i<_types.Count;i++){Type type1=(paramArrayType1!=null&&i>=parameters1.Length-1)?paramArrayType1:parameters1[i].ParameterType;Type type2=(paramArrayType2!=null&&i>=parameters2.Length-1)?paramArrayType2:parameters2[i].ParameterType;if(type1==type2){continue;}if(type1==_types[i]){return-1;}if(type2==_types[i]){return 1;}int r=ChooseMorePreciseType(type1,type2);if(r!=0){return r;}}return 0;}private static int ChooseMorePreciseType(Type type1,Type type2){if(type1.IsByRef||type2.IsByRef){if(type1.IsByRef&&type2.IsByRef){type1=type1.GetElementType();type2=type2.GetElementType();}else if(type1.IsByRef){type1=type1.GetElementType();if(type1==type2){return 1;}}else{type2=type2.GetElementType();if(type2==type1){return-1;}}}bool c1FromC2,c2FromC1;if(type1.IsPrimitive()&&type2.IsPrimitive()){c1FromC2=CanConvertPrimitive(type2,type1);c2FromC1=CanConvertPrimitive(type1,type2);}else{c1FromC2=type1.IsAssignableFrom(type2);c2FromC1=type2.IsAssignableFrom(type1);}if(c1FromC2==c2FromC1){return 0;}return c1FromC2?1:-1;}}public static TMethod SelectMethod<TMethod>(IEnumerable<TMethod>candidates,IList<Type>types)where TMethod:MethodBase{ValidationUtils.ArgumentNotNull(candidates,nameof(candidates));ValidationUtils.ArgumentNotNull(types,nameof(types));const bool enableParamArray=false;return candidates.Where(m=>FilterParameters(m.GetParameters(),types,enableParamArray)).OrderBy(m=>m.GetParameters(),new ParametersMatchComparer(types,enableParamArray)).FirstOrDefault();}}
#endif
}namespace Newtonsoft.Json.Utilities{internal delegate TResult MethodCall<T,TResult>(T target,params object?[]args);}namespace Newtonsoft.Json.Utilities{internal delegate T Creator<T>();internal static class MiscellaneousUtils{[Conditional("DEBUG")]public static void Assert([DoesNotReturnIf(false)]bool condition,string?message=null){Debug.Assert(condition,message);}public static bool ValueEquals(object?objA,object?objB){if(objA==objB){return true;}if(objA==null||objB==null){return false;}if(objA.GetType()!=objB.GetType()){if(ConvertUtils.IsInteger(objA)&&ConvertUtils.IsInteger(objB)){return Convert.ToDecimal(objA,CultureInfo.CurrentCulture).Equals(Convert.ToDecimal(objB,CultureInfo.CurrentCulture));}else if((objA is double||objA is float||objA is decimal)&&(objB is double||objB is float||objB is decimal)){return MathUtils.ApproxEquals(Convert.ToDouble(objA,CultureInfo.CurrentCulture),Convert.ToDouble(objB,CultureInfo.CurrentCulture));}else{return false;}}return objA.Equals(objB);}public static ArgumentOutOfRangeException CreateArgumentOutOfRangeException(string paramName,object actualValue,string message){string newMessage=message+Environment.NewLine+@"Actual value was {0}.".FormatWith(CultureInfo.InvariantCulture,actualValue);return new ArgumentOutOfRangeException(paramName,newMessage);}public static string ToString(object?value){if(value==null){return"{null}";}return(value is string s)?@""""+s+@"""":value!.ToString();}public static int ByteArrayCompare(byte[]a1,byte[]a2){int lengthCompare=a1.Length.CompareTo(a2.Length);if(lengthCompare!=0){return lengthCompare;}for(int i=0;i<a1.Length;i++){int valueCompare=a1[i].CompareTo(a2[i]);if(valueCompare!=0){return valueCompare;}}return 0;}public static string?GetPrefix(string qualifiedName){GetQualifiedNameParts(qualifiedName,out string?prefix,out _);return prefix;}public static string GetLocalName(string qualifiedName){GetQualifiedNameParts(qualifiedName,out _,out string localName);return localName;}public static void GetQualifiedNameParts(string qualifiedName,out string?prefix,out string localName){int colonPosition=qualifiedName.IndexOf(':');if((colonPosition==-1||colonPosition==0)||(qualifiedName.Length-1)==colonPosition){prefix=null;localName=qualifiedName;}else{prefix=qualifiedName.Substring(0,colonPosition);localName=qualifiedName.Substring(colonPosition+1);}}internal static RegexOptions GetRegexOptions(string optionsText){RegexOptions options=RegexOptions.None;for(int i=0;i<optionsText.Length;i++){switch(optionsText[i]){case'i':options|=RegexOptions.IgnoreCase;break;case'm':options|=RegexOptions.Multiline;break;case's':options|=RegexOptions.Singleline;break;case'x':options|=RegexOptions.ExplicitCapture;break;}}return options;}}}namespace Newtonsoft.Json{public enum MissingMemberHandling{Ignore=0,Error=1}}namespace Newtonsoft.Json.Serialization{public abstract class NamingStrategy{public bool ProcessDictionaryKeys{get;set;}public bool ProcessExtensionDataNames{get;set;}public bool OverrideSpecifiedNames{get;set;}public virtual string GetPropertyName(string name,bool hasSpecifiedName){if(hasSpecifiedName&&!OverrideSpecifiedNames){return name;}return ResolvePropertyName(name);}public virtual string GetExtensionDataName(string name){if(!ProcessExtensionDataNames){return name;}return ResolvePropertyName(name);}public virtual string GetDictionaryKey(string key){if(!ProcessDictionaryKeys){return key;}return ResolvePropertyName(key);}protected abstract string ResolvePropertyName(string name);public override int GetHashCode(){unchecked{var hashCode=GetType().GetHashCode();hashCode=(hashCode*397)^ProcessDictionaryKeys.GetHashCode();hashCode=(hashCode*397)^ProcessExtensionDataNames.GetHashCode();hashCode=(hashCode*397)^OverrideSpecifiedNames.GetHashCode();return hashCode;}}public override bool Equals(object obj)=>Equals(obj as NamingStrategy);protected bool Equals(NamingStrategy?other){if(other==null){return false;}return GetType()==other.GetType()&&ProcessDictionaryKeys==other.ProcessDictionaryKeys&&ProcessExtensionDataNames==other.ProcessExtensionDataNames&&OverrideSpecifiedNames==other.OverrideSpecifiedNames;}}}namespace System.Diagnostics.CodeAnalysis{[AttributeUsage(AttributeTargets.Field|AttributeTargets.Method|AttributeTargets.Parameter|AttributeTargets.Property|AttributeTargets.ReturnValue,AllowMultiple=true)]internal sealed class NotNullAttribute:Attribute{}[AttributeUsage(AttributeTargets.Parameter,AllowMultiple=false)]internal sealed class NotNullWhenAttribute:Attribute{public NotNullWhenAttribute(bool returnValue)=>ReturnValue=returnValue;public bool ReturnValue{get;}}[AttributeUsage(AttributeTargets.Field|AttributeTargets.Parameter|AttributeTargets.Property|AttributeTargets.ReturnValue,Inherited=false)]internal sealed class MaybeNullAttribute:Attribute{}[AttributeUsage(AttributeTargets.Field|AttributeTargets.Parameter|AttributeTargets.Property,Inherited=false)]internal sealed class AllowNullAttribute:Attribute{}[AttributeUsage(AttributeTargets.Parameter,Inherited=false)]internal class DoesNotReturnIfAttribute:Attribute{public DoesNotReturnIfAttribute(bool parameterValue)=>this.ParameterValue=parameterValue;public bool ParameterValue{get;}}}namespace Newtonsoft.Json{public enum NullValueHandling{Include=0,Ignore=1}}namespace Newtonsoft.Json.Serialization{public delegate object ObjectConstructor<T>(params object?[]args);}namespace Newtonsoft.Json{public enum ObjectCreationHandling{Auto=0,Reuse=1,Replace=2}}namespace Newtonsoft.Json.Serialization{[AttributeUsage(AttributeTargets.Method,Inherited=false)]public sealed class OnErrorAttribute:Attribute{}}namespace Newtonsoft.Json.Linq.JsonPath{internal abstract class PathFilter{public abstract IEnumerable<JToken>ExecuteFilter(JToken root,IEnumerable<JToken>current,JsonSelectSettings?settings);protected static JToken?GetTokenIndex(JToken t,JsonSelectSettings?settings,int index){if(t is JArray a){if(a.Count<=index){if(settings?.ErrorWhenNoMatch??false){throw new JsonException("Index {0} outside the bounds of JArray.".FormatWith(CultureInfo.InvariantCulture,index));}return null;}return a[index];}else if(t is JConstructor c){if(c.Count<=index){if(settings?.ErrorWhenNoMatch??false){throw new JsonException("Index {0} outside the bounds of JConstructor.".FormatWith(CultureInfo.InvariantCulture,index));}return null;}return c[index];}else{if(settings?.ErrorWhenNoMatch??false){throw new JsonException("Index {0} not valid on {1}.".FormatWith(CultureInfo.InvariantCulture,index,t.GetType().Name));}return null;}}protected static JToken?GetNextScanValue(JToken originalParent,JToken?container,JToken?value){if(container!=null&&container.HasValues){value=container.First;}else{while(value!=null&&value!=originalParent&&value==value.Parent!.Last){value=value.Parent;}if(value==null||value==originalParent){return null;}value=value.Next;}return value;}}}namespace Newtonsoft.Json{[Flags]public enum PreserveReferencesHandling{None=0,Objects=1,Arrays=2,All=Objects|Arrays}}
namespace Newtonsoft.Json.Linq.JsonPath{internal enum QueryOperator{None=0,Equals=1,NotEquals=2,Exists=3,LessThan=4,LessThanOrEquals=5,GreaterThan=6,GreaterThanOrEquals=7,And=8,Or=9,RegexEquals=10,StrictEquals=11,StrictNotEquals=12}internal abstract class QueryExpression{internal QueryOperator Operator;public QueryExpression(QueryOperator@operator){Operator=@operator;}public bool IsMatch(JToken root,JToken t){return IsMatch(root,t,null);}public abstract bool IsMatch(JToken root,JToken t,JsonSelectSettings?settings);}internal class CompositeExpression:QueryExpression{public List<QueryExpression>Expressions{get;set;}public CompositeExpression(QueryOperator@operator):base(@operator){Expressions=new List<QueryExpression>();}public override bool IsMatch(JToken root,JToken t,JsonSelectSettings?settings){switch(Operator){case QueryOperator.And:foreach(QueryExpression e in Expressions){if(!e.IsMatch(root,t,settings)){return false;}}return true;case QueryOperator.Or:foreach(QueryExpression e in Expressions){if(e.IsMatch(root,t,settings)){return true;}}return false;default:throw new ArgumentOutOfRangeException();}}}internal class BooleanQueryExpression:QueryExpression{public readonly object Left;public readonly object?Right;public BooleanQueryExpression(QueryOperator@operator,object left,object?right):base(@operator){Left=left;Right=right;}private IEnumerable<JToken>GetResult(JToken root,JToken t,object?o){if(o is JToken resultToken){return new[]{resultToken};}if(o is List<PathFilter>pathFilters){return JPath.Evaluate(pathFilters,root,t,null);}return CollectionUtils.ArrayEmpty<JToken>();}public override bool IsMatch(JToken root,JToken t,JsonSelectSettings?settings){if(Operator==QueryOperator.Exists){return GetResult(root,t,Left).Any();}using(IEnumerator<JToken>leftResults=GetResult(root,t,Left).GetEnumerator()){if(leftResults.MoveNext()){IEnumerable<JToken>rightResultsEn=GetResult(root,t,Right);ICollection<JToken>rightResults=rightResultsEn as ICollection<JToken>??rightResultsEn.ToList();do{JToken leftResult=leftResults.Current;foreach(JToken rightResult in rightResults){if(MatchTokens(leftResult,rightResult,settings)){return true;}}}while(leftResults.MoveNext());}}return false;}private bool MatchTokens(JToken leftResult,JToken rightResult,JsonSelectSettings?settings){if(leftResult is JValue leftValue&&rightResult is JValue rightValue){switch(Operator){case QueryOperator.RegexEquals:if(RegexEquals(leftValue,rightValue,settings)){return true;}break;case QueryOperator.Equals:if(EqualsWithStringCoercion(leftValue,rightValue)){return true;}break;case QueryOperator.StrictEquals:if(EqualsWithStrictMatch(leftValue,rightValue)){return true;}break;case QueryOperator.NotEquals:if(!EqualsWithStringCoercion(leftValue,rightValue)){return true;}break;case QueryOperator.StrictNotEquals:if(!EqualsWithStrictMatch(leftValue,rightValue)){return true;}break;case QueryOperator.GreaterThan:if(leftValue.CompareTo(rightValue)>0){return true;}break;case QueryOperator.GreaterThanOrEquals:if(leftValue.CompareTo(rightValue)>=0){return true;}break;case QueryOperator.LessThan:if(leftValue.CompareTo(rightValue)<0){return true;}break;case QueryOperator.LessThanOrEquals:if(leftValue.CompareTo(rightValue)<=0){return true;}break;case QueryOperator.Exists:return true;}}else{switch(Operator){case QueryOperator.Exists:case QueryOperator.NotEquals:return true;}}return false;}private static bool RegexEquals(JValue input,JValue pattern,JsonSelectSettings?settings){if(input.Type!=JTokenType.String||pattern.Type!=JTokenType.String){return false;}string regexText=(string)pattern.Value!;int patternOptionDelimiterIndex=regexText.LastIndexOf('/');string patternText=regexText.Substring(1,patternOptionDelimiterIndex-1);string optionsText=regexText.Substring(patternOptionDelimiterIndex+1);
#if HAVE_REGEX_TIMEOUTS
TimeSpan timeout=settings?.RegexMatchTimeout??Regex.InfiniteMatchTimeout;return Regex.IsMatch((string)input.Value!,patternText,MiscellaneousUtils.GetRegexOptions(optionsText),timeout);
#else
return Regex.IsMatch((string)input.Value!,patternText,MiscellaneousUtils.GetRegexOptions(optionsText));
#endif
}internal static bool EqualsWithStringCoercion(JValue value,JValue queryValue){if(value.Equals(queryValue)){return true;}if((value.Type==JTokenType.Integer&&queryValue.Type==JTokenType.Float)||(value.Type==JTokenType.Float&&queryValue.Type==JTokenType.Integer)){return JValue.Compare(value.Type,value.Value,queryValue.Value)==0;}if(queryValue.Type!=JTokenType.String){return false;}string queryValueString=(string)queryValue.Value!;string currentValueString;switch(value.Type){case JTokenType.Date:using(StringWriter writer=StringUtils.CreateStringWriter(64)){
#if HAVE_DATE_TIME_OFFSET
if(value.Value is DateTimeOffset offset){DateTimeUtils.WriteDateTimeOffsetString(writer,offset,DateFormatHandling.IsoDateFormat,null,CultureInfo.InvariantCulture);}else
#endif
{DateTimeUtils.WriteDateTimeString(writer,(DateTime)value.Value!,DateFormatHandling.IsoDateFormat,null,CultureInfo.InvariantCulture);}currentValueString=writer.ToString();}break;case JTokenType.Bytes:currentValueString=Convert.ToBase64String((byte[])value.Value!);break;case JTokenType.Guid:case JTokenType.TimeSpan:currentValueString=value.Value!.ToString();break;case JTokenType.Uri:currentValueString=((Uri)value.Value!).OriginalString;break;default:return false;}return string.Equals(currentValueString,queryValueString,StringComparison.Ordinal);}internal static bool EqualsWithStrictMatch(JValue value,JValue queryValue){MiscellaneousUtils.Assert(value!=null);MiscellaneousUtils.Assert(queryValue!=null);if((value.Type==JTokenType.Integer&&queryValue.Type==JTokenType.Float)||(value.Type==JTokenType.Float&&queryValue.Type==JTokenType.Integer)){return JValue.Compare(value.Type,value.Value,queryValue.Value)==0;}if(value.Type!=queryValue.Type){return false;}return value.Equals(queryValue);}}}namespace Newtonsoft.Json.Linq.JsonPath{internal class QueryFilter:PathFilter{internal QueryExpression Expression;public QueryFilter(QueryExpression expression){Expression=expression;}public override IEnumerable<JToken>ExecuteFilter(JToken root,IEnumerable<JToken>current,JsonSelectSettings?settings){foreach(JToken t in current){foreach(JToken v in t){if(Expression.IsMatch(root,v,settings)){yield return v;}}}}}}namespace Newtonsoft.Json.Linq.JsonPath{internal class QueryScanFilter:PathFilter{internal QueryExpression Expression;public QueryScanFilter(QueryExpression expression){Expression=expression;}public override IEnumerable<JToken>ExecuteFilter(JToken root,IEnumerable<JToken>current,JsonSelectSettings?settings){foreach(JToken t in current){if(t is JContainer c){foreach(JToken d in c.DescendantsAndSelf()){if(Expression.IsMatch(root,d,settings)){yield return d;}}}else{if(Expression.IsMatch(root,t,settings)){yield return t;}}}}}}namespace Newtonsoft.Json{public enum ReferenceLoopHandling{Error=0,Ignore=1,Serialize=2}}namespace Newtonsoft.Json.Serialization{public class ReflectionAttributeProvider:IAttributeProvider{private readonly object _attributeProvider;public ReflectionAttributeProvider(object attributeProvider){ValidationUtils.ArgumentNotNull(attributeProvider,nameof(attributeProvider));_attributeProvider=attributeProvider;}public IList<Attribute>GetAttributes(bool inherit){return ReflectionUtils.GetAttributes(_attributeProvider,null,inherit);}public IList<Attribute>GetAttributes(Type attributeType,bool inherit){return ReflectionUtils.GetAttributes(_attributeProvider,attributeType,inherit);}}}
namespace Newtonsoft.Json.Utilities{internal abstract class ReflectionDelegateFactory{public Serialization.Func<T,object?>CreateGet<T>(MemberInfo memberInfo){if(memberInfo is PropertyInfo propertyInfo){if(propertyInfo.PropertyType.IsByRef){throw new InvalidOperationException("Could not create getter for {0}. ByRef return values are not supported.".FormatWith(CultureInfo.InvariantCulture,propertyInfo));}return CreateGet<T>(propertyInfo);}if(memberInfo is FieldInfo fieldInfo){return CreateGet<T>(fieldInfo);}throw new Exception("Could not create getter for {0}.".FormatWith(CultureInfo.InvariantCulture,memberInfo));}public Serialization.Action<T,object?>CreateSet<T>(MemberInfo memberInfo){if(memberInfo is PropertyInfo propertyInfo){return CreateSet<T>(propertyInfo);}if(memberInfo is FieldInfo fieldInfo){return CreateSet<T>(fieldInfo);}throw new Exception("Could not create setter for {0}.".FormatWith(CultureInfo.InvariantCulture,memberInfo));}public abstract MethodCall<T,object?>CreateMethodCall<T>(MethodBase method);public abstract ObjectConstructor<object>CreateParameterizedConstructor(MethodBase method);public abstract Serialization.Func<T>CreateDefaultConstructor<T>(Type type);public abstract Serialization.Func<T,object?>CreateGet<T>(PropertyInfo propertyInfo);public abstract Serialization.Func<T,object?>CreateGet<T>(FieldInfo fieldInfo);public abstract Serialization.Action<T,object?>CreateSet<T>(FieldInfo fieldInfo);public abstract Serialization.Action<T,object?>CreateSet<T>(PropertyInfo propertyInfo);}}
namespace Newtonsoft.Json.Utilities{internal class ReflectionMember{public Type?MemberType{get;set;}public Serialization.Func<object,object?>?Getter{get;set;}public Serialization.Action<object,object?>?Setter{get;set;}}internal class ReflectionObject{public ObjectConstructor<object>?Creator{get;}public IDictionary<string,ReflectionMember>Members{get;}private ReflectionObject(ObjectConstructor<object>?creator){Members=new Dictionary<string,ReflectionMember>();Creator=creator;}public object?GetValue(object target,string member){Serialization.Func<object,object?>getter=Members[member].Getter!;return getter(target);}public void SetValue(object target,string member,object?value){Serialization.Action<object,object?>setter=Members[member].Setter!;setter(target,value);}public Type GetType(string member){return Members[member].MemberType!;}public static ReflectionObject Create(Type t,params string[]memberNames){return Create(t,null,memberNames);}public static ReflectionObject Create(Type t,MethodBase?creator,params string[]memberNames){ReflectionDelegateFactory delegateFactory=JsonTypeReflector.ReflectionDelegateFactory;ObjectConstructor<object>?creatorConstructor=null;if(creator!=null){creatorConstructor=delegateFactory.CreateParameterizedConstructor(creator);}else{if(ReflectionUtils.HasDefaultConstructor(t,false)){Serialization.Func<object>ctor=delegateFactory.CreateDefaultConstructor<object>(t);creatorConstructor=args=>ctor();}}ReflectionObject d=new ReflectionObject(creatorConstructor);foreach(string memberName in memberNames){MemberInfo[]members=t.GetMember(memberName,BindingFlags.Instance|BindingFlags.Public);if(members.Length!=1){throw new ArgumentException("Expected a single member with the name '{0}'.".FormatWith(CultureInfo.InvariantCulture,memberName));}MemberInfo member=members.Single();ReflectionMember reflectionMember=new ReflectionMember();switch(member.MemberType()){case MemberTypes.Field:case MemberTypes.Property:if(ReflectionUtils.CanReadMemberValue(member,false)){reflectionMember.Getter=delegateFactory.CreateGet<object>(member);}if(ReflectionUtils.CanSetMemberValue(member,false,false)){reflectionMember.Setter=delegateFactory.CreateSet<object>(member);}break;case MemberTypes.Method:MethodInfo method=(MethodInfo)member;if(method.IsPublic){ParameterInfo[]parameters=method.GetParameters();if(parameters.Length==0&&method.ReturnType!=typeof(void)){MethodCall<object,object?>call=delegateFactory.CreateMethodCall<object>(method);reflectionMember.Getter=target=>call(target);}else if(parameters.Length==1&&method.ReturnType==typeof(void)){MethodCall<object,object?>call=delegateFactory.CreateMethodCall<object>(method);reflectionMember.Setter=(target,arg)=>call(target,arg);}}break;default:throw new ArgumentException("Unexpected member type '{0}' for member '{1}'.".FormatWith(CultureInfo.InvariantCulture,member.MemberType(),member.Name));}reflectionMember.MemberType=ReflectionUtils.GetMemberUnderlyingType(member);d.Members[memberName]=reflectionMember;}return d;}}}
namespace Newtonsoft.Json.Utilities{
#if (DOTNET || PORTABLE || PORTABLE40) && !NETSTANDARD2_0
[Flags]internal enum MemberTypes{Event=2,Field=4,Method=8,Property=16}
#endif
#if PORTABLE && !NETSTANDARD2_0
[Flags]internal enum BindingFlags{Default=0,IgnoreCase=1,DeclaredOnly=2,Instance=4,Static=8,Public=16,NonPublic=32,FlattenHierarchy=64,InvokeMethod=256,CreateInstance=512,GetField=1024,SetField=2048,GetProperty=4096,SetProperty=8192,PutDispProperty=16384,ExactBinding=65536,PutRefDispProperty=32768,SuppressChangeType=131072,OptionalParamBinding=262144,IgnoreReturn=16777216}
#endif
internal static class ReflectionUtils{public static readonly Type[]EmptyTypes;static ReflectionUtils(){
#if HAVE_EMPTY_TYPES
EmptyTypes=Type.EmptyTypes;
#else
EmptyTypes=CollectionUtils.ArrayEmpty<Type>();
#endif
}public static bool IsVirtual(this PropertyInfo propertyInfo){ValidationUtils.ArgumentNotNull(propertyInfo,nameof(propertyInfo));MethodInfo?m=propertyInfo.GetGetMethod(true);if(m!=null&&m.IsVirtual){return true;}m=propertyInfo.GetSetMethod(true);if(m!=null&&m.IsVirtual){return true;}return false;}public static MethodInfo?GetBaseDefinition(this PropertyInfo propertyInfo){ValidationUtils.ArgumentNotNull(propertyInfo,nameof(propertyInfo));MethodInfo?m=propertyInfo.GetGetMethod(true);if(m!=null){return m.GetBaseDefinition();}return propertyInfo.GetSetMethod(true)?.GetBaseDefinition();}public static bool IsPublic(PropertyInfo property){var getMethod=property.GetGetMethod();if(getMethod!=null&&getMethod.IsPublic){return true;}var setMethod=property.GetSetMethod();if(setMethod!=null&&setMethod.IsPublic){return true;}return false;}public static Type?GetObjectType(object?v){return v?.GetType();}public static string GetTypeName(Type t,TypeNameAssemblyFormatHandling assemblyFormat,ISerializationBinder?binder){string fullyQualifiedTypeName=GetFullyQualifiedTypeName(t,binder);switch(assemblyFormat){case TypeNameAssemblyFormatHandling.Simple:return RemoveAssemblyDetails(fullyQualifiedTypeName);case TypeNameAssemblyFormatHandling.Full:return fullyQualifiedTypeName;default:throw new ArgumentOutOfRangeException();}}private static string GetFullyQualifiedTypeName(Type t,ISerializationBinder?binder){if(binder!=null){binder.BindToName(t,out string?assemblyName,out string?typeName);
#if (NET20 || NET35)
if(assemblyName==null&typeName==null){return t.AssemblyQualifiedName;}
#endif
return typeName+(assemblyName==null?"":", "+assemblyName);}return t.AssemblyQualifiedName;}private static string RemoveAssemblyDetails(string fullyQualifiedTypeName){StringBuilder builder=new StringBuilder();bool writingAssemblyName=false;bool skippingAssemblyDetails=false;for(int i=0;i<fullyQualifiedTypeName.Length;i++){char current=fullyQualifiedTypeName[i];switch(current){case'[':case']':writingAssemblyName=false;skippingAssemblyDetails=false;builder.Append(current);break;case',':if(!writingAssemblyName){writingAssemblyName=true;builder.Append(current);}else{skippingAssemblyDetails=true;}break;default:if(!skippingAssemblyDetails){builder.Append(current);}break;}}return builder.ToString();}public static bool HasDefaultConstructor(Type t,bool nonPublic){ValidationUtils.ArgumentNotNull(t,nameof(t));if(t.IsValueType()){return true;}return(GetDefaultConstructor(t,nonPublic)!=null);}public static ConstructorInfo GetDefaultConstructor(Type t){return GetDefaultConstructor(t,false);}public static ConstructorInfo GetDefaultConstructor(Type t,bool nonPublic){BindingFlags bindingFlags=BindingFlags.Instance|BindingFlags.Public;if(nonPublic){bindingFlags=bindingFlags|BindingFlags.NonPublic;}return t.GetConstructors(bindingFlags).SingleOrDefault(c=>!c.GetParameters().Any());}public static bool IsNullable(Type t){ValidationUtils.ArgumentNotNull(t,nameof(t));if(t.IsValueType()){return IsNullableType(t);}return true;}public static bool IsNullableType(Type t){ValidationUtils.ArgumentNotNull(t,nameof(t));return(t.IsGenericType()&&t.GetGenericTypeDefinition()==typeof(Nullable<>));}public static Type EnsureNotNullableType(Type t){return(IsNullableType(t))?Nullable.GetUnderlyingType(t):t;}public static Type EnsureNotByRefType(Type t){return(t.IsByRef&&t.HasElementType)?t.GetElementType():t;}public static bool IsGenericDefinition(Type type,Type genericInterfaceDefinition){if(!type.IsGenericType()){return false;}Type t=type.GetGenericTypeDefinition();return(t==genericInterfaceDefinition);}public static bool ImplementsGenericDefinition(Type type,Type genericInterfaceDefinition){return ImplementsGenericDefinition(type,genericInterfaceDefinition,out _);}public static bool ImplementsGenericDefinition(Type type,Type genericInterfaceDefinition,[NotNullWhen(true)]out Type?implementingType){ValidationUtils.ArgumentNotNull(type,nameof(type));ValidationUtils.ArgumentNotNull(genericInterfaceDefinition,nameof(genericInterfaceDefinition));if(!genericInterfaceDefinition.IsInterface()||!genericInterfaceDefinition.IsGenericTypeDefinition()){throw new ArgumentNullException("'{0}' is not a generic interface definition.".FormatWith(CultureInfo.InvariantCulture,genericInterfaceDefinition));}if(type.IsInterface()){if(type.IsGenericType()){Type interfaceDefinition=type.GetGenericTypeDefinition();if(genericInterfaceDefinition==interfaceDefinition){implementingType=type;return true;}}}foreach(Type i in type.GetInterfaces()){if(i.IsGenericType()){Type interfaceDefinition=i.GetGenericTypeDefinition();if(genericInterfaceDefinition==interfaceDefinition){implementingType=i;return true;}}}implementingType=null;return false;}public static bool InheritsGenericDefinition(Type type,Type genericClassDefinition){return InheritsGenericDefinition(type,genericClassDefinition,out _);}public static bool InheritsGenericDefinition(Type type,Type genericClassDefinition,out Type?implementingType){ValidationUtils.ArgumentNotNull(type,nameof(type));ValidationUtils.ArgumentNotNull(genericClassDefinition,nameof(genericClassDefinition));if(!genericClassDefinition.IsClass()||!genericClassDefinition.IsGenericTypeDefinition()){throw new ArgumentNullException("'{0}' is not a generic class definition.".FormatWith(CultureInfo.InvariantCulture,genericClassDefinition));}return InheritsGenericDefinitionInternal(type,genericClassDefinition,out implementingType);}private static bool InheritsGenericDefinitionInternal(Type currentType,Type genericClassDefinition,out Type?implementingType){do{if(currentType.IsGenericType()&&genericClassDefinition==currentType.GetGenericTypeDefinition()){implementingType=currentType;return true;}currentType=currentType.BaseType();}while(currentType!=null);implementingType=null;return false;}public static Type?GetCollectionItemType(Type type){ValidationUtils.ArgumentNotNull(type,nameof(type));if(type.IsArray){return type.GetElementType();}if(ImplementsGenericDefinition(type,typeof(IEnumerable<>),out Type?genericListType)){if(genericListType!.IsGenericTypeDefinition()){throw new Exception("Type {0} is not a collection.".FormatWith(CultureInfo.InvariantCulture,type));}return genericListType!.GetGenericArguments()[0];}if(typeof(IEnumerable).IsAssignableFrom(type)){return null;}throw new Exception("Type {0} is not a collection.".FormatWith(CultureInfo.InvariantCulture,type));}public static void GetDictionaryKeyValueTypes(Type dictionaryType,out Type?keyType,out Type?valueType){ValidationUtils.ArgumentNotNull(dictionaryType,nameof(dictionaryType));if(ImplementsGenericDefinition(dictionaryType,typeof(IDictionary<,>),out Type?genericDictionaryType)){if(genericDictionaryType!.IsGenericTypeDefinition()){throw new Exception("Type {0} is not a dictionary.".FormatWith(CultureInfo.InvariantCulture,dictionaryType));}Type[]dictionaryGenericArguments=genericDictionaryType!.GetGenericArguments();keyType=dictionaryGenericArguments[0];valueType=dictionaryGenericArguments[1];return;}if(typeof(IDictionary).IsAssignableFrom(dictionaryType)){keyType=null;valueType=null;return;}throw new Exception("Type {0} is not a dictionary.".FormatWith(CultureInfo.InvariantCulture,dictionaryType));}public static Type GetMemberUnderlyingType(MemberInfo member){ValidationUtils.ArgumentNotNull(member,nameof(member));switch(member.MemberType()){case MemberTypes.Field:return((FieldInfo)member).FieldType;case MemberTypes.Property:return((PropertyInfo)member).PropertyType;case MemberTypes.Event:return((EventInfo)member).EventHandlerType;case MemberTypes.Method:return((MethodInfo)member).ReturnType;default:throw new ArgumentException("MemberInfo must be of type FieldInfo, PropertyInfo, EventInfo or MethodInfo",nameof(member));}}public static bool IsByRefLikeType(Type type){if(!type.IsValueType()){return false;}Attribute[]attributes=GetAttributes(type,null,false);for(int i=0;i<attributes.Length;i++){if(string.Equals(attributes[i].GetType().FullName,"System.Runtime.CompilerServices.IsByRefLikeAttribute",StringComparison.Ordinal)){return true;}}return false;}public static bool IsIndexedProperty(PropertyInfo property){ValidationUtils.ArgumentNotNull(property,nameof(property));return(property.GetIndexParameters().Length>0);}public static object GetMemberValue(MemberInfo member,object target){ValidationUtils.ArgumentNotNull(member,nameof(member));ValidationUtils.ArgumentNotNull(target,nameof(target));switch(member.MemberType()){case MemberTypes.Field:return((FieldInfo)member).GetValue(target);case MemberTypes.Property:try{return((PropertyInfo)member).GetValue(target,null);}catch(TargetParameterCountException e){throw new ArgumentException("MemberInfo '{0}' has index parameters".FormatWith(CultureInfo.InvariantCulture,member.Name),e);}default:throw new ArgumentException("MemberInfo '{0}' is not of type FieldInfo or PropertyInfo".FormatWith(CultureInfo.InvariantCulture,member.Name),nameof(member));}}public static void SetMemberValue(MemberInfo member,object target,object?value){ValidationUtils.ArgumentNotNull(member,nameof(member));ValidationUtils.ArgumentNotNull(target,nameof(target));switch(member.MemberType()){case MemberTypes.Field:((FieldInfo)member).SetValue(target,value);break;case MemberTypes.Property:((PropertyInfo)member).SetValue(target,value,null);break;default:throw new ArgumentException("MemberInfo '{0}' must be of type FieldInfo or PropertyInfo".FormatWith(CultureInfo.InvariantCulture,member.Name),nameof(member));}}public static bool CanReadMemberValue(MemberInfo member,bool nonPublic){switch(member.MemberType()){case MemberTypes.Field:FieldInfo fieldInfo=(FieldInfo)member;if(nonPublic){return true;}else if(fieldInfo.IsPublic){return true;}return false;case MemberTypes.Property:PropertyInfo propertyInfo=(PropertyInfo)member;if(!propertyInfo.CanRead){return false;}if(nonPublic){return true;}return(propertyInfo.GetGetMethod(nonPublic)!=null);default:return false;}}public static bool CanSetMemberValue(MemberInfo member,bool nonPublic,bool canSetReadOnly){switch(member.MemberType()){case MemberTypes.Field:FieldInfo fieldInfo=(FieldInfo)member;if(fieldInfo.IsLiteral){return false;}if(fieldInfo.IsInitOnly&&!canSetReadOnly){return false;}if(nonPublic){return true;}if(fieldInfo.IsPublic){return true;}return false;case MemberTypes.Property:PropertyInfo propertyInfo=(PropertyInfo)member;if(!propertyInfo.CanWrite){return false;}if(nonPublic){return true;}return(propertyInfo.GetSetMethod(nonPublic)!=null);default:return false;}}public static List<MemberInfo>GetFieldsAndProperties(Type type,BindingFlags bindingAttr){List<MemberInfo>targetMembers=new List<MemberInfo>();targetMembers.AddRange(GetFields(type,bindingAttr));targetMembers.AddRange(GetProperties(type,bindingAttr));List<MemberInfo>distinctMembers=new List<MemberInfo>(targetMembers.Count);foreach(IGrouping<string,MemberInfo>groupedMember in targetMembers.GroupBy(m=>m.Name)){int count=groupedMember.Count();if(count==1){distinctMembers.Add(groupedMember.First());}else{List<MemberInfo>resolvedMembers=new List<MemberInfo>();foreach(MemberInfo memberInfo in groupedMember){if(resolvedMembers.Count==0){resolvedMembers.Add(memberInfo);}else if(!IsOverridenGenericMember(memberInfo,bindingAttr)||memberInfo.Name=="Item"){if(resolvedMembers.Any(m=>m.DeclaringType==memberInfo.DeclaringType)){continue;}resolvedMembers.Add(memberInfo);}}distinctMembers.AddRange(resolvedMembers);}}return distinctMembers;}private static bool IsOverridenGenericMember(MemberInfo memberInfo,BindingFlags bindingAttr){if(memberInfo.MemberType()!=MemberTypes.Property){return false;}PropertyInfo propertyInfo=(PropertyInfo)memberInfo;if(!IsVirtual(propertyInfo)){return false;}Type declaringType=propertyInfo.DeclaringType;if(!declaringType.IsGenericType()){return false;}Type genericTypeDefinition=declaringType.GetGenericTypeDefinition();if(genericTypeDefinition==null){return false;}MemberInfo[]members=genericTypeDefinition.GetMember(propertyInfo.Name,bindingAttr);if(members.Length==0){return false;}Type memberUnderlyingType=GetMemberUnderlyingType(members[0]);if(!memberUnderlyingType.IsGenericParameter){return false;}return true;}public static T?GetAttribute<T>(object attributeProvider)where T:Attribute{return GetAttribute<T>(attributeProvider,true);}public static T?GetAttribute<T>(object attributeProvider,bool inherit)where T:Attribute{T[]attributes=GetAttributes<T>(attributeProvider,inherit);return attributes?.FirstOrDefault();}
#if !(DOTNET || PORTABLE) || NETSTANDARD2_0
public static T[]GetAttributes<T>(object attributeProvider,bool inherit)where T:Attribute{Attribute[]a=GetAttributes(attributeProvider,typeof(T),inherit);if(a is T[]attributes){return attributes;}return a.Cast<T>().ToArray();}public static Attribute[]GetAttributes(object attributeProvider,Type?attributeType,bool inherit){ValidationUtils.ArgumentNotNull(attributeProvider,nameof(attributeProvider));object provider=attributeProvider;switch(provider){case Type t:object[]array=attributeType!=null?t.GetCustomAttributes(attributeType,inherit):t.GetCustomAttributes(inherit);Attribute[]attributes=array.Cast<Attribute>().ToArray();
#if (NET20 || NET35)
if(inherit&&t.BaseType!=null){attributes=attributes.Union(GetAttributes(t.BaseType,attributeType,inherit)).ToArray();}
#endif
return attributes;case Assembly a:return(attributeType!=null)?Attribute.GetCustomAttributes(a,attributeType):Attribute.GetCustomAttributes(a);case MemberInfo mi:return(attributeType!=null)?Attribute.GetCustomAttributes(mi,attributeType,inherit):Attribute.GetCustomAttributes(mi,inherit);
#if !PORTABLE40
case Module m:return(attributeType!=null)?Attribute.GetCustomAttributes(m,attributeType,inherit):Attribute.GetCustomAttributes(m,inherit);
#endif
case ParameterInfo p:return(attributeType!=null)?Attribute.GetCustomAttributes(p,attributeType,inherit):Attribute.GetCustomAttributes(p,inherit);default:
#if !PORTABLE40
ICustomAttributeProvider customAttributeProvider=(ICustomAttributeProvider)attributeProvider;object[]result=(attributeType!=null)?customAttributeProvider.GetCustomAttributes(attributeType,inherit):customAttributeProvider.GetCustomAttributes(inherit);return(Attribute[])result;
#else
throw new Exception("Cannot get attributes from '{0}'.".FormatWith(CultureInfo.InvariantCulture,provider));
#endif
}}
#else
public static T[]GetAttributes<T>(object attributeProvider,bool inherit)where T:Attribute{return GetAttributes(attributeProvider,typeof(T),inherit).Cast<T>().ToArray();}public static Attribute[]GetAttributes(object provider,Type?attributeType,bool inherit){switch(provider){case Type t:return(attributeType!=null)?t.GetTypeInfo().GetCustomAttributes(attributeType,inherit).ToArray():t.GetTypeInfo().GetCustomAttributes(inherit).ToArray();case Assembly a:return(attributeType!=null)?a.GetCustomAttributes(attributeType).ToArray():a.GetCustomAttributes().ToArray();case MemberInfo memberInfo:return(attributeType!=null)?memberInfo.GetCustomAttributes(attributeType,inherit).ToArray():memberInfo.GetCustomAttributes(inherit).ToArray();case Module module:return(attributeType!=null)?module.GetCustomAttributes(attributeType).ToArray():module.GetCustomAttributes().ToArray();case ParameterInfo parameterInfo:return(attributeType!=null)?parameterInfo.GetCustomAttributes(attributeType,inherit).ToArray():parameterInfo.GetCustomAttributes(inherit).ToArray();}throw new Exception("Cannot get attributes from '{0}'.".FormatWith(CultureInfo.InvariantCulture,provider));}
#endif
public static StructMultiKey<string?,string>SplitFullyQualifiedTypeName(string fullyQualifiedTypeName){int?assemblyDelimiterIndex=GetAssemblyDelimiterIndex(fullyQualifiedTypeName);string typeName;string?assemblyName;if(assemblyDelimiterIndex!=null){typeName=fullyQualifiedTypeName.Trim(0,assemblyDelimiterIndex.GetValueOrDefault());assemblyName=fullyQualifiedTypeName.Trim(assemblyDelimiterIndex.GetValueOrDefault()+1,fullyQualifiedTypeName.Length-assemblyDelimiterIndex.GetValueOrDefault()-1);}else{typeName=fullyQualifiedTypeName;assemblyName=null;}return new StructMultiKey<string?,string>(assemblyName,typeName);}private static int?GetAssemblyDelimiterIndex(string fullyQualifiedTypeName){int scope=0;for(int i=0;i<fullyQualifiedTypeName.Length;i++){char current=fullyQualifiedTypeName[i];switch(current){case'[':scope++;break;case']':scope--;break;case',':if(scope==0){return i;}break;}}return null;}public static MemberInfo GetMemberInfoFromType(Type targetType,MemberInfo memberInfo){const BindingFlags bindingAttr=BindingFlags.Instance|BindingFlags.Static|BindingFlags.Public|BindingFlags.NonPublic;switch(memberInfo.MemberType()){case MemberTypes.Property:PropertyInfo propertyInfo=(PropertyInfo)memberInfo;Type[]types=propertyInfo.GetIndexParameters().Select(p=>p.ParameterType).ToArray();return targetType.GetProperty(propertyInfo.Name,bindingAttr,null,propertyInfo.PropertyType,types,null);default:return targetType.GetMember(memberInfo.Name,memberInfo.MemberType(),bindingAttr).SingleOrDefault();}}public static IEnumerable<FieldInfo>GetFields(Type targetType,BindingFlags bindingAttr){ValidationUtils.ArgumentNotNull(targetType,nameof(targetType));List<MemberInfo>fieldInfos=new List<MemberInfo>(targetType.GetFields(bindingAttr));
#if !PORTABLE
GetChildPrivateFields(fieldInfos,targetType,bindingAttr);
#endif
return fieldInfos.Cast<FieldInfo>();}
#if !PORTABLE
private static void GetChildPrivateFields(IList<MemberInfo>initialFields,Type targetType,BindingFlags bindingAttr){if((bindingAttr&BindingFlags.NonPublic)!=0){BindingFlags nonPublicBindingAttr=bindingAttr.RemoveFlag(BindingFlags.Public);while((targetType=targetType.BaseType())!=null){IEnumerable<FieldInfo>childPrivateFields=targetType.GetFields(nonPublicBindingAttr).Where(f=>f.IsPrivate);initialFields.AddRange(childPrivateFields);}}}
#endif
public static IEnumerable<PropertyInfo>GetProperties(Type targetType,BindingFlags bindingAttr){ValidationUtils.ArgumentNotNull(targetType,nameof(targetType));List<PropertyInfo>propertyInfos=new List<PropertyInfo>(targetType.GetProperties(bindingAttr));if(targetType.IsInterface()){foreach(Type i in targetType.GetInterfaces()){propertyInfos.AddRange(i.GetProperties(bindingAttr));}}GetChildPrivateProperties(propertyInfos,targetType,bindingAttr);for(int i=0;i<propertyInfos.Count;i++){PropertyInfo member=propertyInfos[i];if(member.DeclaringType!=targetType){PropertyInfo declaredMember=(PropertyInfo)GetMemberInfoFromType(member.DeclaringType,member);propertyInfos[i]=declaredMember;}}return propertyInfos;}public static BindingFlags RemoveFlag(this BindingFlags bindingAttr,BindingFlags flag){return((bindingAttr&flag)==flag)?bindingAttr^flag:bindingAttr;}private static void GetChildPrivateProperties(IList<PropertyInfo>initialProperties,Type targetType,BindingFlags bindingAttr){while((targetType=targetType.BaseType())!=null){foreach(PropertyInfo propertyInfo in targetType.GetProperties(bindingAttr)){PropertyInfo subTypeProperty=propertyInfo;if(!subTypeProperty.IsVirtual()){if(!IsPublic(subTypeProperty)){int index=initialProperties.IndexOf(p=>p.Name==subTypeProperty.Name);if(index==-1){initialProperties.Add(subTypeProperty);}else{PropertyInfo childProperty=initialProperties[index];if(!IsPublic(childProperty)){initialProperties[index]=subTypeProperty;}}}else{int index=initialProperties.IndexOf(p=>p.Name==subTypeProperty.Name&&p.DeclaringType==subTypeProperty.DeclaringType);if(index==-1){initialProperties.Add(subTypeProperty);}}}else{Type subTypePropertyDeclaringType=subTypeProperty.GetBaseDefinition()?.DeclaringType??subTypeProperty.DeclaringType;int index=initialProperties.IndexOf(p=>p.Name==subTypeProperty.Name&&p.IsVirtual()&&(p.GetBaseDefinition()?.DeclaringType??p.DeclaringType).IsAssignableFrom(subTypePropertyDeclaringType));if(index==-1){initialProperties.Add(subTypeProperty);}}}}}public static bool IsMethodOverridden(Type currentType,Type methodDeclaringType,string method){bool isMethodOverriden=currentType.GetMethods(BindingFlags.Public|BindingFlags.NonPublic|BindingFlags.Instance).Any(info=>info.Name==method&&info.DeclaringType!=methodDeclaringType&&info.GetBaseDefinition().DeclaringType==methodDeclaringType);return isMethodOverriden;}public static object?GetDefaultValue(Type type){if(!type.IsValueType()){return null;}switch(ConvertUtils.GetTypeCode(type)){case PrimitiveTypeCode.Boolean:return false;case PrimitiveTypeCode.Char:case PrimitiveTypeCode.SByte:case PrimitiveTypeCode.Byte:case PrimitiveTypeCode.Int16:case PrimitiveTypeCode.UInt16:case PrimitiveTypeCode.Int32:case PrimitiveTypeCode.UInt32:return 0;case PrimitiveTypeCode.Int64:case PrimitiveTypeCode.UInt64:return 0L;case PrimitiveTypeCode.Single:return 0f;case PrimitiveTypeCode.Double:return 0.0;case PrimitiveTypeCode.Decimal:return 0m;case PrimitiveTypeCode.DateTime:return new DateTime();
#if HAVE_BIG_INTEGER
case PrimitiveTypeCode.BigInteger:return new BigInteger();
#endif
case PrimitiveTypeCode.Guid:return new Guid();
#if HAVE_DATE_TIME_OFFSET
case PrimitiveTypeCode.DateTimeOffset:return new DateTimeOffset();
#endif
}if(IsNullable(type)){return null;}return Activator.CreateInstance(type);}}}namespace Newtonsoft.Json.Serialization{public class ReflectionValueProvider:IValueProvider{private readonly MemberInfo _memberInfo;public ReflectionValueProvider(MemberInfo memberInfo){ValidationUtils.ArgumentNotNull(memberInfo,nameof(memberInfo));_memberInfo=memberInfo;}public void SetValue(object target,object?value){try{ReflectionUtils.SetMemberValue(_memberInfo,target,value);}catch(Exception ex){throw new JsonSerializationException("Error setting value to '{0}' on '{1}'.".FormatWith(CultureInfo.InvariantCulture,_memberInfo.Name,target.GetType()),ex);}}public object?GetValue(object target){try{if(_memberInfo is PropertyInfo propertyInfo&&propertyInfo.PropertyType.IsByRef){throw new InvalidOperationException("Could not create getter for {0}. ByRef return values are not supported.".FormatWith(CultureInfo.InvariantCulture,propertyInfo));}return ReflectionUtils.GetMemberValue(_memberInfo,target);}catch(Exception ex){throw new JsonSerializationException("Error getting value from '{0}' on '{1}'.".FormatWith(CultureInfo.InvariantCulture,_memberInfo.Name,target.GetType()),ex);}}}}namespace Newtonsoft.Json.Converters{public class RegexConverter:JsonConverter{private const string PatternName="Pattern";private const string OptionsName="Options";public override void WriteJson(JsonWriter writer,object?value,JsonSerializer serializer){if(value==null){writer.WriteNull();return;}Regex regex=(Regex)value;
if(writer is BsonWriter bsonWriter){WriteBson(bsonWriter,regex);}
else{WriteJson(writer,regex,serializer);}}private bool HasFlag(RegexOptions options,RegexOptions flag){return((options&flag)==flag);}
private void WriteBson(BsonWriter writer,Regex regex){string?options=null;if(HasFlag(regex.Options,RegexOptions.IgnoreCase)){options+="i";}if(HasFlag(regex.Options,RegexOptions.Multiline)){options+="m";}if(HasFlag(regex.Options,RegexOptions.Singleline)){options+="s";}options+="u";if(HasFlag(regex.Options,RegexOptions.ExplicitCapture)){options+="x";}writer.WriteRegex(regex.ToString(),options);}
private void WriteJson(JsonWriter writer,Regex regex,JsonSerializer serializer){DefaultContractResolver?resolver=serializer.ContractResolver as DefaultContractResolver;writer.WriteStartObject();writer.WritePropertyName((resolver!=null)?resolver.GetResolvedPropertyName(PatternName):PatternName);writer.WriteValue(regex.ToString());writer.WritePropertyName((resolver!=null)?resolver.GetResolvedPropertyName(OptionsName):OptionsName);serializer.Serialize(writer,regex.Options);writer.WriteEndObject();}public override object?ReadJson(JsonReader reader,Type objectType,object?existingValue,JsonSerializer serializer){switch(reader.TokenType){case JsonToken.StartObject:return ReadRegexObject(reader,serializer);case JsonToken.String:return ReadRegexString(reader);case JsonToken.Null:return null;}throw JsonSerializationException.Create(reader,"Unexpected token when reading Regex.");}private object ReadRegexString(JsonReader reader){string regexText=(string)reader.Value!;if(regexText.Length>0&&regexText[0]=='/'){int patternOptionDelimiterIndex=regexText.LastIndexOf('/');if(patternOptionDelimiterIndex>0){string patternText=regexText.Substring(1,patternOptionDelimiterIndex-1);string optionsText=regexText.Substring(patternOptionDelimiterIndex+1);RegexOptions options=MiscellaneousUtils.GetRegexOptions(optionsText);return new Regex(patternText,options);}}throw JsonSerializationException.Create(reader,"Regex pattern must be enclosed by slashes.");}private Regex ReadRegexObject(JsonReader reader,JsonSerializer serializer){string?pattern=null;RegexOptions?options=null;while(reader.Read()){switch(reader.TokenType){case JsonToken.PropertyName:string propertyName=reader.Value!.ToString();if(!reader.Read()){throw JsonSerializationException.Create(reader,"Unexpected end when reading Regex.");}if(string.Equals(propertyName,PatternName,StringComparison.OrdinalIgnoreCase)){pattern=(string?)reader.Value;}else if(string.Equals(propertyName,OptionsName,StringComparison.OrdinalIgnoreCase)){options=serializer.Deserialize<RegexOptions>(reader);}else{reader.Skip();}break;case JsonToken.Comment:break;case JsonToken.EndObject:if(pattern==null){throw JsonSerializationException.Create(reader,"Error deserializing Regex. No pattern found.");}return new Regex(pattern,options??RegexOptions.None);}}throw JsonSerializationException.Create(reader,"Unexpected end when reading Regex.");}public override bool CanConvert(Type objectType){return objectType.Name==nameof(Regex)&&IsRegex(objectType);}[MethodImpl(MethodImplOptions.NoInlining)]private bool IsRegex(Type objectType){return(objectType==typeof(Regex));}}}namespace Newtonsoft.Json{public enum Required{Default=0,AllowNull=1,Always=2,DisallowNull=3}}namespace Newtonsoft.Json.Linq.JsonPath{internal class RootFilter:PathFilter{public static readonly RootFilter Instance=new RootFilter();private RootFilter(){}public override IEnumerable<JToken>ExecuteFilter(JToken root,IEnumerable<JToken>current,JsonSelectSettings?settings){return new[]{root};}}}namespace Newtonsoft.Json.Linq.JsonPath{internal class ScanFilter:PathFilter{internal string?Name;public ScanFilter(string?name){Name=name;}public override IEnumerable<JToken>ExecuteFilter(JToken root,IEnumerable<JToken>current,JsonSelectSettings?settings){foreach(JToken c in current){if(Name==null){yield return c;}JToken?value=c;while(true){JContainer?container=value as JContainer;value=GetNextScanValue(c,container,value);if(value==null){break;}if(value is JProperty property){if(property.Name==Name){yield return property.Value;}}else{if(Name==null){yield return value;}}}}}}}namespace Newtonsoft.Json.Linq.JsonPath{internal class ScanMultipleFilter:PathFilter{private List<string>_names;public ScanMultipleFilter(List<string>names){_names=names;}public override IEnumerable<JToken>ExecuteFilter(JToken root,IEnumerable<JToken>current,JsonSelectSettings?settings){foreach(JToken c in current){JToken?value=c;while(true){JContainer?container=value as JContainer;value=GetNextScanValue(c,container,value);if(value==null){break;}if(value is JProperty property){foreach(string name in _names){if(property.Name==name){yield return property.Value;}}}}}}}}
#if (DOTNET || PORTABLE40 || PORTABLE)
namespace Newtonsoft.Json{[Obsolete("SerializationBinder is obsolete. Use ISerializationBinder instead.")]public abstract class SerializationBinder{public abstract Type BindToType(string?assemblyName,string typeName);public virtual void BindToName(Type serializedType,out string?assemblyName,out string?typeName){assemblyName=null;typeName=null;}}}
#endif
namespace Newtonsoft.Json.Serialization{internal class SerializationBinderAdapter:ISerializationBinder{
public readonly SerializationBinder SerializationBinder;
public SerializationBinderAdapter(SerializationBinder serializationBinder){SerializationBinder=serializationBinder;}
public Type BindToType(string?assemblyName,string typeName){return SerializationBinder.BindToType(assemblyName,typeName);}public void BindToName(Type serializedType,out string?assemblyName,out string?typeName){
#if HAVE_SERIALIZATION_BINDER_BIND_TO_NAME
SerializationBinder.BindToName(serializedType,out assemblyName,out typeName);
#else
assemblyName=null;typeName=null;
#endif
}}}namespace Newtonsoft.Json.Serialization{public class SnakeCaseNamingStrategy:NamingStrategy{public SnakeCaseNamingStrategy(bool processDictionaryKeys,bool overrideSpecifiedNames){ProcessDictionaryKeys=processDictionaryKeys;OverrideSpecifiedNames=overrideSpecifiedNames;}public SnakeCaseNamingStrategy(bool processDictionaryKeys,bool overrideSpecifiedNames,bool processExtensionDataNames):this(processDictionaryKeys,overrideSpecifiedNames){ProcessExtensionDataNames=processExtensionDataNames;}public SnakeCaseNamingStrategy(){}protected override string ResolvePropertyName(string name){return StringUtils.ToSnakeCase(name);}}}namespace Newtonsoft.Json.Utilities{internal struct StringBuffer{private char[]?_buffer;private int _position;public int Position{get=>_position;set=>_position=value;}public bool IsEmpty=>_buffer==null;public StringBuffer(IArrayPool<char>?bufferPool,int initalSize):this(BufferUtils.RentBuffer(bufferPool,initalSize)){}private StringBuffer(char[]buffer){_buffer=buffer;_position=0;}public void Append(IArrayPool<char>?bufferPool,char value){if(_position==_buffer!.Length){EnsureSize(bufferPool,1);}_buffer![_position++]=value;}public void Append(IArrayPool<char>?bufferPool,char[]buffer,int startIndex,int count){if(_position+count>=_buffer!.Length){EnsureSize(bufferPool,count);}Array.Copy(buffer,startIndex,_buffer,_position,count);_position+=count;}public void Clear(IArrayPool<char>?bufferPool){if(_buffer!=null){BufferUtils.ReturnBuffer(bufferPool,_buffer);_buffer=null;}_position=0;}private void EnsureSize(IArrayPool<char>?bufferPool,int appendLength){char[]newBuffer=BufferUtils.RentBuffer(bufferPool,(_position+appendLength)*2);if(_buffer!=null){Array.Copy(_buffer,newBuffer,_position);BufferUtils.ReturnBuffer(bufferPool,_buffer);}_buffer=newBuffer;}public override string ToString(){return ToString(0,_position);}public string ToString(int start,int length){return new string(_buffer,start,length);}public char[]?InternalBuffer=>_buffer;}}
#if !HAVE_LINQ
#else
#endif
namespace Newtonsoft.Json.Converters{public class StringEnumConverter:JsonConverter{[Obsolete("StringEnumConverter.CamelCaseText is obsolete. Set StringEnumConverter.NamingStrategy with CamelCaseNamingStrategy instead.")]public bool CamelCaseText{get=>NamingStrategy is CamelCaseNamingStrategy?true:false;set{if(value){if(NamingStrategy is CamelCaseNamingStrategy){return;}NamingStrategy=new CamelCaseNamingStrategy();}else{if(!(NamingStrategy is CamelCaseNamingStrategy)){return;}NamingStrategy=null;}}}public NamingStrategy?NamingStrategy{get;set;}public bool AllowIntegerValues{get;set;}=true;public StringEnumConverter(){}[Obsolete("StringEnumConverter(bool) is obsolete. Create a converter with StringEnumConverter(NamingStrategy, bool) instead.")]public StringEnumConverter(bool camelCaseText){if(camelCaseText){NamingStrategy=new CamelCaseNamingStrategy();}}public StringEnumConverter(NamingStrategy namingStrategy,bool allowIntegerValues=true){NamingStrategy=namingStrategy;AllowIntegerValues=allowIntegerValues;}public StringEnumConverter(Type namingStrategyType){ValidationUtils.ArgumentNotNull(namingStrategyType,nameof(namingStrategyType));NamingStrategy=JsonTypeReflector.CreateNamingStrategyInstance(namingStrategyType,null);}public StringEnumConverter(Type namingStrategyType,object[]namingStrategyParameters){ValidationUtils.ArgumentNotNull(namingStrategyType,nameof(namingStrategyType));NamingStrategy=JsonTypeReflector.CreateNamingStrategyInstance(namingStrategyType,namingStrategyParameters);}public StringEnumConverter(Type namingStrategyType,object[]namingStrategyParameters,bool allowIntegerValues){ValidationUtils.ArgumentNotNull(namingStrategyType,nameof(namingStrategyType));NamingStrategy=JsonTypeReflector.CreateNamingStrategyInstance(namingStrategyType,namingStrategyParameters);AllowIntegerValues=allowIntegerValues;}public override void WriteJson(JsonWriter writer,object?value,JsonSerializer serializer){if(value==null){writer.WriteNull();return;}Enum e=(Enum)value;if(!EnumUtils.TryToString(e.GetType(),value,NamingStrategy,out string?enumName)){if(!AllowIntegerValues){throw JsonSerializationException.Create(null,writer.ContainerPath,"Integer value {0} is not allowed.".FormatWith(CultureInfo.InvariantCulture,e.ToString("D")),null);}writer.WriteValue(value);}else{writer.WriteValue(enumName);}}public override object?ReadJson(JsonReader reader,Type objectType,object?existingValue,JsonSerializer serializer){if(reader.TokenType==JsonToken.Null){if(!ReflectionUtils.IsNullableType(objectType)){throw JsonSerializationException.Create(reader,"Cannot convert null value to {0}.".FormatWith(CultureInfo.InvariantCulture,objectType));}return null;}bool isNullable=ReflectionUtils.IsNullableType(objectType);Type t=isNullable?Nullable.GetUnderlyingType(objectType):objectType;try{if(reader.TokenType==JsonToken.String){string?enumText=reader.Value?.ToString();if(StringUtils.IsNullOrEmpty(enumText)&&isNullable){return null;}return EnumUtils.ParseEnum(t,NamingStrategy,enumText!,!AllowIntegerValues);}if(reader.TokenType==JsonToken.Integer){if(!AllowIntegerValues){throw JsonSerializationException.Create(reader,"Integer value {0} is not allowed.".FormatWith(CultureInfo.InvariantCulture,reader.Value));}return ConvertUtils.ConvertOrCast(reader.Value,CultureInfo.InvariantCulture,t);}}catch(Exception ex){throw JsonSerializationException.Create(reader,"Error converting value {0} to type '{1}'.".FormatWith(CultureInfo.InvariantCulture,MiscellaneousUtils.ToString(reader.Value),objectType),ex);}throw JsonSerializationException.Create(reader,"Unexpected token {0} when parsing enum.".FormatWith(CultureInfo.InvariantCulture,reader.TokenType));}public override bool CanConvert(Type objectType){Type t=(ReflectionUtils.IsNullableType(objectType))?Nullable.GetUnderlyingType(objectType):objectType;return t.IsEnum();}}}namespace Newtonsoft.Json{public enum StringEscapeHandling{Default=0,EscapeNonAscii=1,EscapeHtml=2}}namespace Newtonsoft.Json.Utilities{internal readonly struct StringReference{private readonly char[]_chars;private readonly int _startIndex;private readonly int _length;public char this[int i]=>_chars[i];public char[]Chars=>_chars;public int StartIndex=>_startIndex;public int Length=>_length;public StringReference(char[]chars,int startIndex,int length){_chars=chars;_startIndex=startIndex;_length=length;}public override string ToString(){return new string(_chars,_startIndex,_length);}}internal static class StringReferenceExtensions{public static int IndexOf(this StringReference s,char c,int startIndex,int length){int index=Array.IndexOf(s.Chars,c,s.StartIndex+startIndex,length);if(index==-1){return-1;}return index-s.StartIndex;}public static bool StartsWith(this StringReference s,string text){if(text.Length>s.Length){return false;}char[]chars=s.Chars;for(int i=0;i<text.Length;i++){if(text[i]!=chars[i+s.StartIndex]){return false;}}return true;}public static bool EndsWith(this StringReference s,string text){if(text.Length>s.Length){return false;}char[]chars=s.Chars;int start=s.StartIndex+s.Length-text.Length;for(int i=0;i<text.Length;i++){if(text[i]!=chars[i+start]){return false;}}return true;}}}
#if !HAVE_LINQ
#else
#endif
namespace Newtonsoft.Json.Utilities{internal static class StringUtils{public const string CarriageReturnLineFeed="\r\n";public const string Empty="";public const char CarriageReturn='\r';public const char LineFeed='\n';public const char Tab='\t';public static bool IsNullOrEmpty([NotNullWhen(false)]string?value){return string.IsNullOrEmpty(value);}public static string FormatWith(this string format,IFormatProvider provider,object?arg0){return format.FormatWith(provider,new object?[]{arg0});}public static string FormatWith(this string format,IFormatProvider provider,object?arg0,object?arg1){return format.FormatWith(provider,new object?[]{arg0,arg1});}public static string FormatWith(this string format,IFormatProvider provider,object?arg0,object?arg1,object?arg2){return format.FormatWith(provider,new object?[]{arg0,arg1,arg2});}public static string FormatWith(this string format,IFormatProvider provider,object?arg0,object?arg1,object?arg2,object?arg3){return format.FormatWith(provider,new object?[]{arg0,arg1,arg2,arg3});}private static string FormatWith(this string format,IFormatProvider provider,params object?[]args){ValidationUtils.ArgumentNotNull(format,nameof(format));return string.Format(provider,format,args);}public static bool IsWhiteSpace(string s){if(s==null){throw new ArgumentNullException(nameof(s));}if(s.Length==0){return false;}for(int i=0;i<s.Length;i++){if(!char.IsWhiteSpace(s[i])){return false;}}return true;}public static StringWriter CreateStringWriter(int capacity){StringBuilder sb=new StringBuilder(capacity);StringWriter sw=new StringWriter(sb,CultureInfo.InvariantCulture);return sw;}public static void ToCharAsUnicode(char c,char[]buffer){buffer[0]='\\';buffer[1]='u';buffer[2]=MathUtils.IntToHex((c>>12)&'\x000f');buffer[3]=MathUtils.IntToHex((c>>8)&'\x000f');buffer[4]=MathUtils.IntToHex((c>>4)&'\x000f');buffer[5]=MathUtils.IntToHex(c&'\x000f');}public static TSource ForgivingCaseSensitiveFind<TSource>(this IEnumerable<TSource>source,Serialization.Func<TSource,string>valueSelector,string testValue){if(source==null){throw new ArgumentNullException(nameof(source));}if(valueSelector==null){throw new ArgumentNullException(nameof(valueSelector));}IEnumerable<TSource>caseInsensitiveResults=source.Where(s=>string.Equals(valueSelector(s),testValue,StringComparison.OrdinalIgnoreCase));if(caseInsensitiveResults.Count()<=1){return caseInsensitiveResults.SingleOrDefault();}else{IEnumerable<TSource>caseSensitiveResults=source.Where(s=>string.Equals(valueSelector(s),testValue,StringComparison.Ordinal));return caseSensitiveResults.SingleOrDefault();}}public static string ToCamelCase(string s){if(StringUtils.IsNullOrEmpty(s)||!char.IsUpper(s[0])){return s;}char[]chars=s.ToCharArray();for(int i=0;i<chars.Length;i++){if(i==1&&!char.IsUpper(chars[i])){break;}bool hasNext=(i+1<chars.Length);if(i>0&&hasNext&&!char.IsUpper(chars[i+1])){if(char.IsSeparator(chars[i+1])){chars[i]=ToLower(chars[i]);}break;}chars[i]=ToLower(chars[i]);}return new string(chars);}private static char ToLower(char c){
#if HAVE_CHAR_TO_LOWER_WITH_CULTURE
c=char.ToLower(c,CultureInfo.InvariantCulture);
#else
c=char.ToLowerInvariant(c);
#endif
return c;}public static string ToSnakeCase(string s)=>ToSeparatedCase(s,'_');public static string ToKebabCase(string s)=>ToSeparatedCase(s,'-');private enum SeparatedCaseState{Start,Lower,Upper,NewWord}private static string ToSeparatedCase(string s,char separator){if(StringUtils.IsNullOrEmpty(s)){return s;}StringBuilder sb=new StringBuilder();SeparatedCaseState state=SeparatedCaseState.Start;for(int i=0;i<s.Length;i++){if(s[i]==' '){if(state!=SeparatedCaseState.Start){state=SeparatedCaseState.NewWord;}}else if(char.IsUpper(s[i])){switch(state){case SeparatedCaseState.Upper:bool hasNext=(i+1<s.Length);if(i>0&&hasNext){char nextChar=s[i+1];if(!char.IsUpper(nextChar)&&nextChar!=separator){sb.Append(separator);}}break;case SeparatedCaseState.Lower:case SeparatedCaseState.NewWord:sb.Append(separator);break;}char c;
#if HAVE_CHAR_TO_LOWER_WITH_CULTURE
c=char.ToLower(s[i],CultureInfo.InvariantCulture);
#else
c=char.ToLowerInvariant(s[i]);
#endif
sb.Append(c);state=SeparatedCaseState.Upper;}else if(s[i]==separator){sb.Append(separator);state=SeparatedCaseState.Start;}else{if(state==SeparatedCaseState.NewWord){sb.Append(separator);}sb.Append(s[i]);state=SeparatedCaseState.Lower;}}return sb.ToString();}public static bool IsHighSurrogate(char c){
#if HAVE_UNICODE_SURROGATE_DETECTION
return char.IsHighSurrogate(c);
#else
return(c>=55296&&c<=56319);
#endif
}public static bool IsLowSurrogate(char c){
#if HAVE_UNICODE_SURROGATE_DETECTION
return char.IsLowSurrogate(c);
#else
return(c>=56320&&c<=57343);
#endif
}public static bool StartsWith(this string source,char value){return(source.Length>0&&source[0]==value);}public static bool EndsWith(this string source,char value){return(source.Length>0&&source[source.Length-1]==value);}public static string Trim(this string s,int start,int length){if(s==null){throw new ArgumentNullException();}if(start<0){throw new ArgumentOutOfRangeException(nameof(start));}if(length<0){throw new ArgumentOutOfRangeException(nameof(length));}int end=start+length-1;if(end>=s.Length){throw new ArgumentOutOfRangeException(nameof(length));}for(;start<end;start++){if(!char.IsWhiteSpace(s[start])){break;}}for(;end>=start;end--){if(!char.IsWhiteSpace(s[end])){break;}}return s.Substring(start,end-start+1);}}}namespace Newtonsoft.Json.Utilities{internal readonly struct StructMultiKey<T1,T2>:IEquatable<StructMultiKey<T1,T2>>{public readonly T1 Value1;public readonly T2 Value2;public StructMultiKey(T1 v1,T2 v2){Value1=v1;Value2=v2;}public override int GetHashCode(){return(Value1?.GetHashCode()??0)^(Value2?.GetHashCode()??0);}public override bool Equals(object obj){if(!(obj is StructMultiKey<T1,T2>key)){return false;}return Equals(key);}public bool Equals(StructMultiKey<T1,T2>other){return(Equals(Value1,other.Value1)&&Equals(Value2,other.Value2));}}}
#if !HAVE_LINQ
#endif
#if HAVE_CONCURRENT_DICTIONARY
#endif
namespace Newtonsoft.Json.Utilities{internal class ThreadSafeStore<TKey,TValue>{
#if HAVE_CONCURRENT_DICTIONARY
private readonly ConcurrentDictionary<TKey,TValue>_concurrentStore;
#else
private readonly object _lock=new object();private Dictionary<TKey,TValue>_store;
#endif
private readonly Serialization.Func<TKey,TValue>_creator;public ThreadSafeStore(Serialization.Func<TKey,TValue>creator){ValidationUtils.ArgumentNotNull(creator,nameof(creator));_creator=creator;
#if HAVE_CONCURRENT_DICTIONARY
_concurrentStore=new ConcurrentDictionary<TKey,TValue>();
#else
_store=new Dictionary<TKey,TValue>();
#endif
}public TValue Get(TKey key){
#if HAVE_CONCURRENT_DICTIONARY
return _concurrentStore.GetOrAdd(key,_creator);
#else
if(!_store.TryGetValue(key,out TValue value)){return AddValue(key);}return value;
#endif
}
#if !HAVE_CONCURRENT_DICTIONARY
private TValue AddValue(TKey key){TValue value=_creator(key);lock(_lock){if(_store==null){_store=new Dictionary<TKey,TValue>();_store[key]=value;}else{if(_store.TryGetValue(key,out TValue checkValue)){return checkValue;}Dictionary<TKey,TValue>newStore=new Dictionary<TKey,TValue>(_store);newStore[key]=value;
#if HAVE_MEMORY_BARRIER
Thread.MemoryBarrier();
#endif
_store=newStore;}return value;}}
#endif
}}namespace Newtonsoft.Json.Serialization{internal class TraceJsonReader:JsonReader,IJsonLineInfo{private readonly JsonReader _innerReader;private readonly JsonTextWriter _textWriter;private readonly StringWriter _sw;public TraceJsonReader(JsonReader innerReader){_innerReader=innerReader;_sw=new StringWriter(CultureInfo.InvariantCulture);_sw.Write("Deserialized JSON: "+Environment.NewLine);_textWriter=new JsonTextWriter(_sw);_textWriter.Formatting=Formatting.Indented;}public string GetDeserializedJsonMessage(){return _sw.ToString();}public override bool Read(){bool value=_innerReader.Read();WriteCurrentToken();return value;}public override int?ReadAsInt32(){int?value=_innerReader.ReadAsInt32();WriteCurrentToken();return value;}public override string?ReadAsString(){string?value=_innerReader.ReadAsString();WriteCurrentToken();return value;}public override byte[]?ReadAsBytes(){byte[]?value=_innerReader.ReadAsBytes();WriteCurrentToken();return value;}public override decimal?ReadAsDecimal(){decimal?value=_innerReader.ReadAsDecimal();WriteCurrentToken();return value;}public override double?ReadAsDouble(){double?value=_innerReader.ReadAsDouble();WriteCurrentToken();return value;}public override bool?ReadAsBoolean(){bool?value=_innerReader.ReadAsBoolean();WriteCurrentToken();return value;}public override DateTime?ReadAsDateTime(){DateTime?value=_innerReader.ReadAsDateTime();WriteCurrentToken();return value;}
#if HAVE_DATE_TIME_OFFSET
public override DateTimeOffset?ReadAsDateTimeOffset(){DateTimeOffset?value=_innerReader.ReadAsDateTimeOffset();WriteCurrentToken();return value;}
#endif
public void WriteCurrentToken(){_textWriter.WriteToken(_innerReader,false,false,true);}public override int Depth=>_innerReader.Depth;public override string Path=>_innerReader.Path;public override char QuoteChar{get=>_innerReader.QuoteChar;protected internal set=>_innerReader.QuoteChar=value;}public override JsonToken TokenType=>_innerReader.TokenType;public override object?Value=>_innerReader.Value;public override Type?ValueType=>_innerReader.ValueType;public override void Close(){_innerReader.Close();}bool IJsonLineInfo.HasLineInfo(){return _innerReader is IJsonLineInfo lineInfo&&lineInfo.HasLineInfo();}int IJsonLineInfo.LineNumber=>(_innerReader is IJsonLineInfo lineInfo)?lineInfo.LineNumber:0;int IJsonLineInfo.LinePosition=>(_innerReader is IJsonLineInfo lineInfo)?lineInfo.LinePosition:0;}}
#if HAVE_BIG_INTEGER
#endif
namespace Newtonsoft.Json.Serialization{internal class TraceJsonWriter:JsonWriter{private readonly JsonWriter _innerWriter;private readonly JsonTextWriter _textWriter;private readonly StringWriter _sw;public TraceJsonWriter(JsonWriter innerWriter){_innerWriter=innerWriter;_sw=new StringWriter(CultureInfo.InvariantCulture);_sw.Write("Serialized JSON: "+Environment.NewLine);_textWriter=new JsonTextWriter(_sw);_textWriter.Formatting=Formatting.Indented;_textWriter.Culture=innerWriter.Culture;_textWriter.DateFormatHandling=innerWriter.DateFormatHandling;_textWriter.DateFormatString=innerWriter.DateFormatString;_textWriter.DateTimeZoneHandling=innerWriter.DateTimeZoneHandling;_textWriter.FloatFormatHandling=innerWriter.FloatFormatHandling;}public string GetSerializedJsonMessage(){return _sw.ToString();}public override void WriteValue(decimal value){_textWriter.WriteValue(value);_innerWriter.WriteValue(value);base.WriteValue(value);}public override void WriteValue(decimal?value){_textWriter.WriteValue(value);_innerWriter.WriteValue(value);if(value.HasValue){base.WriteValue(value.GetValueOrDefault());}else{base.WriteUndefined();}}public override void WriteValue(bool value){_textWriter.WriteValue(value);_innerWriter.WriteValue(value);base.WriteValue(value);}public override void WriteValue(bool?value){_textWriter.WriteValue(value);_innerWriter.WriteValue(value);if(value.HasValue){base.WriteValue(value.GetValueOrDefault());}else{base.WriteUndefined();}}public override void WriteValue(byte value){_textWriter.WriteValue(value);_innerWriter.WriteValue(value);base.WriteValue(value);}public override void WriteValue(byte?value){_textWriter.WriteValue(value);_innerWriter.WriteValue(value);if(value.HasValue){base.WriteValue(value.GetValueOrDefault());}else{base.WriteUndefined();}}public override void WriteValue(char value){_textWriter.WriteValue(value);_innerWriter.WriteValue(value);base.WriteValue(value);}public override void WriteValue(char?value){_textWriter.WriteValue(value);_innerWriter.WriteValue(value);if(value.HasValue){base.WriteValue(value.GetValueOrDefault());}else{base.WriteUndefined();}}public override void WriteValue(byte[]?value){_textWriter.WriteValue(value);_innerWriter.WriteValue(value);if(value==null){base.WriteUndefined();}else{base.WriteValue(value);}}public override void WriteValue(DateTime value){_textWriter.WriteValue(value);_innerWriter.WriteValue(value);base.WriteValue(value);}public override void WriteValue(DateTime?value){_textWriter.WriteValue(value);_innerWriter.WriteValue(value);if(value.HasValue){base.WriteValue(value.GetValueOrDefault());}else{base.WriteUndefined();}}
#if HAVE_DATE_TIME_OFFSET
public override void WriteValue(DateTimeOffset value){_textWriter.WriteValue(value);_innerWriter.WriteValue(value);base.WriteValue(value);}public override void WriteValue(DateTimeOffset?value){_textWriter.WriteValue(value);_innerWriter.WriteValue(value);if(value.HasValue){base.WriteValue(value.GetValueOrDefault());}else{base.WriteUndefined();}}
#endif
public override void WriteValue(double value){_textWriter.WriteValue(value);_innerWriter.WriteValue(value);base.WriteValue(value);}public override void WriteValue(double?value){_textWriter.WriteValue(value);_innerWriter.WriteValue(value);if(value.HasValue){base.WriteValue(value.GetValueOrDefault());}else{base.WriteUndefined();}}public override void WriteUndefined(){_textWriter.WriteUndefined();_innerWriter.WriteUndefined();base.WriteUndefined();}public override void WriteNull(){_textWriter.WriteNull();_innerWriter.WriteNull();base.WriteUndefined();}public override void WriteValue(float value){_textWriter.WriteValue(value);_innerWriter.WriteValue(value);base.WriteValue(value);}public override void WriteValue(float?value){_textWriter.WriteValue(value);_innerWriter.WriteValue(value);if(value.HasValue){base.WriteValue(value.GetValueOrDefault());}else{base.WriteUndefined();}}public override void WriteValue(Guid value){_textWriter.WriteValue(value);_innerWriter.WriteValue(value);base.WriteValue(value);}public override void WriteValue(Guid?value){_textWriter.WriteValue(value);_innerWriter.WriteValue(value);if(value.HasValue){base.WriteValue(value.GetValueOrDefault());}else{base.WriteUndefined();}}public override void WriteValue(int value){_textWriter.WriteValue(value);_innerWriter.WriteValue(value);base.WriteValue(value);}public override void WriteValue(int?value){_textWriter.WriteValue(value);_innerWriter.WriteValue(value);if(value.HasValue){base.WriteValue(value.GetValueOrDefault());}else{base.WriteUndefined();}}public override void WriteValue(long value){_textWriter.WriteValue(value);_innerWriter.WriteValue(value);base.WriteValue(value);}public override void WriteValue(long?value){_textWriter.WriteValue(value);_innerWriter.WriteValue(value);if(value.HasValue){base.WriteValue(value.GetValueOrDefault());}else{base.WriteUndefined();}}public override void WriteValue(object?value){
#if HAVE_BIG_INTEGER
if(value is BigInteger){_textWriter.WriteValue(value);_innerWriter.WriteValue(value);InternalWriteValue(JsonToken.Integer);}else
#endif
{_textWriter.WriteValue(value);_innerWriter.WriteValue(value);if(value==null){base.WriteUndefined();}else{InternalWriteValue(JsonToken.String);}}}public override void WriteValue(sbyte value){_textWriter.WriteValue(value);_innerWriter.WriteValue(value);base.WriteValue(value);}public override void WriteValue(sbyte?value){_textWriter.WriteValue(value);_innerWriter.WriteValue(value);if(value.HasValue){base.WriteValue(value.GetValueOrDefault());}else{base.WriteUndefined();}}public override void WriteValue(short value){_textWriter.WriteValue(value);_innerWriter.WriteValue(value);base.WriteValue(value);}public override void WriteValue(short?value){_textWriter.WriteValue(value);_innerWriter.WriteValue(value);if(value.HasValue){base.WriteValue(value.GetValueOrDefault());}else{base.WriteUndefined();}}public override void WriteValue(string?value){_textWriter.WriteValue(value);_innerWriter.WriteValue(value);base.WriteValue(value);}public override void WriteValue(TimeSpan value){_textWriter.WriteValue(value);_innerWriter.WriteValue(value);base.WriteValue(value);}public override void WriteValue(TimeSpan?value){_textWriter.WriteValue(value);_innerWriter.WriteValue(value);if(value.HasValue){base.WriteValue(value.GetValueOrDefault());}else{base.WriteUndefined();}}public override void WriteValue(uint value){_textWriter.WriteValue(value);_innerWriter.WriteValue(value);base.WriteValue(value);}public override void WriteValue(uint?value){_textWriter.WriteValue(value);_innerWriter.WriteValue(value);if(value.HasValue){base.WriteValue(value.GetValueOrDefault());}else{base.WriteUndefined();}}public override void WriteValue(ulong value){_textWriter.WriteValue(value);_innerWriter.WriteValue(value);base.WriteValue(value);}public override void WriteValue(ulong?value){_textWriter.WriteValue(value);_innerWriter.WriteValue(value);if(value.HasValue){base.WriteValue(value.GetValueOrDefault());}else{base.WriteUndefined();}}public override void WriteValue(Uri?value){_textWriter.WriteValue(value);_innerWriter.WriteValue(value);if(value==null){base.WriteUndefined();}else{base.WriteValue(value);}}public override void WriteValue(ushort value){_textWriter.WriteValue(value);_innerWriter.WriteValue(value);base.WriteValue(value);}public override void WriteValue(ushort?value){_textWriter.WriteValue(value);_innerWriter.WriteValue(value);if(value.HasValue){base.WriteValue(value.GetValueOrDefault());}else{base.WriteUndefined();}}public override void WriteWhitespace(string ws){_textWriter.WriteWhitespace(ws);_innerWriter.WriteWhitespace(ws);base.WriteWhitespace(ws);}public override void WriteComment(string?text){_textWriter.WriteComment(text);_innerWriter.WriteComment(text);base.WriteComment(text);}public override void WriteStartArray(){_textWriter.WriteStartArray();_innerWriter.WriteStartArray();base.WriteStartArray();}public override void WriteEndArray(){_textWriter.WriteEndArray();_innerWriter.WriteEndArray();base.WriteEndArray();}public override void WriteStartConstructor(string name){_textWriter.WriteStartConstructor(name);_innerWriter.WriteStartConstructor(name);base.WriteStartConstructor(name);}public override void WriteEndConstructor(){_textWriter.WriteEndConstructor();_innerWriter.WriteEndConstructor();base.WriteEndConstructor();}public override void WritePropertyName(string name){_textWriter.WritePropertyName(name);_innerWriter.WritePropertyName(name);base.WritePropertyName(name);}public override void WritePropertyName(string name,bool escape){_textWriter.WritePropertyName(name,escape);_innerWriter.WritePropertyName(name,escape);base.WritePropertyName(name);}public override void WriteStartObject(){_textWriter.WriteStartObject();_innerWriter.WriteStartObject();base.WriteStartObject();}public override void WriteEndObject(){_textWriter.WriteEndObject();_innerWriter.WriteEndObject();base.WriteEndObject();}public override void WriteRawValue(string?json){_textWriter.WriteRawValue(json);_innerWriter.WriteRawValue(json);InternalWriteValue(JsonToken.Undefined);}public override void WriteRaw(string?json){_textWriter.WriteRaw(json);_innerWriter.WriteRaw(json);base.WriteRaw(json);}public override void Close(){_textWriter.Close();_innerWriter.Close();base.Close();}public override void Flush(){_textWriter.Flush();_innerWriter.Flush();}}}
#if !HAVE_TRACE_WRITER
namespace Newtonsoft.Json{public enum TraceLevel{Off=0,Error=1,Warning=2,Info=3,Verbose=4}}
#endif
#if !HAVE_LINQ
#else
#endif
namespace Newtonsoft.Json.Utilities{internal static class TypeExtensions{
#if DOTNET || PORTABLE
#if !DOTNET
private static readonly BindingFlags DefaultFlags=BindingFlags.Public|BindingFlags.Static|BindingFlags.Instance;public static MethodInfo?GetGetMethod(this PropertyInfo propertyInfo){return propertyInfo.GetGetMethod(false);}public static MethodInfo?GetGetMethod(this PropertyInfo propertyInfo,bool nonPublic){MethodInfo getMethod=propertyInfo.GetMethod;if(getMethod!=null&&(getMethod.IsPublic||nonPublic)){return getMethod;}return null;}public static MethodInfo?GetSetMethod(this PropertyInfo propertyInfo){return propertyInfo.GetSetMethod(false);}public static MethodInfo?GetSetMethod(this PropertyInfo propertyInfo,bool nonPublic){MethodInfo setMethod=propertyInfo.SetMethod;if(setMethod!=null&&(setMethod.IsPublic||nonPublic)){return setMethod;}return null;}
#endif
public static bool IsSubclassOf(this Type type,Type c){return type.GetTypeInfo().IsSubclassOf(c);}
#if !DOTNET
public static bool IsAssignableFrom(this Type type,Type c){return type.GetTypeInfo().IsAssignableFrom(c.GetTypeInfo());}
#endif
public static bool IsInstanceOfType(this Type type,object?o){if(o==null){return false;}return type.IsAssignableFrom(o.GetType());}
#endif
public static MethodInfo Method(this Delegate d){
#if HAVE_FULL_REFLECTION
return d.Method;
#else
return d.GetMethodInfo();
#endif
}public static MemberTypes MemberType(this MemberInfo memberInfo){
#if !(DOTNET || PORTABLE || PORTABLE40)
return memberInfo.MemberType;
#else
if(memberInfo is PropertyInfo){return MemberTypes.Property;}else if(memberInfo is FieldInfo){return MemberTypes.Field;}else if(memberInfo is EventInfo){return MemberTypes.Event;}else if(memberInfo is MethodInfo){return MemberTypes.Method;}else{return default;}
#endif
}public static bool ContainsGenericParameters(this Type type){
#if HAVE_FULL_REFLECTION
return type.ContainsGenericParameters;
#else
return type.GetTypeInfo().ContainsGenericParameters;
#endif
}public static bool IsInterface(this Type type){
#if HAVE_FULL_REFLECTION
return type.IsInterface;
#else
return type.GetTypeInfo().IsInterface;
#endif
}public static bool IsGenericType(this Type type){
#if HAVE_FULL_REFLECTION
return type.IsGenericType;
#else
return type.GetTypeInfo().IsGenericType;
#endif
}public static bool IsGenericTypeDefinition(this Type type){
#if HAVE_FULL_REFLECTION
return type.IsGenericTypeDefinition;
#else
return type.GetTypeInfo().IsGenericTypeDefinition;
#endif
}public static Type BaseType(this Type type){
#if HAVE_FULL_REFLECTION
return type.BaseType;
#else
return type.GetTypeInfo().BaseType;
#endif
}public static Assembly Assembly(this Type type){
#if HAVE_FULL_REFLECTION
return type.Assembly;
#else
return type.GetTypeInfo().Assembly;
#endif
}public static bool IsEnum(this Type type){
#if HAVE_FULL_REFLECTION
return type.IsEnum;
#else
return type.GetTypeInfo().IsEnum;
#endif
}public static bool IsClass(this Type type){
#if HAVE_FULL_REFLECTION
return type.IsClass;
#else
return type.GetTypeInfo().IsClass;
#endif
}public static bool IsSealed(this Type type){
#if HAVE_FULL_REFLECTION
return type.IsSealed;
#else
return type.GetTypeInfo().IsSealed;
#endif
}
#if (PORTABLE40 || DOTNET || PORTABLE)
public static PropertyInfo GetProperty(this Type type,string name,BindingFlags bindingFlags,object?placeholder1,Type propertyType,IList<Type>indexParameters,object?placeholder2){IEnumerable<PropertyInfo>propertyInfos=type.GetProperties(bindingFlags);return propertyInfos.Where(p=>{if(name!=null&&name!=p.Name){return false;}if(propertyType!=null&&propertyType!=p.PropertyType){return false;}if(indexParameters!=null){if(!p.GetIndexParameters().Select(ip=>ip.ParameterType).SequenceEqual(indexParameters)){return false;}}return true;}).SingleOrDefault();}public static IEnumerable<MemberInfo>GetMember(this Type type,string name,MemberTypes memberType,BindingFlags bindingFlags){
#if PORTABLE
return type.GetMemberInternal(name,memberType,bindingFlags);
#else
return type.GetMember(name,bindingFlags).Where(m=>{if((m.MemberType()|memberType)!=memberType){return false;}return true;});
#endif
}
#endif
#if (DOTNET || PORTABLE)
public static MethodInfo GetBaseDefinition(this MethodInfo method){return method.GetRuntimeBaseDefinition();}
#endif
#if (DOTNET || PORTABLE)
public static bool IsDefined(this Type type,Type attributeType,bool inherit){return type.GetTypeInfo().CustomAttributes.Any(a=>a.AttributeType==attributeType);}
#if !DOTNET
public static MethodInfo GetMethod(this Type type,string name){return type.GetMethod(name,DefaultFlags);}public static MethodInfo GetMethod(this Type type,string name,BindingFlags bindingFlags){return type.GetTypeInfo().GetDeclaredMethod(name);}public static MethodInfo GetMethod(this Type type,IList<Type>parameterTypes){return type.GetMethod(null,parameterTypes);}public static MethodInfo GetMethod(this Type type,string?name,IList<Type>parameterTypes){return type.GetMethod(name,DefaultFlags,null,parameterTypes,null);}public static MethodInfo GetMethod(this Type type,string?name,BindingFlags bindingFlags,object?placeHolder1,IList<Type>parameterTypes,object?placeHolder2){return MethodBinder.SelectMethod(type.GetTypeInfo().DeclaredMethods.Where(m=>(name==null||m.Name==name)&&TestAccessibility(m,bindingFlags)),parameterTypes);}public static IEnumerable<ConstructorInfo>GetConstructors(this Type type){return type.GetConstructors(DefaultFlags);}public static IEnumerable<ConstructorInfo>GetConstructors(this Type type,BindingFlags bindingFlags){return type.GetTypeInfo().DeclaredConstructors.Where(c=>TestAccessibility(c,bindingFlags));}public static ConstructorInfo GetConstructor(this Type type,IList<Type>parameterTypes){return type.GetConstructor(DefaultFlags,null,parameterTypes,null);}public static ConstructorInfo GetConstructor(this Type type,BindingFlags bindingFlags,object?placeholder1,IList<Type>parameterTypes,object?placeholder2){return MethodBinder.SelectMethod(type.GetConstructors(bindingFlags),parameterTypes);}public static MemberInfo[]GetMember(this Type type,string member){return type.GetMemberInternal(member,null,DefaultFlags);}public static MemberInfo[]GetMember(this Type type,string member,BindingFlags bindingFlags){return type.GetMemberInternal(member,null,bindingFlags);}public static MemberInfo[]GetMemberInternal(this Type type,string member,MemberTypes?memberType,BindingFlags bindingFlags){return type.GetTypeInfo().GetMembersRecursive().Where(m=>m.Name==member&&(memberType==null||(m.MemberType()|memberType)==memberType)&&TestAccessibility(m,bindingFlags)).ToArray();}public static FieldInfo?GetField(this Type type,string member){return type.GetField(member,DefaultFlags);}public static FieldInfo?GetField(this Type type,string member,BindingFlags bindingFlags){FieldInfo field=type.GetTypeInfo().GetDeclaredField(member);if(field==null||!TestAccessibility(field,bindingFlags)){return null;}return field;}public static IEnumerable<PropertyInfo>GetProperties(this Type type,BindingFlags bindingFlags){IList<PropertyInfo>properties=(bindingFlags.HasFlag(BindingFlags.DeclaredOnly))?type.GetTypeInfo().DeclaredProperties.ToList():type.GetTypeInfo().GetPropertiesRecursive();return properties.Where(p=>TestAccessibility(p,bindingFlags));}private static bool ContainsMemberName(IEnumerable<MemberInfo>members,string name){foreach(MemberInfo memberInfo in members){if(memberInfo.Name==name){return true;}}return false;}private static IList<MemberInfo>GetMembersRecursive(this TypeInfo type){TypeInfo?t=type;List<MemberInfo>members=new List<MemberInfo>();while(t!=null){foreach(MemberInfo member in t.DeclaredMembers){if(!ContainsMemberName(members,member.Name)){members.Add(member);}}t=t.BaseType?.GetTypeInfo();}return members;}private static IList<PropertyInfo>GetPropertiesRecursive(this TypeInfo type){TypeInfo?t=type;List<PropertyInfo>properties=new List<PropertyInfo>();while(t!=null){foreach(PropertyInfo member in t.DeclaredProperties){if(!ContainsMemberName(properties,member.Name)){properties.Add(member);}}t=t.BaseType?.GetTypeInfo();}return properties;}private static IList<FieldInfo>GetFieldsRecursive(this TypeInfo type){TypeInfo?t=type;List<FieldInfo>fields=new List<FieldInfo>();while(t!=null){foreach(FieldInfo member in t.DeclaredFields){if(!ContainsMemberName(fields,member.Name)){fields.Add(member);}}t=t.BaseType?.GetTypeInfo();}return fields;}public static IEnumerable<MethodInfo>GetMethods(this Type type,BindingFlags bindingFlags){return type.GetTypeInfo().DeclaredMethods;}public static PropertyInfo?GetProperty(this Type type,string name){return type.GetProperty(name,DefaultFlags);}public static PropertyInfo?GetProperty(this Type type,string name,BindingFlags bindingFlags){PropertyInfo property=type.GetTypeInfo().GetDeclaredProperty(name);if(property==null||!TestAccessibility(property,bindingFlags)){return null;}return property;}public static IEnumerable<FieldInfo>GetFields(this Type type){return type.GetFields(DefaultFlags);}public static IEnumerable<FieldInfo>GetFields(this Type type,BindingFlags bindingFlags){IList<FieldInfo>fields=(bindingFlags.HasFlag(BindingFlags.DeclaredOnly))?type.GetTypeInfo().DeclaredFields.ToList():type.GetTypeInfo().GetFieldsRecursive();return fields.Where(f=>TestAccessibility(f,bindingFlags)).ToList();}private static bool TestAccessibility(PropertyInfo member,BindingFlags bindingFlags){if(member.GetMethod!=null&&TestAccessibility(member.GetMethod,bindingFlags)){return true;}if(member.SetMethod!=null&&TestAccessibility(member.SetMethod,bindingFlags)){return true;}return false;}private static bool TestAccessibility(MemberInfo member,BindingFlags bindingFlags){if(member is FieldInfo f){return TestAccessibility(f,bindingFlags);}else if(member is MethodBase m){return TestAccessibility(m,bindingFlags);}else if(member is PropertyInfo p){return TestAccessibility(p,bindingFlags);}throw new ArgumentOutOfRangeException("Unexpected member type.");}private static bool TestAccessibility(FieldInfo member,BindingFlags bindingFlags){bool visibility=(member.IsPublic&&bindingFlags.HasFlag(BindingFlags.Public))||(!member.IsPublic&&bindingFlags.HasFlag(BindingFlags.NonPublic));bool instance=(member.IsStatic&&bindingFlags.HasFlag(BindingFlags.Static))||(!member.IsStatic&&bindingFlags.HasFlag(BindingFlags.Instance));return visibility&&instance;}private static bool TestAccessibility(MethodBase member,BindingFlags bindingFlags){bool visibility=(member.IsPublic&&bindingFlags.HasFlag(BindingFlags.Public))||(!member.IsPublic&&bindingFlags.HasFlag(BindingFlags.NonPublic));bool instance=(member.IsStatic&&bindingFlags.HasFlag(BindingFlags.Static))||(!member.IsStatic&&bindingFlags.HasFlag(BindingFlags.Instance));return visibility&&instance;}public static Type[]GetGenericArguments(this Type type){return type.GetTypeInfo().GenericTypeArguments;}public static IEnumerable<Type>GetInterfaces(this Type type){return type.GetTypeInfo().ImplementedInterfaces;}public static IEnumerable<MethodInfo>GetMethods(this Type type){return type.GetTypeInfo().DeclaredMethods;}
#endif
#endif
public static bool IsAbstract(this Type type){
#if HAVE_FULL_REFLECTION
return type.IsAbstract;
#else
return type.GetTypeInfo().IsAbstract;
#endif
}public static bool IsVisible(this Type type){
#if HAVE_FULL_REFLECTION
return type.IsVisible;
#else
return type.GetTypeInfo().IsVisible;
#endif
}public static bool IsValueType(this Type type){
#if HAVE_FULL_REFLECTION
return type.IsValueType;
#else
return type.GetTypeInfo().IsValueType;
#endif
}public static bool IsPrimitive(this Type type){
#if HAVE_FULL_REFLECTION
return type.IsPrimitive;
#else
return type.GetTypeInfo().IsPrimitive;
#endif
}public static bool AssignableToTypeName(this Type type,string fullTypeName,bool searchInterfaces,[NotNullWhen(true)]out Type?match){Type current=type;while(current!=null){if(string.Equals(current.FullName,fullTypeName,StringComparison.Ordinal)){match=current;return true;}current=current.BaseType();}if(searchInterfaces){foreach(Type i in type.GetInterfaces()){if(string.Equals(i.Name,fullTypeName,StringComparison.Ordinal)){match=type;return true;}}}match=null;return false;}public static bool AssignableToTypeName(this Type type,string fullTypeName,bool searchInterfaces){return type.AssignableToTypeName(fullTypeName,searchInterfaces,out _);}public static bool ImplementInterface(this Type type,Type interfaceType){for(Type currentType=type;currentType!=null;currentType=currentType.BaseType()){IEnumerable<Type>interfaces=currentType.GetInterfaces();foreach(Type i in interfaces){if(i==interfaceType||(i!=null&&i.ImplementInterface(interfaceType))){return true;}}}return false;}}}namespace Newtonsoft.Json{public enum TypeNameAssemblyFormatHandling{Simple=0,Full=1}}namespace Newtonsoft.Json{[Flags]public enum TypeNameHandling{None=0,Objects=1,Arrays=2,All=Objects|Arrays,Auto=4}}
namespace Newtonsoft.Json.Schema{[Obsolete("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]public enum UndefinedSchemaIdHandling{None=0,UseTypeName=1,UseAssemblyQualifiedName=2,}}namespace Newtonsoft.Json.Converters{public class UnixDateTimeConverter:DateTimeConverterBase{internal static readonly DateTime UnixEpoch=new DateTime(1970,1,1,0,0,0,DateTimeKind.Utc);public override void WriteJson(JsonWriter writer,object?value,JsonSerializer serializer){long seconds;if(value is DateTime dateTime){seconds=(long)(dateTime.ToUniversalTime()-UnixEpoch).TotalSeconds;}
#if HAVE_DATE_TIME_OFFSET
else if(value is DateTimeOffset dateTimeOffset){seconds=(long)(dateTimeOffset.ToUniversalTime()-UnixEpoch).TotalSeconds;}
#endif
else{throw new JsonSerializationException("Expected date object value.");}if(seconds<0){throw new JsonSerializationException("Cannot convert date value that is before Unix epoch of 00:00:00 UTC on 1 January 1970.");}writer.WriteValue(seconds);}public override object?ReadJson(JsonReader reader,Type objectType,object?existingValue,JsonSerializer serializer){bool nullable=ReflectionUtils.IsNullable(objectType);if(reader.TokenType==JsonToken.Null){if(!nullable){throw JsonSerializationException.Create(reader,"Cannot convert null value to {0}.".FormatWith(CultureInfo.InvariantCulture,objectType));}return null;}long seconds;if(reader.TokenType==JsonToken.Integer){seconds=(long)reader.Value!;}else if(reader.TokenType==JsonToken.String){if(!long.TryParse((string)reader.Value!,out seconds)){throw JsonSerializationException.Create(reader,"Cannot convert invalid value to {0}.".FormatWith(CultureInfo.InvariantCulture,objectType));}}else{throw JsonSerializationException.Create(reader,"Unexpected token parsing date. Expected Integer or String, got {0}.".FormatWith(CultureInfo.InvariantCulture,reader.TokenType));}if(seconds>=0){DateTime d=UnixEpoch.AddSeconds(seconds);
#if HAVE_DATE_TIME_OFFSET
Type t=(nullable)?Nullable.GetUnderlyingType(objectType):objectType;if(t==typeof(DateTimeOffset)){return new DateTimeOffset(d,TimeSpan.Zero);}
#endif
return d;}else{throw JsonSerializationException.Create(reader,"Cannot convert value that is before Unix epoch of 00:00:00 UTC on 1 January 1970 to {0}.".FormatWith(CultureInfo.InvariantCulture,objectType));}}}}
namespace Newtonsoft.Json.Schema{[Obsolete("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]public class ValidationEventArgs:EventArgs{private readonly JsonSchemaException _ex;internal ValidationEventArgs(JsonSchemaException ex){ValidationUtils.ArgumentNotNull(ex,nameof(ex));_ex=ex;}public JsonSchemaException Exception=>_ex;public string Path=>_ex.Path;public string Message=>_ex.Message;}}
namespace Newtonsoft.Json.Schema{[Obsolete("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]public delegate void ValidationEventHandler(object sender,ValidationEventArgs e);}namespace Newtonsoft.Json.Utilities{internal static class ValidationUtils{public static void ArgumentNotNull([NotNull]object?value,string parameterName){if(value==null){throw new ArgumentNullException(parameterName);}}}}namespace Newtonsoft.Json.Converters{public class VersionConverter:JsonConverter{public override void WriteJson(JsonWriter writer,object?value,JsonSerializer serializer){if(value==null){writer.WriteNull();}else if(value is Version){writer.WriteValue(value.ToString());}else{throw new JsonSerializationException("Expected Version object value");}}public override object?ReadJson(JsonReader reader,Type objectType,object?existingValue,JsonSerializer serializer){if(reader.TokenType==JsonToken.Null){return null;}else{if(reader.TokenType==JsonToken.String){try{Version v=new Version((string)reader.Value!);return v;}catch(Exception ex){throw JsonSerializationException.Create(reader,"Error parsing version string: {0}".FormatWith(CultureInfo.InvariantCulture,reader.Value),ex);}}else{throw JsonSerializationException.Create(reader,"Unexpected token or value when parsing version. Token: {0}, Value: {1}".FormatWith(CultureInfo.InvariantCulture,reader.TokenType,reader.Value));}}}public override bool CanConvert(Type objectType){return objectType==typeof(Version);}}}namespace Newtonsoft.Json{public enum WriteState{Error=0,Closed=1,Object=2,Array=3,Constructor=4,Property=5,Start=6}}
#if (HAVE_XML_DOCUMENT || HAVE_XLINQ)
#if HAVE_BIG_INTEGER
#endif
#if HAVE_XLINQ
#endif
namespace Newtonsoft.Json.Converters{
#if HAVE_XML_DOCUMENT
internal class XmlDocumentWrapper:XmlNodeWrapper,IXmlDocument{private readonly XmlDocument _document;public XmlDocumentWrapper(XmlDocument document):base(document){_document=document;}public IXmlNode CreateComment(string?data){return new XmlNodeWrapper(_document.CreateComment(data));}public IXmlNode CreateTextNode(string?text){return new XmlNodeWrapper(_document.CreateTextNode(text));}public IXmlNode CreateCDataSection(string?data){return new XmlNodeWrapper(_document.CreateCDataSection(data));}public IXmlNode CreateWhitespace(string?text){return new XmlNodeWrapper(_document.CreateWhitespace(text));}public IXmlNode CreateSignificantWhitespace(string?text){return new XmlNodeWrapper(_document.CreateSignificantWhitespace(text));}public IXmlNode CreateXmlDeclaration(string?version,string?encoding,string?standalone){return new XmlDeclarationWrapper(_document.CreateXmlDeclaration(version,encoding,standalone));}
#if HAVE_XML_DOCUMENT_TYPE
public IXmlNode CreateXmlDocumentType(string?name,string?publicId,string?systemId,string?internalSubset){return new XmlDocumentTypeWrapper(_document.CreateDocumentType(name,publicId,systemId,null));}
#endif
public IXmlNode CreateProcessingInstruction(string target,string?data){return new XmlNodeWrapper(_document.CreateProcessingInstruction(target,data));}public IXmlElement CreateElement(string elementName){return new XmlElementWrapper(_document.CreateElement(elementName));}public IXmlElement CreateElement(string qualifiedName,string namespaceUri){return new XmlElementWrapper(_document.CreateElement(qualifiedName,namespaceUri));}public IXmlNode CreateAttribute(string name,string?value){XmlNodeWrapper attribute=new XmlNodeWrapper(_document.CreateAttribute(name));attribute.Value=value;return attribute;}public IXmlNode CreateAttribute(string qualifiedName,string namespaceUri,string?value){XmlNodeWrapper attribute=new XmlNodeWrapper(_document.CreateAttribute(qualifiedName,namespaceUri));attribute.Value=value;return attribute;}public IXmlElement?DocumentElement{get{if(_document.DocumentElement==null){return null;}return new XmlElementWrapper(_document.DocumentElement);}}}internal class XmlElementWrapper:XmlNodeWrapper,IXmlElement{private readonly XmlElement _element;public XmlElementWrapper(XmlElement element):base(element){_element=element;}public void SetAttributeNode(IXmlNode attribute){XmlNodeWrapper xmlAttributeWrapper=(XmlNodeWrapper)attribute;_element.SetAttributeNode((XmlAttribute)xmlAttributeWrapper.WrappedNode!);}public string GetPrefixOfNamespace(string namespaceUri){return _element.GetPrefixOfNamespace(namespaceUri);}public bool IsEmpty=>_element.IsEmpty;}internal class XmlDeclarationWrapper:XmlNodeWrapper,IXmlDeclaration{private readonly XmlDeclaration _declaration;public XmlDeclarationWrapper(XmlDeclaration declaration):base(declaration){_declaration=declaration;}public string Version=>_declaration.Version;public string Encoding{get=>_declaration.Encoding;set=>_declaration.Encoding=value;}public string Standalone{get=>_declaration.Standalone;set=>_declaration.Standalone=value;}}
#if HAVE_XML_DOCUMENT_TYPE
internal class XmlDocumentTypeWrapper:XmlNodeWrapper,IXmlDocumentType{private readonly XmlDocumentType _documentType;public XmlDocumentTypeWrapper(XmlDocumentType documentType):base(documentType){_documentType=documentType;}public string Name=>_documentType.Name;public string System=>_documentType.SystemId;public string Public=>_documentType.PublicId;public string InternalSubset=>_documentType.InternalSubset;public override string?LocalName=>"DOCTYPE";}
#endif
internal class XmlNodeWrapper:IXmlNode{private readonly XmlNode _node;private List<IXmlNode>?_childNodes;private List<IXmlNode>?_attributes;public XmlNodeWrapper(XmlNode node){_node=node;}public object?WrappedNode=>_node;public XmlNodeType NodeType=>_node.NodeType;public virtual string?LocalName=>_node.LocalName;public List<IXmlNode>ChildNodes{get{if(_childNodes==null){if(!_node.HasChildNodes){_childNodes=XmlNodeConverter.EmptyChildNodes;}else{_childNodes=new List<IXmlNode>(_node.ChildNodes.Count);foreach(XmlNode childNode in _node.ChildNodes){_childNodes.Add(WrapNode(childNode));}}}return _childNodes;}}protected virtual bool HasChildNodes=>_node.HasChildNodes;internal static IXmlNode WrapNode(XmlNode node){switch(node.NodeType){case XmlNodeType.Element:return new XmlElementWrapper((XmlElement)node);case XmlNodeType.XmlDeclaration:return new XmlDeclarationWrapper((XmlDeclaration)node);
#if HAVE_XML_DOCUMENT_TYPE
case XmlNodeType.DocumentType:return new XmlDocumentTypeWrapper((XmlDocumentType)node);
#endif
default:return new XmlNodeWrapper(node);}}public List<IXmlNode>Attributes{get{if(_attributes==null){if(!HasAttributes){_attributes=XmlNodeConverter.EmptyChildNodes;}else{_attributes=new List<IXmlNode>(_node.Attributes.Count);foreach(XmlAttribute attribute in _node.Attributes){_attributes.Add(WrapNode(attribute));}}}return _attributes;}}private bool HasAttributes{get{if(_node is XmlElement element){return element.HasAttributes;}return _node.Attributes?.Count>0;}}public IXmlNode?ParentNode{get{XmlNode node=_node is XmlAttribute attribute?attribute.OwnerElement:_node.ParentNode;if(node==null){return null;}return WrapNode(node);}}public string?Value{get=>_node.Value;set=>_node.Value=value;}public IXmlNode AppendChild(IXmlNode newChild){XmlNodeWrapper xmlNodeWrapper=(XmlNodeWrapper)newChild;_node.AppendChild(xmlNodeWrapper._node);_childNodes=null;_attributes=null;return newChild;}public string?NamespaceUri=>_node.NamespaceURI;}
#endif
internal interface IXmlDocument:IXmlNode{IXmlNode CreateComment(string?text);IXmlNode CreateTextNode(string?text);IXmlNode CreateCDataSection(string?data);IXmlNode CreateWhitespace(string?text);IXmlNode CreateSignificantWhitespace(string?text);IXmlNode CreateXmlDeclaration(string?version,string?encoding,string?standalone);
#if HAVE_XML_DOCUMENT_TYPE
IXmlNode CreateXmlDocumentType(string?name,string?publicId,string?systemId,string?internalSubset);
#endif
IXmlNode CreateProcessingInstruction(string target,string?data);IXmlElement CreateElement(string elementName);IXmlElement CreateElement(string qualifiedName,string namespaceUri);IXmlNode CreateAttribute(string name,string?value);IXmlNode CreateAttribute(string qualifiedName,string namespaceUri,string?value);IXmlElement?DocumentElement{get;}}internal interface IXmlDeclaration:IXmlNode{string Version{get;}string Encoding{get;set;}string Standalone{get;set;}}internal interface IXmlDocumentType:IXmlNode{string Name{get;}string System{get;}string Public{get;}string InternalSubset{get;}}internal interface IXmlElement:IXmlNode{void SetAttributeNode(IXmlNode attribute);string GetPrefixOfNamespace(string namespaceUri);bool IsEmpty{get;}}internal interface IXmlNode{XmlNodeType NodeType{get;}string?LocalName{get;}List<IXmlNode>ChildNodes{get;}List<IXmlNode>Attributes{get;}IXmlNode?ParentNode{get;}string?Value{get;set;}IXmlNode AppendChild(IXmlNode newChild);string?NamespaceUri{get;}object?WrappedNode{get;}}
#if HAVE_XLINQ
internal class XDeclarationWrapper:XObjectWrapper,IXmlDeclaration{internal XDeclaration Declaration{get;}public XDeclarationWrapper(XDeclaration declaration):base(null){Declaration=declaration;}public override XmlNodeType NodeType=>XmlNodeType.XmlDeclaration;public string Version=>Declaration.Version;public string Encoding{get=>Declaration.Encoding;set=>Declaration.Encoding=value;}public string Standalone{get=>Declaration.Standalone;set=>Declaration.Standalone=value;}}internal class XDocumentTypeWrapper:XObjectWrapper,IXmlDocumentType{private readonly XDocumentType _documentType;public XDocumentTypeWrapper(XDocumentType documentType):base(documentType){_documentType=documentType;}public string Name=>_documentType.Name;public string System=>_documentType.SystemId;public string Public=>_documentType.PublicId;public string InternalSubset=>_documentType.InternalSubset;public override string?LocalName=>"DOCTYPE";}internal class XDocumentWrapper:XContainerWrapper,IXmlDocument{private XDocument Document=>(XDocument)WrappedNode!;public XDocumentWrapper(XDocument document):base(document){}public override List<IXmlNode>ChildNodes{get{List<IXmlNode>childNodes=base.ChildNodes;if(Document.Declaration!=null&&(childNodes.Count==0||childNodes[0].NodeType!=XmlNodeType.XmlDeclaration)){childNodes.Insert(0,new XDeclarationWrapper(Document.Declaration));}return childNodes;}}protected override bool HasChildNodes{get{if(base.HasChildNodes){return true;}return Document.Declaration!=null;}}public IXmlNode CreateComment(string?text){return new XObjectWrapper(new XComment(text));}public IXmlNode CreateTextNode(string?text){return new XObjectWrapper(new XText(text));}public IXmlNode CreateCDataSection(string?data){return new XObjectWrapper(new XCData(data));}public IXmlNode CreateWhitespace(string?text){return new XObjectWrapper(new XText(text));}public IXmlNode CreateSignificantWhitespace(string?text){return new XObjectWrapper(new XText(text));}public IXmlNode CreateXmlDeclaration(string?version,string?encoding,string?standalone){return new XDeclarationWrapper(new XDeclaration(version,encoding,standalone));}public IXmlNode CreateXmlDocumentType(string?name,string?publicId,string?systemId,string?internalSubset){return new XDocumentTypeWrapper(new XDocumentType(name,publicId,systemId,internalSubset));}public IXmlNode CreateProcessingInstruction(string target,string?data){return new XProcessingInstructionWrapper(new XProcessingInstruction(target,data));}public IXmlElement CreateElement(string elementName){return new XElementWrapper(new XElement(elementName));}public IXmlElement CreateElement(string qualifiedName,string namespaceUri){string localName=MiscellaneousUtils.GetLocalName(qualifiedName);return new XElementWrapper(new XElement(XName.Get(localName,namespaceUri)));}public IXmlNode CreateAttribute(string name,string?value){return new XAttributeWrapper(new XAttribute(name,value));}public IXmlNode CreateAttribute(string qualifiedName,string namespaceUri,string?value){string localName=MiscellaneousUtils.GetLocalName(qualifiedName);return new XAttributeWrapper(new XAttribute(XName.Get(localName,namespaceUri),value));}public IXmlElement?DocumentElement{get{if(Document.Root==null){return null;}return new XElementWrapper(Document.Root);}}public override IXmlNode AppendChild(IXmlNode newChild){if(newChild is XDeclarationWrapper declarationWrapper){Document.Declaration=declarationWrapper.Declaration;return declarationWrapper;}else{return base.AppendChild(newChild);}}}internal class XTextWrapper:XObjectWrapper{private XText Text=>(XText)WrappedNode!;public XTextWrapper(XText text):base(text){}public override string?Value{get=>Text.Value;set=>Text.Value=value;}public override IXmlNode?ParentNode{get{if(Text.Parent==null){return null;}return XContainerWrapper.WrapNode(Text.Parent);}}}internal class XCommentWrapper:XObjectWrapper{private XComment Text=>(XComment)WrappedNode!;public XCommentWrapper(XComment text):base(text){}public override string?Value{get=>Text.Value;set=>Text.Value=value;}public override IXmlNode?ParentNode{get{if(Text.Parent==null){return null;}return XContainerWrapper.WrapNode(Text.Parent);}}}internal class XProcessingInstructionWrapper:XObjectWrapper{private XProcessingInstruction ProcessingInstruction=>(XProcessingInstruction)WrappedNode!;public XProcessingInstructionWrapper(XProcessingInstruction processingInstruction):base(processingInstruction){}public override string?LocalName=>ProcessingInstruction.Target;public override string?Value{get=>ProcessingInstruction.Data;set=>ProcessingInstruction.Data=value;}}internal class XContainerWrapper:XObjectWrapper{private List<IXmlNode>?_childNodes;private XContainer Container=>(XContainer)WrappedNode!;public XContainerWrapper(XContainer container):base(container){}public override List<IXmlNode>ChildNodes{get{if(_childNodes==null){if(!HasChildNodes){_childNodes=XmlNodeConverter.EmptyChildNodes;}else{_childNodes=new List<IXmlNode>();foreach(XNode node in Container.Nodes()){_childNodes.Add(WrapNode(node));}}}return _childNodes;}}protected virtual bool HasChildNodes=>Container.LastNode!=null;public override IXmlNode?ParentNode{get{if(Container.Parent==null){return null;}return WrapNode(Container.Parent);}}internal static IXmlNode WrapNode(XObject node){if(node is XDocument document){return new XDocumentWrapper(document);}if(node is XElement element){return new XElementWrapper(element);}if(node is XContainer container){return new XContainerWrapper(container);}if(node is XProcessingInstruction pi){return new XProcessingInstructionWrapper(pi);}if(node is XText text){return new XTextWrapper(text);}if(node is XComment comment){return new XCommentWrapper(comment);}if(node is XAttribute attribute){return new XAttributeWrapper(attribute);}if(node is XDocumentType type){return new XDocumentTypeWrapper(type);}return new XObjectWrapper(node);}public override IXmlNode AppendChild(IXmlNode newChild){Container.Add(newChild.WrappedNode);_childNodes=null;return newChild;}}internal class XObjectWrapper:IXmlNode{private readonly XObject?_xmlObject;public XObjectWrapper(XObject?xmlObject){_xmlObject=xmlObject;}public object?WrappedNode=>_xmlObject;public virtual XmlNodeType NodeType=>_xmlObject?.NodeType??XmlNodeType.None;public virtual string?LocalName=>null;public virtual List<IXmlNode>ChildNodes=>XmlNodeConverter.EmptyChildNodes;public virtual List<IXmlNode>Attributes=>XmlNodeConverter.EmptyChildNodes;public virtual IXmlNode?ParentNode=>null;public virtual string?Value{get=>null;set=>throw new InvalidOperationException();}public virtual IXmlNode AppendChild(IXmlNode newChild){throw new InvalidOperationException();}public virtual string?NamespaceUri=>null;}internal class XAttributeWrapper:XObjectWrapper{private XAttribute Attribute=>(XAttribute)WrappedNode!;public XAttributeWrapper(XAttribute attribute):base(attribute){}public override string?Value{get=>Attribute.Value;set=>Attribute.Value=value;}public override string?LocalName=>Attribute.Name.LocalName;public override string?NamespaceUri=>Attribute.Name.NamespaceName;public override IXmlNode?ParentNode{get{if(Attribute.Parent==null){return null;}return XContainerWrapper.WrapNode(Attribute.Parent);}}}internal class XElementWrapper:XContainerWrapper,IXmlElement{private List<IXmlNode>?_attributes;private XElement Element=>(XElement)WrappedNode!;public XElementWrapper(XElement element):base(element){}public void SetAttributeNode(IXmlNode attribute){XObjectWrapper wrapper=(XObjectWrapper)attribute;Element.Add(wrapper.WrappedNode);_attributes=null;}public override List<IXmlNode>Attributes{get{if(_attributes==null){if(!Element.HasAttributes&&!HasImplicitNamespaceAttribute(NamespaceUri!)){_attributes=XmlNodeConverter.EmptyChildNodes;}else{_attributes=new List<IXmlNode>();foreach(XAttribute attribute in Element.Attributes()){_attributes.Add(new XAttributeWrapper(attribute));}string namespaceUri=NamespaceUri!;if(HasImplicitNamespaceAttribute(namespaceUri)){_attributes.Insert(0,new XAttributeWrapper(new XAttribute("xmlns",namespaceUri)));}}}return _attributes;}}private bool HasImplicitNamespaceAttribute(string namespaceUri){if(!StringUtils.IsNullOrEmpty(namespaceUri)&&namespaceUri!=ParentNode?.NamespaceUri){if(StringUtils.IsNullOrEmpty(GetPrefixOfNamespace(namespaceUri))){bool namespaceDeclared=false;if(Element.HasAttributes){foreach(XAttribute attribute in Element.Attributes()){if(attribute.Name.LocalName=="xmlns"&&StringUtils.IsNullOrEmpty(attribute.Name.NamespaceName)&&attribute.Value==namespaceUri){namespaceDeclared=true;}}}if(!namespaceDeclared){return true;}}}return false;}public override IXmlNode AppendChild(IXmlNode newChild){IXmlNode result=base.AppendChild(newChild);_attributes=null;return result;}public override string?Value{get=>Element.Value;set=>Element.Value=value;}public override string?LocalName=>Element.Name.LocalName;public override string?NamespaceUri=>Element.Name.NamespaceName;public string GetPrefixOfNamespace(string namespaceUri){return Element.GetPrefixOfNamespace(namespaceUri);}public bool IsEmpty=>Element.IsEmpty;}
#endif
public class XmlNodeConverter:JsonConverter{internal static readonly List<IXmlNode>EmptyChildNodes=new List<IXmlNode>();private const string TextName="#text";private const string CommentName="#comment";private const string CDataName="#cdata-section";private const string WhitespaceName="#whitespace";private const string SignificantWhitespaceName="#significant-whitespace";private const string DeclarationName="?xml";private const string JsonNamespaceUri="http://james.newtonking.com/projects/json";public string?DeserializeRootElementName{get;set;}public bool WriteArrayAttribute{get;set;}public bool OmitRootObject{get;set;}public bool EncodeSpecialCharacters{get;set;}public override void WriteJson(JsonWriter writer,object?value,JsonSerializer serializer){if(value==null){writer.WriteNull();return;}IXmlNode node=WrapXml(value);XmlNamespaceManager manager=new XmlNamespaceManager(new NameTable());PushParentNamespaces(node,manager);if(!OmitRootObject){writer.WriteStartObject();}SerializeNode(writer,node,manager,!OmitRootObject);if(!OmitRootObject){writer.WriteEndObject();}}private IXmlNode WrapXml(object value){
#if HAVE_XLINQ
if(value is XObject xObject){return XContainerWrapper.WrapNode(xObject);}
#endif
#if HAVE_XML_DOCUMENT
if(value is XmlNode node){return XmlNodeWrapper.WrapNode(node);}
#endif
throw new ArgumentException("Value must be an XML object.",nameof(value));}private void PushParentNamespaces(IXmlNode node,XmlNamespaceManager manager){List<IXmlNode>?parentElements=null;IXmlNode?parent=node;while((parent=parent.ParentNode)!=null){if(parent.NodeType==XmlNodeType.Element){if(parentElements==null){parentElements=new List<IXmlNode>();}parentElements.Add(parent);}}if(parentElements!=null){parentElements.Reverse();foreach(IXmlNode parentElement in parentElements){manager.PushScope();foreach(IXmlNode attribute in parentElement.Attributes){if(attribute.NamespaceUri=="http://www.w3.org/2000/xmlns/"&&attribute.LocalName!="xmlns"){manager.AddNamespace(attribute.LocalName,attribute.Value);}}}}}private string ResolveFullName(IXmlNode node,XmlNamespaceManager manager){string?prefix=(node.NamespaceUri==null||(node.LocalName=="xmlns"&&node.NamespaceUri=="http://www.w3.org/2000/xmlns/"))?null:manager.LookupPrefix(node.NamespaceUri);if(!StringUtils.IsNullOrEmpty(prefix)){return prefix+":"+XmlConvert.DecodeName(node.LocalName);}else{return XmlConvert.DecodeName(node.LocalName);}}private string GetPropertyName(IXmlNode node,XmlNamespaceManager manager){switch(node.NodeType){case XmlNodeType.Attribute:if(node.NamespaceUri==JsonNamespaceUri){return"$"+node.LocalName;}else{return"@"+ResolveFullName(node,manager);}case XmlNodeType.CDATA:return CDataName;case XmlNodeType.Comment:return CommentName;case XmlNodeType.Element:if(node.NamespaceUri==JsonNamespaceUri){return"$"+node.LocalName;}else{return ResolveFullName(node,manager);}case XmlNodeType.ProcessingInstruction:return"?"+ResolveFullName(node,manager);case XmlNodeType.DocumentType:return"!"+ResolveFullName(node,manager);case XmlNodeType.XmlDeclaration:return DeclarationName;case XmlNodeType.SignificantWhitespace:return SignificantWhitespaceName;case XmlNodeType.Text:return TextName;case XmlNodeType.Whitespace:return WhitespaceName;default:throw new JsonSerializationException("Unexpected XmlNodeType when getting node name: "+node.NodeType);}}private bool IsArray(IXmlNode node){foreach(IXmlNode attribute in node.Attributes){if(attribute.LocalName=="Array"&&attribute.NamespaceUri==JsonNamespaceUri){return XmlConvert.ToBoolean(attribute.Value);}}return false;}private void SerializeGroupedNodes(JsonWriter writer,IXmlNode node,XmlNamespaceManager manager,bool writePropertyName){switch(node.ChildNodes.Count){case 0:{break;}case 1:{string nodeName=GetPropertyName(node.ChildNodes[0],manager);WriteGroupedNodes(writer,manager,writePropertyName,node.ChildNodes,nodeName);break;}default:{Dictionary<string,object>?nodesGroupedByName=null;string?nodeName=null;for(int i=0;i<node.ChildNodes.Count;i++){IXmlNode childNode=node.ChildNodes[i];string currentNodeName=GetPropertyName(childNode,manager);if(nodesGroupedByName==null){if(nodeName==null){nodeName=currentNodeName;}else if(currentNodeName==nodeName){}else{nodesGroupedByName=new Dictionary<string,object>();if(i>1){List<IXmlNode>nodes=new List<IXmlNode>(i);for(int j=0;j<i;j++){nodes.Add(node.ChildNodes[j]);}nodesGroupedByName.Add(nodeName,nodes);}else{nodesGroupedByName.Add(nodeName,node.ChildNodes[0]);}nodesGroupedByName.Add(currentNodeName,childNode);}}else{if(!nodesGroupedByName.TryGetValue(currentNodeName,out object value)){nodesGroupedByName.Add(currentNodeName,childNode);}else{if(!(value is List<IXmlNode>nodes)){nodes=new List<IXmlNode>{(IXmlNode)value!};nodesGroupedByName[currentNodeName]=nodes;}nodes.Add(childNode);}}}if(nodesGroupedByName==null){WriteGroupedNodes(writer,manager,writePropertyName,node.ChildNodes,nodeName!);}else{foreach(KeyValuePair<string,object>nodeNameGroup in nodesGroupedByName){if(nodeNameGroup.Value is List<IXmlNode>nodes){WriteGroupedNodes(writer,manager,writePropertyName,nodes,nodeNameGroup.Key);}else{WriteGroupedNodes(writer,manager,writePropertyName,(IXmlNode)nodeNameGroup.Value,nodeNameGroup.Key);}}}break;}}}private void WriteGroupedNodes(JsonWriter writer,XmlNamespaceManager manager,bool writePropertyName,List<IXmlNode>groupedNodes,string elementNames){bool writeArray=groupedNodes.Count!=1||IsArray(groupedNodes[0]);if(!writeArray){SerializeNode(writer,groupedNodes[0],manager,writePropertyName);}else{if(writePropertyName){writer.WritePropertyName(elementNames);}writer.WriteStartArray();for(int i=0;i<groupedNodes.Count;i++){SerializeNode(writer,groupedNodes[i],manager,false);}writer.WriteEndArray();}}private void WriteGroupedNodes(JsonWriter writer,XmlNamespaceManager manager,bool writePropertyName,IXmlNode node,string elementNames){bool writeArray=IsArray(node);if(!writeArray){SerializeNode(writer,node,manager,writePropertyName);}else{if(writePropertyName){writer.WritePropertyName(elementNames);}writer.WriteStartArray();SerializeNode(writer,node,manager,false);writer.WriteEndArray();}}private void SerializeNode(JsonWriter writer,IXmlNode node,XmlNamespaceManager manager,bool writePropertyName){switch(node.NodeType){case XmlNodeType.Document:case XmlNodeType.DocumentFragment:SerializeGroupedNodes(writer,node,manager,writePropertyName);break;case XmlNodeType.Element:if(IsArray(node)&&AllSameName(node)&&node.ChildNodes.Count>0){SerializeGroupedNodes(writer,node,manager,false);}else{manager.PushScope();foreach(IXmlNode attribute in node.Attributes){if(attribute.NamespaceUri=="http://www.w3.org/2000/xmlns/"){string namespacePrefix=(attribute.LocalName!="xmlns")?XmlConvert.DecodeName(attribute.LocalName):string.Empty;string?namespaceUri=attribute.Value;if(namespaceUri==null){throw new JsonSerializationException("Namespace attribute must have a value.");}manager.AddNamespace(namespacePrefix,namespaceUri);}}if(writePropertyName){writer.WritePropertyName(GetPropertyName(node,manager));}if(!ValueAttributes(node.Attributes)&&node.ChildNodes.Count==1&&node.ChildNodes[0].NodeType==XmlNodeType.Text){writer.WriteValue(node.ChildNodes[0].Value);}else if(node.ChildNodes.Count==0&&node.Attributes.Count==0){IXmlElement element=(IXmlElement)node;if(element.IsEmpty){writer.WriteNull();}else{writer.WriteValue(string.Empty);}}else{writer.WriteStartObject();for(int i=0;i<node.Attributes.Count;i++){SerializeNode(writer,node.Attributes[i],manager,true);}SerializeGroupedNodes(writer,node,manager,true);writer.WriteEndObject();}manager.PopScope();}break;case XmlNodeType.Comment:if(writePropertyName){writer.WriteComment(node.Value);}break;case XmlNodeType.Attribute:case XmlNodeType.Text:case XmlNodeType.CDATA:case XmlNodeType.ProcessingInstruction:case XmlNodeType.Whitespace:case XmlNodeType.SignificantWhitespace:if(node.NamespaceUri=="http://www.w3.org/2000/xmlns/"&&node.Value==JsonNamespaceUri){return;}if(node.NamespaceUri==JsonNamespaceUri){if(node.LocalName=="Array"){return;}}if(writePropertyName){writer.WritePropertyName(GetPropertyName(node,manager));}writer.WriteValue(node.Value);break;case XmlNodeType.XmlDeclaration:IXmlDeclaration declaration=(IXmlDeclaration)node;writer.WritePropertyName(GetPropertyName(node,manager));writer.WriteStartObject();if(!StringUtils.IsNullOrEmpty(declaration.Version)){writer.WritePropertyName("@version");writer.WriteValue(declaration.Version);}if(!StringUtils.IsNullOrEmpty(declaration.Encoding)){writer.WritePropertyName("@encoding");writer.WriteValue(declaration.Encoding);}if(!StringUtils.IsNullOrEmpty(declaration.Standalone)){writer.WritePropertyName("@standalone");writer.WriteValue(declaration.Standalone);}writer.WriteEndObject();break;case XmlNodeType.DocumentType:IXmlDocumentType documentType=(IXmlDocumentType)node;writer.WritePropertyName(GetPropertyName(node,manager));writer.WriteStartObject();if(!StringUtils.IsNullOrEmpty(documentType.Name)){writer.WritePropertyName("@name");writer.WriteValue(documentType.Name);}if(!StringUtils.IsNullOrEmpty(documentType.Public)){writer.WritePropertyName("@public");writer.WriteValue(documentType.Public);}if(!StringUtils.IsNullOrEmpty(documentType.System)){writer.WritePropertyName("@system");writer.WriteValue(documentType.System);}if(!StringUtils.IsNullOrEmpty(documentType.InternalSubset)){writer.WritePropertyName("@internalSubset");writer.WriteValue(documentType.InternalSubset);}writer.WriteEndObject();break;default:throw new JsonSerializationException("Unexpected XmlNodeType when serializing nodes: "+node.NodeType);}}private static bool AllSameName(IXmlNode node){foreach(IXmlNode childNode in node.ChildNodes){if(childNode.LocalName!=node.LocalName){return false;}}return true;}public override object?ReadJson(JsonReader reader,Type objectType,object?existingValue,JsonSerializer serializer){switch(reader.TokenType){case JsonToken.Null:return null;case JsonToken.StartObject:break;default:throw JsonSerializationException.Create(reader,"XmlNodeConverter can only convert JSON that begins with an object.");}XmlNamespaceManager manager=new XmlNamespaceManager(new NameTable());IXmlDocument?document=null;IXmlNode?rootNode=null;
#if HAVE_XLINQ
if(typeof(XObject).IsAssignableFrom(objectType)){if(objectType!=typeof(XContainer)&&objectType!=typeof(XDocument)&&objectType!=typeof(XElement)&&objectType!=typeof(XNode)&&objectType!=typeof(XObject)){throw JsonSerializationException.Create(reader,"XmlNodeConverter only supports deserializing XDocument, XElement, XContainer, XNode or XObject.");}XDocument d=new XDocument();document=new XDocumentWrapper(d);rootNode=document;}
#endif
#if HAVE_XML_DOCUMENT
if(typeof(XmlNode).IsAssignableFrom(objectType)){if(objectType!=typeof(XmlDocument)&&objectType!=typeof(XmlElement)&&objectType!=typeof(XmlNode)){throw JsonSerializationException.Create(reader,"XmlNodeConverter only supports deserializing XmlDocument, XmlElement or XmlNode.");}XmlDocument d=new XmlDocument();
#if HAVE_XML_DOCUMENT_TYPE
d.XmlResolver=null;
#endif
document=new XmlDocumentWrapper(d);rootNode=document;}
#endif
if(document==null||rootNode==null){throw JsonSerializationException.Create(reader,"Unexpected type when converting XML: "+objectType);}if(!StringUtils.IsNullOrEmpty(DeserializeRootElementName)){ReadElement(reader,document,rootNode,DeserializeRootElementName,manager);}else{reader.ReadAndAssert();DeserializeNode(reader,document,manager,rootNode);}
#if HAVE_XLINQ
if(objectType==typeof(XElement)){XElement element=(XElement)document.DocumentElement!.WrappedNode!;element.Remove();return element;}
#endif
#if HAVE_XML_DOCUMENT
if(objectType==typeof(XmlElement)){return document.DocumentElement!.WrappedNode;}
#endif
return document.WrappedNode;}private void DeserializeValue(JsonReader reader,IXmlDocument document,XmlNamespaceManager manager,string propertyName,IXmlNode currentNode){if(!EncodeSpecialCharacters){switch(propertyName){case TextName:currentNode.AppendChild(document.CreateTextNode(ConvertTokenToXmlValue(reader)));return;case CDataName:currentNode.AppendChild(document.CreateCDataSection(ConvertTokenToXmlValue(reader)));return;case WhitespaceName:currentNode.AppendChild(document.CreateWhitespace(ConvertTokenToXmlValue(reader)));return;case SignificantWhitespaceName:currentNode.AppendChild(document.CreateSignificantWhitespace(ConvertTokenToXmlValue(reader)));return;default:if(!StringUtils.IsNullOrEmpty(propertyName)&&propertyName[0]=='?'){CreateInstruction(reader,document,currentNode,propertyName);return;}
#if HAVE_XML_DOCUMENT_TYPE
else if(string.Equals(propertyName,"!DOCTYPE",StringComparison.OrdinalIgnoreCase)){CreateDocumentType(reader,document,currentNode);return;}
#endif
break;}}if(reader.TokenType==JsonToken.StartArray){ReadArrayElements(reader,document,propertyName,currentNode,manager);return;}ReadElement(reader,document,currentNode,propertyName,manager);}private void ReadElement(JsonReader reader,IXmlDocument document,IXmlNode currentNode,string propertyName,XmlNamespaceManager manager){if(StringUtils.IsNullOrEmpty(propertyName)){throw JsonSerializationException.Create(reader,"XmlNodeConverter cannot convert JSON with an empty property name to XML.");}Dictionary<string,string?>?attributeNameValues=null;string?elementPrefix=null;if(!EncodeSpecialCharacters){attributeNameValues=ShouldReadInto(reader)?ReadAttributeElements(reader,manager):null;elementPrefix=MiscellaneousUtils.GetPrefix(propertyName);if(propertyName.StartsWith('@')){string attributeName=propertyName.Substring(1);string?attributePrefix=MiscellaneousUtils.GetPrefix(attributeName);AddAttribute(reader,document,currentNode,propertyName,attributeName,manager,attributePrefix);return;}if(propertyName.StartsWith('$')){switch(propertyName){case JsonTypeReflector.ArrayValuesPropertyName:propertyName=propertyName.Substring(1);elementPrefix=manager.LookupPrefix(JsonNamespaceUri);CreateElement(reader,document,currentNode,propertyName,manager,elementPrefix,attributeNameValues);return;case JsonTypeReflector.IdPropertyName:case JsonTypeReflector.RefPropertyName:case JsonTypeReflector.TypePropertyName:case JsonTypeReflector.ValuePropertyName:string attributeName=propertyName.Substring(1);string attributePrefix=manager.LookupPrefix(JsonNamespaceUri);AddAttribute(reader,document,currentNode,propertyName,attributeName,manager,attributePrefix);return;}}}else{if(ShouldReadInto(reader)){reader.ReadAndAssert();}}CreateElement(reader,document,currentNode,propertyName,manager,elementPrefix,attributeNameValues);}private void CreateElement(JsonReader reader,IXmlDocument document,IXmlNode currentNode,string elementName,XmlNamespaceManager manager,string?elementPrefix,Dictionary<string,string?>?attributeNameValues){IXmlElement element=CreateElement(elementName,document,elementPrefix,manager);currentNode.AppendChild(element);if(attributeNameValues!=null){foreach(KeyValuePair<string,string?>nameValue in attributeNameValues){string encodedName=XmlConvert.EncodeName(nameValue.Key);string?attributePrefix=MiscellaneousUtils.GetPrefix(nameValue.Key);IXmlNode attribute=(!StringUtils.IsNullOrEmpty(attributePrefix))?document.CreateAttribute(encodedName,manager.LookupNamespace(attributePrefix)??string.Empty,nameValue.Value):document.CreateAttribute(encodedName,nameValue.Value);element.SetAttributeNode(attribute);}}switch(reader.TokenType){case JsonToken.String:case JsonToken.Integer:case JsonToken.Float:case JsonToken.Boolean:case JsonToken.Date:case JsonToken.Bytes:string?text=ConvertTokenToXmlValue(reader);if(text!=null){element.AppendChild(document.CreateTextNode(text));}break;case JsonToken.Null:break;case JsonToken.EndObject:manager.RemoveNamespace(string.Empty,manager.DefaultNamespace);break;default:manager.PushScope();DeserializeNode(reader,document,manager,element);manager.PopScope();manager.RemoveNamespace(string.Empty,manager.DefaultNamespace);break;}}private static void AddAttribute(JsonReader reader,IXmlDocument document,IXmlNode currentNode,string propertyName,string attributeName,XmlNamespaceManager manager,string?attributePrefix){if(currentNode.NodeType==XmlNodeType.Document){throw JsonSerializationException.Create(reader,"JSON root object has property '{0}' that will be converted to an attribute. A root object cannot have any attribute properties. Consider specifying a DeserializeRootElementName.".FormatWith(CultureInfo.InvariantCulture,propertyName));}string encodedName=XmlConvert.EncodeName(attributeName);string?attributeValue=ConvertTokenToXmlValue(reader);IXmlNode attribute=(!StringUtils.IsNullOrEmpty(attributePrefix))?document.CreateAttribute(encodedName,manager.LookupNamespace(attributePrefix),attributeValue):document.CreateAttribute(encodedName,attributeValue);((IXmlElement)currentNode).SetAttributeNode(attribute);}private static string?ConvertTokenToXmlValue(JsonReader reader){switch(reader.TokenType){case JsonToken.String:return reader.Value?.ToString();case JsonToken.Integer:
#if HAVE_BIG_INTEGER
if(reader.Value is BigInteger i){return i.ToString(CultureInfo.InvariantCulture);}
#endif
return XmlConvert.ToString(Convert.ToInt64(reader.Value,CultureInfo.InvariantCulture));case JsonToken.Float:{if(reader.Value is decimal d){return XmlConvert.ToString(d);}if(reader.Value is float f){return XmlConvert.ToString(f);}return XmlConvert.ToString(Convert.ToDouble(reader.Value,CultureInfo.InvariantCulture));}case JsonToken.Boolean:return XmlConvert.ToString(Convert.ToBoolean(reader.Value,CultureInfo.InvariantCulture));case JsonToken.Date:{
#if HAVE_DATE_TIME_OFFSET
if(reader.Value is DateTimeOffset offset){return XmlConvert.ToString(offset);}
#endif
DateTime d=Convert.ToDateTime(reader.Value,CultureInfo.InvariantCulture);
#if !PORTABLE || NETSTANDARD1_3
return XmlConvert.ToString(d,DateTimeUtils.ToSerializationMode(d.Kind));
#else
return d.ToString(DateTimeUtils.ToDateTimeFormat(d.Kind),CultureInfo.InvariantCulture);
#endif
}case JsonToken.Bytes:return Convert.ToBase64String((byte[])reader.Value!);case JsonToken.Null:return null;default:throw JsonSerializationException.Create(reader,"Cannot get an XML string value from token type '{0}'.".FormatWith(CultureInfo.InvariantCulture,reader.TokenType));}}private void ReadArrayElements(JsonReader reader,IXmlDocument document,string propertyName,IXmlNode currentNode,XmlNamespaceManager manager){string?elementPrefix=MiscellaneousUtils.GetPrefix(propertyName);IXmlElement nestedArrayElement=CreateElement(propertyName,document,elementPrefix,manager);currentNode.AppendChild(nestedArrayElement);int count=0;while(reader.Read()&&reader.TokenType!=JsonToken.EndArray){DeserializeValue(reader,document,manager,propertyName,nestedArrayElement);count++;}if(WriteArrayAttribute){AddJsonArrayAttribute(nestedArrayElement,document);}if(count==1&&WriteArrayAttribute){foreach(IXmlNode childNode in nestedArrayElement.ChildNodes){if(childNode is IXmlElement element&&element.LocalName==propertyName){AddJsonArrayAttribute(element,document);break;}}}}private void AddJsonArrayAttribute(IXmlElement element,IXmlDocument document){element.SetAttributeNode(document.CreateAttribute("json:Array",JsonNamespaceUri,"true"));
#if HAVE_XLINQ
if(element is XElementWrapper){if(element.GetPrefixOfNamespace(JsonNamespaceUri)==null){element.SetAttributeNode(document.CreateAttribute("xmlns:json","http://www.w3.org/2000/xmlns/",JsonNamespaceUri));}}
#endif
}private bool ShouldReadInto(JsonReader reader){switch(reader.TokenType){case JsonToken.String:case JsonToken.Null:case JsonToken.Boolean:case JsonToken.Integer:case JsonToken.Float:case JsonToken.Date:case JsonToken.Bytes:case JsonToken.StartConstructor:return false;}return true;}private Dictionary<string,string?>?ReadAttributeElements(JsonReader reader,XmlNamespaceManager manager){Dictionary<string,string?>?attributeNameValues=null;bool finished=false;while(!finished&&reader.Read()){switch(reader.TokenType){case JsonToken.PropertyName:string attributeName=reader.Value!.ToString();if(!StringUtils.IsNullOrEmpty(attributeName)){char firstChar=attributeName[0];string?attributeValue;switch(firstChar){case'@':if(attributeNameValues==null){attributeNameValues=new Dictionary<string,string?>();}attributeName=attributeName.Substring(1);reader.ReadAndAssert();attributeValue=ConvertTokenToXmlValue(reader);attributeNameValues.Add(attributeName,attributeValue);if(IsNamespaceAttribute(attributeName,out string?namespacePrefix)){manager.AddNamespace(namespacePrefix,attributeValue);}break;case'$':switch(attributeName){case JsonTypeReflector.ArrayValuesPropertyName:case JsonTypeReflector.IdPropertyName:case JsonTypeReflector.RefPropertyName:case JsonTypeReflector.TypePropertyName:case JsonTypeReflector.ValuePropertyName:string jsonPrefix=manager.LookupPrefix(JsonNamespaceUri);if(jsonPrefix==null){if(attributeNameValues==null){attributeNameValues=new Dictionary<string,string?>();}int?i=null;while(manager.LookupNamespace("json"+i)!=null){i=i.GetValueOrDefault()+1;}jsonPrefix="json"+i;attributeNameValues.Add("xmlns:"+jsonPrefix,JsonNamespaceUri);manager.AddNamespace(jsonPrefix,JsonNamespaceUri);}if(attributeName==JsonTypeReflector.ArrayValuesPropertyName){finished=true;break;}attributeName=attributeName.Substring(1);reader.ReadAndAssert();if(!JsonTokenUtils.IsPrimitiveToken(reader.TokenType)){throw JsonSerializationException.Create(reader,"Unexpected JsonToken: "+reader.TokenType);}if(attributeNameValues==null){attributeNameValues=new Dictionary<string,string?>();}attributeValue=reader.Value?.ToString();attributeNameValues.Add(jsonPrefix+":"+attributeName,attributeValue);break;default:finished=true;break;}break;default:finished=true;break;}}else{finished=true;}break;case JsonToken.EndObject:case JsonToken.Comment:finished=true;break;default:throw JsonSerializationException.Create(reader,"Unexpected JsonToken: "+reader.TokenType);}}return attributeNameValues;}private void CreateInstruction(JsonReader reader,IXmlDocument document,IXmlNode currentNode,string propertyName){if(propertyName==DeclarationName){string?version=null;string?encoding=null;string?standalone=null;while(reader.Read()&&reader.TokenType!=JsonToken.EndObject){switch(reader.Value?.ToString()){case"@version":reader.ReadAndAssert();version=ConvertTokenToXmlValue(reader);break;case"@encoding":reader.ReadAndAssert();encoding=ConvertTokenToXmlValue(reader);break;case"@standalone":reader.ReadAndAssert();standalone=ConvertTokenToXmlValue(reader);break;default:throw JsonSerializationException.Create(reader,"Unexpected property name encountered while deserializing XmlDeclaration: "+reader.Value);}}IXmlNode declaration=document.CreateXmlDeclaration(version,encoding,standalone);currentNode.AppendChild(declaration);}else{IXmlNode instruction=document.CreateProcessingInstruction(propertyName.Substring(1),ConvertTokenToXmlValue(reader));currentNode.AppendChild(instruction);}}
#if HAVE_XML_DOCUMENT_TYPE
private void CreateDocumentType(JsonReader reader,IXmlDocument document,IXmlNode currentNode){string?name=null;string?publicId=null;string?systemId=null;string?internalSubset=null;while(reader.Read()&&reader.TokenType!=JsonToken.EndObject){switch(reader.Value?.ToString()){case"@name":reader.ReadAndAssert();name=ConvertTokenToXmlValue(reader);break;case"@public":reader.ReadAndAssert();publicId=ConvertTokenToXmlValue(reader);break;case"@system":reader.ReadAndAssert();systemId=ConvertTokenToXmlValue(reader);break;case"@internalSubset":reader.ReadAndAssert();internalSubset=ConvertTokenToXmlValue(reader);break;default:throw JsonSerializationException.Create(reader,"Unexpected property name encountered while deserializing XmlDeclaration: "+reader.Value);}}IXmlNode documentType=document.CreateXmlDocumentType(name,publicId,systemId,internalSubset);currentNode.AppendChild(documentType);}
#endif
private IXmlElement CreateElement(string elementName,IXmlDocument document,string?elementPrefix,XmlNamespaceManager manager){string encodeName=EncodeSpecialCharacters?XmlConvert.EncodeLocalName(elementName):XmlConvert.EncodeName(elementName);string ns=StringUtils.IsNullOrEmpty(elementPrefix)?manager.DefaultNamespace:manager.LookupNamespace(elementPrefix);IXmlElement element=(!StringUtils.IsNullOrEmpty(ns))?document.CreateElement(encodeName,ns):document.CreateElement(encodeName);return element;}private void DeserializeNode(JsonReader reader,IXmlDocument document,XmlNamespaceManager manager,IXmlNode currentNode){do{switch(reader.TokenType){case JsonToken.PropertyName:if(currentNode.NodeType==XmlNodeType.Document&&document.DocumentElement!=null){throw JsonSerializationException.Create(reader,"JSON root object has multiple properties. The root object must have a single property in order to create a valid XML document. Consider specifying a DeserializeRootElementName.");}string propertyName=reader.Value!.ToString();reader.ReadAndAssert();if(reader.TokenType==JsonToken.StartArray){int count=0;while(reader.Read()&&reader.TokenType!=JsonToken.EndArray){DeserializeValue(reader,document,manager,propertyName,currentNode);count++;}if(count==1&&WriteArrayAttribute){MiscellaneousUtils.GetQualifiedNameParts(propertyName,out string?elementPrefix,out string localName);string ns=StringUtils.IsNullOrEmpty(elementPrefix)?manager.DefaultNamespace:manager.LookupNamespace(elementPrefix);foreach(IXmlNode childNode in currentNode.ChildNodes){if(childNode is IXmlElement element&&element.LocalName==localName&&element.NamespaceUri==ns){AddJsonArrayAttribute(element,document);break;}}}}else{DeserializeValue(reader,document,manager,propertyName,currentNode);}continue;case JsonToken.StartConstructor:string constructorName=reader.Value!.ToString();while(reader.Read()&&reader.TokenType!=JsonToken.EndConstructor){DeserializeValue(reader,document,manager,constructorName,currentNode);}break;case JsonToken.Comment:currentNode.AppendChild(document.CreateComment((string)reader.Value!));break;case JsonToken.EndObject:case JsonToken.EndArray:return;default:throw JsonSerializationException.Create(reader,"Unexpected JsonToken when deserializing node: "+reader.TokenType);}}while(reader.Read());}private bool IsNamespaceAttribute(string attributeName,[NotNullWhen(true)]out string?prefix){if(attributeName.StartsWith("xmlns",StringComparison.Ordinal)){if(attributeName.Length==5){prefix=string.Empty;return true;}else if(attributeName[5]==':'){prefix=attributeName.Substring(6,attributeName.Length-6);return true;}}prefix=null;return false;}private bool ValueAttributes(List<IXmlNode>c){foreach(IXmlNode xmlNode in c){if(xmlNode.NamespaceUri==JsonNamespaceUri){continue;}if(xmlNode.NamespaceUri=="http://www.w3.org/2000/xmlns/"&&xmlNode.Value==JsonNamespaceUri){continue;}return true;}return false;}public override bool CanConvert(Type valueType){
#if HAVE_XLINQ
if(valueType.AssignableToTypeName("System.Xml.Linq.XObject",false)){return IsXObject(valueType);}
#endif
#if HAVE_XML_DOCUMENT
if(valueType.AssignableToTypeName("System.Xml.XmlNode",false)){return IsXmlNode(valueType);}
#endif
return false;}
#if HAVE_XLINQ
[MethodImpl(MethodImplOptions.NoInlining)]private bool IsXObject(Type valueType){return typeof(XObject).IsAssignableFrom(valueType);}
#endif
#if HAVE_XML_DOCUMENT
[MethodImpl(MethodImplOptions.NoInlining)]private bool IsXmlNode(Type valueType){return typeof(XmlNode).IsAssignableFrom(valueType);}
#endif
}}
#endif
namespace Newtonsoft.Json.Linq.JsonPath{internal class ArrayIndexFilter:PathFilter{public int?Index{get;set;}public override IEnumerable<JToken>ExecuteFilter(JToken root,IEnumerable<JToken>current,JsonSelectSettings?settings){foreach(JToken t in current){if(Index!=null){JToken?v=GetTokenIndex(t,settings,Index.GetValueOrDefault());if(v!=null){yield return v;}}else{if(t is JArray||t is JConstructor){foreach(JToken v in t){yield return v;}}else{if(settings?.ErrorWhenNoMatch??false){throw new JsonException("Index * not valid on {0}.".FormatWith(CultureInfo.InvariantCulture,t.GetType().Name));}}}}}}}namespace Newtonsoft.Json.Linq.JsonPath{internal class ArrayMultipleIndexFilter:PathFilter{internal List<int>Indexes;public ArrayMultipleIndexFilter(List<int>indexes){Indexes=indexes;}public override IEnumerable<JToken>ExecuteFilter(JToken root,IEnumerable<JToken>current,JsonSelectSettings?settings){foreach(JToken t in current){foreach(int i in Indexes){JToken?v=GetTokenIndex(t,settings,i);if(v!=null){yield return v;}}}}}}namespace Newtonsoft.Json.Linq.JsonPath{internal class ArraySliceFilter:PathFilter{public int?Start{get;set;}public int?End{get;set;}public int?Step{get;set;}public override IEnumerable<JToken>ExecuteFilter(JToken root,IEnumerable<JToken>current,JsonSelectSettings?settings){if(Step==0){throw new JsonException("Step cannot be zero.");}foreach(JToken t in current){if(t is JArray a){int stepCount=Step??1;int startIndex=Start??((stepCount>0)?0:a.Count-1);int stopIndex=End??((stepCount>0)?a.Count:-1);if(Start<0){startIndex=a.Count+startIndex;}if(End<0){stopIndex=a.Count+stopIndex;}startIndex=Math.Max(startIndex,(stepCount>0)?0:int.MinValue);startIndex=Math.Min(startIndex,(stepCount>0)?a.Count:a.Count-1);stopIndex=Math.Max(stopIndex,-1);stopIndex=Math.Min(stopIndex,a.Count);bool positiveStep=(stepCount>0);if(IsValid(startIndex,stopIndex,positiveStep)){for(int i=startIndex;IsValid(i,stopIndex,positiveStep);i+=stepCount){yield return a[i];}}else{if(settings?.ErrorWhenNoMatch??false){throw new JsonException("Array slice of {0} to {1} returned no results.".FormatWith(CultureInfo.InvariantCulture,Start!=null?Start.GetValueOrDefault().ToString(CultureInfo.InvariantCulture):"*",End!=null?End.GetValueOrDefault().ToString(CultureInfo.InvariantCulture):"*"));}}}else{if(settings?.ErrorWhenNoMatch??false){throw new JsonException("Array slice is not valid on {0}.".FormatWith(CultureInfo.InvariantCulture,t.GetType().Name));}}}}private bool IsValid(int index,int stopIndex,bool positiveStep){if(positiveStep){return(index<stopIndex);}return(index>stopIndex);}}}
#if HAVE_ASYNC
namespace Newtonsoft.Json.Utilities{internal static class AsyncUtils{public static readonly Task<bool>False=Task.FromResult(false);public static readonly Task<bool>True=Task.FromResult(true);internal static Task<bool>ToAsync(this bool value)=>value?True:False;public static Task?CancelIfRequestedAsync(this CancellationToken cancellationToken){return cancellationToken.IsCancellationRequested?FromCanceled(cancellationToken):null;}public static Task<T>?CancelIfRequestedAsync<T>(this CancellationToken cancellationToken){return cancellationToken.IsCancellationRequested?FromCanceled<T>(cancellationToken):null;}public static Task FromCanceled(this CancellationToken cancellationToken){MiscellaneousUtils.Assert(cancellationToken.IsCancellationRequested);return new Task(()=>{},cancellationToken);}public static Task<T>FromCanceled<T>(this CancellationToken cancellationToken){MiscellaneousUtils.Assert(cancellationToken.IsCancellationRequested);
return new Task<T>(()=>default,cancellationToken);
}internal static readonly Task CompletedTask=Task.Delay(0);public static Task WriteAsync(this TextWriter writer,char value,CancellationToken cancellationToken){MiscellaneousUtils.Assert(writer!=null);return cancellationToken.IsCancellationRequested?FromCanceled(cancellationToken):writer.WriteAsync(value);}public static Task WriteAsync(this TextWriter writer,string?value,CancellationToken cancellationToken){MiscellaneousUtils.Assert(writer!=null);return cancellationToken.IsCancellationRequested?FromCanceled(cancellationToken):writer.WriteAsync(value);}public static Task WriteAsync(this TextWriter writer,char[]value,int start,int count,CancellationToken cancellationToken){MiscellaneousUtils.Assert(writer!=null);return cancellationToken.IsCancellationRequested?FromCanceled(cancellationToken):writer.WriteAsync(value,start,count);}public static Task<int>ReadAsync(this TextReader reader,char[]buffer,int index,int count,CancellationToken cancellationToken){MiscellaneousUtils.Assert(reader!=null);return cancellationToken.IsCancellationRequested?FromCanceled<int>(cancellationToken):reader.ReadAsync(buffer,index,count);}public static bool IsCompletedSucessfully(this Task task){
#if NETCOREAPP2_0
return task.IsCompletedSucessfully;
#else
return task.Status==TaskStatus.RanToCompletion;
#endif
}}}
#endif
#if HAVE_ASYNC
#endif
namespace Newtonsoft.Json.Utilities{internal class Base64Encoder{private const int Base64LineSize=76;private const int LineSizeInBytes=57;private readonly char[]_charsLine=new char[Base64LineSize];private readonly TextWriter _writer;private byte[]?_leftOverBytes;private int _leftOverBytesCount;public Base64Encoder(TextWriter writer){ValidationUtils.ArgumentNotNull(writer,nameof(writer));_writer=writer;}private void ValidateEncode(byte[]buffer,int index,int count){if(buffer==null){throw new ArgumentNullException(nameof(buffer));}if(index<0){throw new ArgumentOutOfRangeException(nameof(index));}if(count<0){throw new ArgumentOutOfRangeException(nameof(count));}if(count>(buffer.Length-index)){throw new ArgumentOutOfRangeException(nameof(count));}}public void Encode(byte[]buffer,int index,int count){ValidateEncode(buffer,index,count);if(_leftOverBytesCount>0){if(FulfillFromLeftover(buffer,index,ref count)){return;}int num2=Convert.ToBase64CharArray(_leftOverBytes,0,3,_charsLine,0);WriteChars(_charsLine,0,num2);}StoreLeftOverBytes(buffer,index,ref count);int num4=index+count;int length=LineSizeInBytes;while(index<num4){if((index+length)>num4){length=num4-index;}int num6=Convert.ToBase64CharArray(buffer,index,length,_charsLine,0);WriteChars(_charsLine,0,num6);index+=length;}}private void StoreLeftOverBytes(byte[]buffer,int index,ref int count){int leftOverBytesCount=count%3;if(leftOverBytesCount>0){count-=leftOverBytesCount;if(_leftOverBytes==null){_leftOverBytes=new byte[3];}for(int i=0;i<leftOverBytesCount;i++){_leftOverBytes[i]=buffer[index+count+i];}}_leftOverBytesCount=leftOverBytesCount;}private bool FulfillFromLeftover(byte[]buffer,int index,ref int count){int leftOverBytesCount=_leftOverBytesCount;while(leftOverBytesCount<3&&count>0){_leftOverBytes![leftOverBytesCount++]=buffer[index++];count--;}if(count==0&&leftOverBytesCount<3){_leftOverBytesCount=leftOverBytesCount;return true;}return false;}public void Flush(){if(_leftOverBytesCount>0){int count=Convert.ToBase64CharArray(_leftOverBytes,0,_leftOverBytesCount,_charsLine,0);WriteChars(_charsLine,0,count);_leftOverBytesCount=0;}}private void WriteChars(char[]chars,int index,int count){_writer.Write(chars,index,count);}
#if HAVE_ASYNC
public async Task EncodeAsync(byte[]buffer,int index,int count,CancellationToken cancellationToken){ValidateEncode(buffer,index,count);if(_leftOverBytesCount>0){if(FulfillFromLeftover(buffer,index,ref count)){return;}int num2=Convert.ToBase64CharArray(_leftOverBytes,0,3,_charsLine,0);await WriteCharsAsync(_charsLine,0,num2,cancellationToken).ConfigureAwait(false);}StoreLeftOverBytes(buffer,index,ref count);int num4=index+count;int length=LineSizeInBytes;while(index<num4){if(index+length>num4){length=num4-index;}int num6=Convert.ToBase64CharArray(buffer,index,length,_charsLine,0);await WriteCharsAsync(_charsLine,0,num6,cancellationToken).ConfigureAwait(false);index+=length;}}private Task WriteCharsAsync(char[]chars,int index,int count,CancellationToken cancellationToken){return _writer.WriteAsync(chars,index,count,cancellationToken);}public Task FlushAsync(CancellationToken cancellationToken){if(cancellationToken.IsCancellationRequested){return cancellationToken.FromCanceled();}if(_leftOverBytesCount>0){int count=Convert.ToBase64CharArray(_leftOverBytes,0,_leftOverBytesCount,_charsLine,0);_leftOverBytesCount=0;return WriteCharsAsync(_charsLine,0,count,cancellationToken);}return AsyncUtils.CompletedTask;}
#endif
}}namespace Newtonsoft.Json.Utilities{internal class BidirectionalDictionary<TFirst,TSecond>{private readonly IDictionary<TFirst,TSecond>_firstToSecond;private readonly IDictionary<TSecond,TFirst>_secondToFirst;private readonly string _duplicateFirstErrorMessage;private readonly string _duplicateSecondErrorMessage;public BidirectionalDictionary():this(EqualityComparer<TFirst>.Default,EqualityComparer<TSecond>.Default){}public BidirectionalDictionary(IEqualityComparer<TFirst>firstEqualityComparer,IEqualityComparer<TSecond>secondEqualityComparer):this(firstEqualityComparer,secondEqualityComparer,"Duplicate item already exists for '{0}'.","Duplicate item already exists for '{0}'."){}public BidirectionalDictionary(IEqualityComparer<TFirst>firstEqualityComparer,IEqualityComparer<TSecond>secondEqualityComparer,string duplicateFirstErrorMessage,string duplicateSecondErrorMessage){_firstToSecond=new Dictionary<TFirst,TSecond>(firstEqualityComparer);_secondToFirst=new Dictionary<TSecond,TFirst>(secondEqualityComparer);_duplicateFirstErrorMessage=duplicateFirstErrorMessage;_duplicateSecondErrorMessage=duplicateSecondErrorMessage;}public void Set(TFirst first,TSecond second){if(_firstToSecond.TryGetValue(first,out TSecond existingSecond)){if(!existingSecond!.Equals(second)){throw new ArgumentException(_duplicateFirstErrorMessage.FormatWith(CultureInfo.InvariantCulture,first));}}if(_secondToFirst.TryGetValue(second,out TFirst existingFirst)){if(!existingFirst!.Equals(first)){throw new ArgumentException(_duplicateSecondErrorMessage.FormatWith(CultureInfo.InvariantCulture,second));}}_firstToSecond.Add(first,second);_secondToFirst.Add(second,first);}public bool TryGetByFirst(TFirst first,out TSecond second){return _firstToSecond.TryGetValue(first,out second);}public bool TryGetBySecond(TSecond second,out TFirst first){return _secondToFirst.TryGetValue(second,out first);}}}
#if HAVE_LINQ || HAVE_ADO_NET
#if HAVE_ADO_NET
#endif
namespace Newtonsoft.Json.Converters{public class BinaryConverter:JsonConverter{
#if HAVE_LINQ
private const string BinaryTypeName="System.Data.Linq.Binary";private const string BinaryToArrayName="ToArray";private static ReflectionObject?_reflectionObject;
#endif
public override void WriteJson(JsonWriter writer,object?value,JsonSerializer serializer){if(value==null){writer.WriteNull();return;}byte[]data=GetByteArray(value);writer.WriteValue(data);}private byte[]GetByteArray(object value){
#if HAVE_LINQ
if(value.GetType().FullName==BinaryTypeName){EnsureReflectionObject(value.GetType());MiscellaneousUtils.Assert(_reflectionObject!=null);return(byte[])_reflectionObject.GetValue(value,BinaryToArrayName)!;}
#endif
#if HAVE_ADO_NET
if(value is SqlBinary binary){return binary.Value;}
#endif
throw new JsonSerializationException("Unexpected value type when writing binary: {0}".FormatWith(CultureInfo.InvariantCulture,value.GetType()));}
#if HAVE_LINQ
private static void EnsureReflectionObject(Type t){if(_reflectionObject==null){_reflectionObject=ReflectionObject.Create(t,t.GetConstructor(new[]{typeof(byte[])}),BinaryToArrayName);}}
#endif
public override object?ReadJson(JsonReader reader,Type objectType,object?existingValue,JsonSerializer serializer){if(reader.TokenType==JsonToken.Null){if(!ReflectionUtils.IsNullable(objectType)){throw JsonSerializationException.Create(reader,"Cannot convert null value to {0}.".FormatWith(CultureInfo.InvariantCulture,objectType));}return null;}byte[]data;if(reader.TokenType==JsonToken.StartArray){data=ReadByteArray(reader);}else if(reader.TokenType==JsonToken.String){string encodedData=reader.Value!.ToString();data=Convert.FromBase64String(encodedData);}else{throw JsonSerializationException.Create(reader,"Unexpected token parsing binary. Expected String or StartArray, got {0}.".FormatWith(CultureInfo.InvariantCulture,reader.TokenType));}Type t=(ReflectionUtils.IsNullableType(objectType))?Nullable.GetUnderlyingType(objectType):objectType;
#if HAVE_LINQ
if(t.FullName==BinaryTypeName){EnsureReflectionObject(t);MiscellaneousUtils.Assert(_reflectionObject!=null);return _reflectionObject.Creator!(data);}
#endif
#if HAVE_ADO_NET
if(t==typeof(SqlBinary)){return new SqlBinary(data);}
#endif
throw JsonSerializationException.Create(reader,"Unexpected object type when writing binary: {0}".FormatWith(CultureInfo.InvariantCulture,objectType));}private byte[]ReadByteArray(JsonReader reader){List<byte>byteList=new List<byte>();while(reader.Read()){switch(reader.TokenType){case JsonToken.Integer:byteList.Add(Convert.ToByte(reader.Value,CultureInfo.InvariantCulture));break;case JsonToken.EndArray:return byteList.ToArray();case JsonToken.Comment:break;default:throw JsonSerializationException.Create(reader,"Unexpected token when reading bytes: {0}".FormatWith(CultureInfo.InvariantCulture,reader.TokenType));}}throw JsonSerializationException.Create(reader,"Unexpected end when reading bytes.");}public override bool CanConvert(Type objectType){
#if HAVE_LINQ
if(objectType.FullName==BinaryTypeName){return true;}
#endif
#if HAVE_ADO_NET
if(objectType==typeof(SqlBinary)||objectType==typeof(SqlBinary?)){return true;}
#endif
return false;}}}
#endif
namespace Newtonsoft.Json.Bson{internal enum BsonBinaryType:byte{Binary=0x00,Function=0x01,[Obsolete("This type has been deprecated in the BSON specification. Use Binary instead.")]BinaryOld=0x02,[Obsolete("This type has been deprecated in the BSON specification. Use Uuid instead.")]UuidOld=0x03,Uuid=0x04,Md5=0x05,UserDefined=0x80}}
namespace Newtonsoft.Json.Bson{internal class BsonBinaryWriter{private static readonly Encoding Encoding=new UTF8Encoding(false);private readonly BinaryWriter _writer;private byte[]_largeByteBuffer;public DateTimeKind DateTimeKindHandling{get;set;}public BsonBinaryWriter(BinaryWriter writer){DateTimeKindHandling=DateTimeKind.Utc;_writer=writer;}public void Flush(){_writer.Flush();}public void Close(){
#if HAVE_STREAM_READER_WRITER_CLOSE
_writer.Close();
#else
_writer.Dispose();
#endif
}public void WriteToken(BsonToken t){CalculateSize(t);WriteTokenInternal(t);}private void WriteTokenInternal(BsonToken t){switch(t.Type){case BsonType.Object:{BsonObject value=(BsonObject)t;_writer.Write(value.CalculatedSize);foreach(BsonProperty property in value){_writer.Write((sbyte)property.Value.Type);WriteString((string)property.Name.Value,property.Name.ByteCount,null);WriteTokenInternal(property.Value);}_writer.Write((byte)0);}break;case BsonType.Array:{BsonArray value=(BsonArray)t;_writer.Write(value.CalculatedSize);ulong index=0;foreach(BsonToken c in value){_writer.Write((sbyte)c.Type);WriteString(index.ToString(CultureInfo.InvariantCulture),MathUtils.IntLength(index),null);WriteTokenInternal(c);index++;}_writer.Write((byte)0);}break;case BsonType.Integer:{BsonValue value=(BsonValue)t;_writer.Write(Convert.ToInt32(value.Value,CultureInfo.InvariantCulture));}break;case BsonType.Long:{BsonValue value=(BsonValue)t;_writer.Write(Convert.ToInt64(value.Value,CultureInfo.InvariantCulture));}break;case BsonType.Number:{BsonValue value=(BsonValue)t;_writer.Write(Convert.ToDouble(value.Value,CultureInfo.InvariantCulture));}break;case BsonType.String:{BsonString value=(BsonString)t;WriteString((string)value.Value,value.ByteCount,value.CalculatedSize-4);}break;case BsonType.Boolean:_writer.Write(t==BsonBoolean.True);break;case BsonType.Null:case BsonType.Undefined:break;case BsonType.Date:{BsonValue value=(BsonValue)t;long ticks=0;if(value.Value is DateTime dateTime){if(DateTimeKindHandling==DateTimeKind.Utc){dateTime=dateTime.ToUniversalTime();}else if(DateTimeKindHandling==DateTimeKind.Local){dateTime=dateTime.ToLocalTime();}ticks=DateTimeUtils.ConvertDateTimeToJavaScriptTicks(dateTime,false);}
#if HAVE_DATE_TIME_OFFSET
else{DateTimeOffset dateTimeOffset=(DateTimeOffset)value.Value;ticks=DateTimeUtils.ConvertDateTimeToJavaScriptTicks(dateTimeOffset.UtcDateTime,dateTimeOffset.Offset);}
#endif
_writer.Write(ticks);}break;case BsonType.Binary:{BsonBinary value=(BsonBinary)t;byte[]data=(byte[])value.Value;_writer.Write(data.Length);_writer.Write((byte)value.BinaryType);_writer.Write(data);}break;case BsonType.Oid:{BsonValue value=(BsonValue)t;byte[]data=(byte[])value.Value;_writer.Write(data);}break;case BsonType.Regex:{BsonRegex value=(BsonRegex)t;WriteString((string)value.Pattern.Value,value.Pattern.ByteCount,null);WriteString((string)value.Options.Value,value.Options.ByteCount,null);}break;default:throw new ArgumentOutOfRangeException(nameof(t),"Unexpected token when writing BSON: {0}".FormatWith(CultureInfo.InvariantCulture,t.Type));}}private void WriteString(string s,int byteCount,int?calculatedlengthPrefix){if(calculatedlengthPrefix!=null){_writer.Write(calculatedlengthPrefix.GetValueOrDefault());}WriteUtf8Bytes(s,byteCount);_writer.Write((byte)0);}public void WriteUtf8Bytes(string s,int byteCount){if(s!=null){if(byteCount<=256){if(_largeByteBuffer==null){_largeByteBuffer=new byte[256];}Encoding.GetBytes(s,0,s.Length,_largeByteBuffer,0);_writer.Write(_largeByteBuffer,0,byteCount);}else{byte[]bytes=Encoding.GetBytes(s);_writer.Write(bytes);}}}private int CalculateSize(int stringByteCount){return stringByteCount+1;}private int CalculateSizeWithLength(int stringByteCount,bool includeSize){int baseSize=(includeSize)?5:1;return baseSize+stringByteCount;}private int CalculateSize(BsonToken t){switch(t.Type){case BsonType.Object:{BsonObject value=(BsonObject)t;int bases=4;foreach(BsonProperty p in value){int size=1;size+=CalculateSize(p.Name);size+=CalculateSize(p.Value);bases+=size;}bases+=1;value.CalculatedSize=bases;return bases;}case BsonType.Array:{BsonArray value=(BsonArray)t;int size=4;ulong index=0;foreach(BsonToken c in value){size+=1;size+=CalculateSize(MathUtils.IntLength(index));size+=CalculateSize(c);index++;}size+=1;value.CalculatedSize=size;return value.CalculatedSize;}case BsonType.Integer:return 4;case BsonType.Long:return 8;case BsonType.Number:return 8;case BsonType.String:{BsonString value=(BsonString)t;string s=(string)value.Value;value.ByteCount=(s!=null)?Encoding.GetByteCount(s):0;value.CalculatedSize=CalculateSizeWithLength(value.ByteCount,value.IncludeLength);return value.CalculatedSize;}case BsonType.Boolean:return 1;case BsonType.Null:case BsonType.Undefined:return 0;case BsonType.Date:return 8;case BsonType.Binary:{BsonBinary value=(BsonBinary)t;byte[]data=(byte[])value.Value;value.CalculatedSize=4+1+data.Length;return value.CalculatedSize;}case BsonType.Oid:return 12;case BsonType.Regex:{BsonRegex value=(BsonRegex)t;int size=0;size+=CalculateSize(value.Pattern);size+=CalculateSize(value.Options);value.CalculatedSize=size;return value.CalculatedSize;}default:throw new ArgumentOutOfRangeException(nameof(t),"Unexpected token when writing BSON: {0}".FormatWith(CultureInfo.InvariantCulture,t.Type));}}}}
namespace Newtonsoft.Json.Bson{[Obsolete("BSON reading and writing has been moved to its own package. See https://www.nuget.org/packages/SD.Bson for more details.")]public class BsonObjectId{public byte[]Value{get;}public BsonObjectId(byte[]value){ValidationUtils.ArgumentNotNull(value,nameof(value));if(value.Length!=12){throw new ArgumentException("An ObjectId must be 12 bytes",nameof(value));}Value=value;}}}